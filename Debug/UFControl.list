
UFControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8f0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800bae0  0800bae0  0001bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf64  0800bf64  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf64  0800bf64  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf64  0800bf64  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf64  0800bf64  0001bf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf68  0800bf68  0001bf68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800bf6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003270  200000ec  0800c058  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000335c  0800c058  0002335c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027935  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006583  00000000  00000000  00047a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002230  00000000  00000000  0004e010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a54  00000000  00000000  00050240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ebf  00000000  00000000  00051c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f9f1  00000000  00000000  00074b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4bf2  00000000  00000000  000a4544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008da0  00000000  00000000  00159138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00161ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000ec 	.word	0x200000ec
 800020c:	00000000 	.word	0x00000000
 8000210:	0800bac8 	.word	0x0800bac8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000f0 	.word	0x200000f0
 800022c:	0800bac8 	.word	0x0800bac8

08000230 <PL_SET>:


static   EventGroupHandle_t pREGEvent;
static   StaticEventGroup_t xREGCreatedEventGroup;
void PL_SET()
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0

}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <RegisterDATALoad>:
{
	 pREGEvent = xEventGroupCreateStatic(&xREGCreatedEventGroup );
}

static uint8_t RegisterDATALoad()
{
 800023c:	b590      	push	{r4, r7, lr}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
	uint8_t res = 0;
 8000242:	2300      	movs	r3, #0
 8000244:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j;
	switch (PL_STATE)
 8000246:	4b55      	ldr	r3, [pc, #340]	; (800039c <RegisterDATALoad+0x160>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b03      	cmp	r3, #3
 800024c:	f200 80a1 	bhi.w	8000392 <RegisterDATALoad+0x156>
 8000250:	a201      	add	r2, pc, #4	; (adr r2, 8000258 <RegisterDATALoad+0x1c>)
 8000252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000256:	bf00      	nop
 8000258:	08000269 	.word	0x08000269
 800025c:	08000301 	.word	0x08000301
 8000260:	0800030d 	.word	0x0800030d
 8000264:	0800031f 	.word	0x0800031f
	{
		case 0:
			//PL_RESET();
			PL_STATE = 1;
 8000268:	4b4c      	ldr	r3, [pc, #304]	; (800039c <RegisterDATALoad+0x160>)
 800026a:	2201      	movs	r2, #1
 800026c:	701a      	strb	r2, [r3, #0]
			if (data_check_counter >= DATA_VALID_TIMES)
 800026e:	4b4c      	ldr	r3, [pc, #304]	; (80003a0 <RegisterDATALoad+0x164>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b02      	cmp	r3, #2
 8000274:	f240 808c 	bls.w	8000390 <RegisterDATALoad+0x154>
			{
				data_check_counter = 0;
 8000278:	4b49      	ldr	r3, [pc, #292]	; (80003a0 <RegisterDATALoad+0x164>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
				for (i=0;i<6;i++)
 800027e:	2300      	movs	r3, #0
 8000280:	71bb      	strb	r3, [r7, #6]
 8000282:	e023      	b.n	80002cc <RegisterDATALoad+0x90>
				{
					    dc_mask[0 ] = mask[i][0];
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	4947      	ldr	r1, [pc, #284]	; (80003a4 <RegisterDATALoad+0x168>)
 8000288:	4613      	mov	r3, r2
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	4413      	add	r3, r2
 800028e:	440b      	add	r3, r1
 8000290:	781a      	ldrb	r2, [r3, #0]
 8000292:	4b45      	ldr	r3, [pc, #276]	; (80003a8 <RegisterDATALoad+0x16c>)
 8000294:	701a      	strb	r2, [r3, #0]
						for (j=1 ;j<DATA_VALID_TIMES;j++)
 8000296:	2301      	movs	r3, #1
 8000298:	717b      	strb	r3, [r7, #5]
 800029a:	e011      	b.n	80002c0 <RegisterDATALoad+0x84>
						{
							dc_mask[0 ] &= mask[i][j];
 800029c:	4b42      	ldr	r3, [pc, #264]	; (80003a8 <RegisterDATALoad+0x16c>)
 800029e:	7819      	ldrb	r1, [r3, #0]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	7978      	ldrb	r0, [r7, #5]
 80002a4:	4c3f      	ldr	r4, [pc, #252]	; (80003a4 <RegisterDATALoad+0x168>)
 80002a6:	4613      	mov	r3, r2
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	4413      	add	r3, r2
 80002ac:	4423      	add	r3, r4
 80002ae:	4403      	add	r3, r0
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	400b      	ands	r3, r1
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b3c      	ldr	r3, [pc, #240]	; (80003a8 <RegisterDATALoad+0x16c>)
 80002b8:	701a      	strb	r2, [r3, #0]
						for (j=1 ;j<DATA_VALID_TIMES;j++)
 80002ba:	797b      	ldrb	r3, [r7, #5]
 80002bc:	3301      	adds	r3, #1
 80002be:	717b      	strb	r3, [r7, #5]
 80002c0:	797b      	ldrb	r3, [r7, #5]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	d9ea      	bls.n	800029c <RegisterDATALoad+0x60>
				for (i=0;i<6;i++)
 80002c6:	79bb      	ldrb	r3, [r7, #6]
 80002c8:	3301      	adds	r3, #1
 80002ca:	71bb      	strb	r3, [r7, #6]
 80002cc:	79bb      	ldrb	r3, [r7, #6]
 80002ce:	2b05      	cmp	r3, #5
 80002d0:	d9d8      	bls.n	8000284 <RegisterDATALoad+0x48>
						}
				}
				for (i=0;i<6;i++)
 80002d2:	2300      	movs	r3, #0
 80002d4:	71bb      	strb	r3, [r7, #6]
 80002d6:	e00d      	b.n	80002f4 <RegisterDATALoad+0xb8>
				{
					data[i] ^=  dc_mask[i];
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	4a34      	ldr	r2, [pc, #208]	; (80003ac <RegisterDATALoad+0x170>)
 80002dc:	5cd1      	ldrb	r1, [r2, r3]
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	4a31      	ldr	r2, [pc, #196]	; (80003a8 <RegisterDATALoad+0x16c>)
 80002e2:	5cd2      	ldrb	r2, [r2, r3]
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	404a      	eors	r2, r1
 80002e8:	b2d1      	uxtb	r1, r2
 80002ea:	4a30      	ldr	r2, [pc, #192]	; (80003ac <RegisterDATALoad+0x170>)
 80002ec:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<6;i++)
 80002ee:	79bb      	ldrb	r3, [r7, #6]
 80002f0:	3301      	adds	r3, #1
 80002f2:	71bb      	strb	r3, [r7, #6]
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	2b05      	cmp	r3, #5
 80002f8:	d9ee      	bls.n	80002d8 <RegisterDATALoad+0x9c>
				}
				res = 1;
 80002fa:	2301      	movs	r3, #1
 80002fc:	71fb      	strb	r3, [r7, #7]
			}
		break;
 80002fe:	e047      	b.n	8000390 <RegisterDATALoad+0x154>
		case 1:
			PL_SET();
 8000300:	f7ff ff96 	bl	8000230 <PL_SET>
			PL_STATE =2;
 8000304:	4b25      	ldr	r3, [pc, #148]	; (800039c <RegisterDATALoad+0x160>)
 8000306:	2202      	movs	r2, #2
 8000308:	701a      	strb	r2, [r3, #0]

			break;
 800030a:	e042      	b.n	8000392 <RegisterDATALoad+0x156>
		case 2:
			HAL_SPI_Receive_DMA(&hspi2,&pDATA,6U);
 800030c:	2206      	movs	r2, #6
 800030e:	4928      	ldr	r1, [pc, #160]	; (80003b0 <RegisterDATALoad+0x174>)
 8000310:	4828      	ldr	r0, [pc, #160]	; (80003b4 <RegisterDATALoad+0x178>)
 8000312:	f005 fcf5 	bl	8005d00 <HAL_SPI_Receive_DMA>
			PL_STATE = 3;
 8000316:	4b21      	ldr	r3, [pc, #132]	; (800039c <RegisterDATALoad+0x160>)
 8000318:	2203      	movs	r2, #3
 800031a:	701a      	strb	r2, [r3, #0]
			break;
 800031c:	e039      	b.n	8000392 <RegisterDATALoad+0x156>
		case 3:
			EventBits_t bits =  xEventGroupGetBits( pREGEvent );
 800031e:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <RegisterDATALoad+0x17c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f008 fd7b 	bl	8008e20 <xEventGroupClearBits>
 800032a:	6038      	str	r0, [r7, #0]
			if (bits & DATA_LOAD_READY)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <RegisterDATALoad+0x10c>
			{
				xEventGroupClearBits(pREGEvent,DATA_LOAD_READY);
 8000336:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <RegisterDATALoad+0x17c>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2101      	movs	r1, #1
 800033c:	4618      	mov	r0, r3
 800033e:	f008 fd6f 	bl	8008e20 <xEventGroupClearBits>
				PL_STATE = 0;
 8000342:	4b16      	ldr	r3, [pc, #88]	; (800039c <RegisterDATALoad+0x160>)
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
			}
			for (i=0;i <6 ;i++)
 8000348:	2300      	movs	r3, #0
 800034a:	71bb      	strb	r3, [r7, #6]
 800034c:	e016      	b.n	800037c <RegisterDATALoad+0x140>
			{
				mask[i][data_check_counter] = data[i] ^ pDATA[i];
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	4a16      	ldr	r2, [pc, #88]	; (80003ac <RegisterDATALoad+0x170>)
 8000352:	5cd1      	ldrb	r1, [r2, r3]
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <RegisterDATALoad+0x174>)
 8000358:	5cd3      	ldrb	r3, [r2, r3]
 800035a:	79ba      	ldrb	r2, [r7, #6]
 800035c:	4810      	ldr	r0, [pc, #64]	; (80003a0 <RegisterDATALoad+0x164>)
 800035e:	7800      	ldrb	r0, [r0, #0]
 8000360:	4604      	mov	r4, r0
 8000362:	404b      	eors	r3, r1
 8000364:	b2d8      	uxtb	r0, r3
 8000366:	490f      	ldr	r1, [pc, #60]	; (80003a4 <RegisterDATALoad+0x168>)
 8000368:	4613      	mov	r3, r2
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	4413      	add	r3, r2
 800036e:	440b      	add	r3, r1
 8000370:	4423      	add	r3, r4
 8000372:	4602      	mov	r2, r0
 8000374:	701a      	strb	r2, [r3, #0]
			for (i=0;i <6 ;i++)
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	3301      	adds	r3, #1
 800037a:	71bb      	strb	r3, [r7, #6]
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	2b05      	cmp	r3, #5
 8000380:	d9e5      	bls.n	800034e <RegisterDATALoad+0x112>

			}
			data_check_counter++;
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <RegisterDATALoad+0x164>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <RegisterDATALoad+0x164>)
 800038c:	701a      	strb	r2, [r3, #0]

			break;
 800038e:	e000      	b.n	8000392 <RegisterDATALoad+0x156>
		break;
 8000390:	bf00      	nop


	}
	return (res);
 8000392:	79fb      	ldrb	r3, [r7, #7]
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bd90      	pop	{r4, r7, pc}
 800039c:	2000010c 	.word	0x2000010c
 80003a0:	20000116 	.word	0x20000116
 80003a4:	20000120 	.word	0x20000120
 80003a8:	20000134 	.word	0x20000134
 80003ac:	20000118 	.word	0x20000118
 80003b0:	20000110 	.word	0x20000110
 80003b4:	20000338 	.word	0x20000338
 80003b8:	20000108 	.word	0x20000108

080003bc <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	 static portBASE_TYPE xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <HAL_SPI_RxCpltCallback+0x40>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
	 xEventGroupSetBitsFromISR( pREGEvent, DATA_LOAD_READY, &xHigherPriorityTaskWoken );
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <HAL_SPI_RxCpltCallback+0x44>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <HAL_SPI_RxCpltCallback+0x40>)
 80003d0:	2101      	movs	r1, #1
 80003d2:	4618      	mov	r0, r3
 80003d4:	f008 fe16 	bl	8009004 <xEventGroupSetBitsFromISR>
	 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <HAL_SPI_RxCpltCallback+0x40>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d008      	beq.n	80003f2 <HAL_SPI_RxCpltCallback+0x36>
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <HAL_SPI_RxCpltCallback+0x48>)
 80003e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	f3bf 8f4f 	dsb	sy
 80003ec:	f3bf 8f6f 	isb	sy
	 return;
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop

}
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200001a4 	.word	0x200001a4
 8000400:	20000108 	.word	0x20000108
 8000404:	e000ed04 	.word	0xe000ed04

08000408 <eDinConfig>:


static DinConfig_t xDinConfig[ DIN_COUNT];

DIN_FUNCTION_ERROR_t eDinConfig( uint8_t ucCh, DIN_INPUT_TYPE inType, uint32_t ulHFront, uint32_t ulLFront)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af00      	add	r7, sp, #0
 800040e:	60ba      	str	r2, [r7, #8]
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	4603      	mov	r3, r0
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	460b      	mov	r3, r1
 8000418:	73bb      	strb	r3, [r7, #14]
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
 800041a:	2301      	movs	r3, #1
 800041c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
	if ( ucCh <DIN_COUNT)
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	2b04      	cmp	r3, #4
 8000432:	d854      	bhi.n	80004de <eDinConfig+0xd6>
	{
		xDinConfig[ucCh].eInputType = inType;
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <eDinConfig+0xe4>)
 8000438:	011b      	lsls	r3, r3, #4
 800043a:	4413      	add	r3, r2
 800043c:	330e      	adds	r3, #14
 800043e:	7bba      	ldrb	r2, [r7, #14]
 8000440:	701a      	strb	r2, [r3, #0]
		xDinConfig[ucCh].ucValue 	= (xDinConfig[ucCh].eInputType == DIN_CONFIG_POSITIVE ) ? 0U : 1U;
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	4a29      	ldr	r2, [pc, #164]	; (80004ec <eDinConfig+0xe4>)
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	4413      	add	r3, r2
 800044a:	330e      	adds	r3, #14
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b01      	cmp	r3, #1
 8000450:	bf14      	ite	ne
 8000452:	2301      	movne	r3, #1
 8000454:	2300      	moveq	r3, #0
 8000456:	b2da      	uxtb	r2, r3
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	4611      	mov	r1, r2
 800045c:	4a23      	ldr	r2, [pc, #140]	; (80004ec <eDinConfig+0xe4>)
 800045e:	011b      	lsls	r3, r3, #4
 8000460:	4413      	add	r3, r2
 8000462:	330c      	adds	r3, #12
 8000464:	460a      	mov	r2, r1
 8000466:	701a      	strb	r2, [r3, #0]
		GPIO_InitStruct.Pin 		= xDinPortConfig[ucCh].Pin;
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	4a21      	ldr	r2, [pc, #132]	; (80004f0 <eDinConfig+0xe8>)
 800046c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000470:	617b      	str	r3, [r7, #20]

		if ( xDinConfig[ucCh].eInputType == RPM_CONFIG )
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <eDinConfig+0xe4>)
 8000476:	011b      	lsls	r3, r3, #4
 8000478:	4413      	add	r3, r2
 800047a:	330e      	adds	r3, #14
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d106      	bne.n	8000490 <eDinConfig+0x88>
		{
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	4a19      	ldr	r2, [pc, #100]	; (80004ec <eDinConfig+0xe4>)
 8000486:	011b      	lsls	r3, r3, #4
 8000488:	4413      	add	r3, r2
 800048a:	330e      	adds	r3, #14
 800048c:	2201      	movs	r2, #1
 800048e:	701a      	strb	r2, [r3, #0]
		}
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000494:	2301      	movs	r3, #1
 8000496:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(xDinPortConfig[ucCh].GPIOx,&GPIO_InitStruct);
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <eDinConfig+0xe8>)
 800049c:	00db      	lsls	r3, r3, #3
 800049e:	4413      	add	r3, r2
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f107 0214 	add.w	r2, r7, #20
 80004a6:	4611      	mov	r1, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f003 f805 	bl	80034b8 <HAL_GPIO_Init>
		xDinConfig[ucCh].ulHighCounter = ulHFront;
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <eDinConfig+0xe4>)
 80004b2:	011b      	lsls	r3, r3, #4
 80004b4:	4413      	add	r3, r2
 80004b6:	3308      	adds	r3, #8
 80004b8:	68ba      	ldr	r2, [r7, #8]
 80004ba:	601a      	str	r2, [r3, #0]
		xDinConfig[ucCh].ulLowCounter = ulLFront;
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <eDinConfig+0xe4>)
 80004c0:	011b      	lsls	r3, r3, #4
 80004c2:	4413      	add	r3, r2
 80004c4:	3304      	adds	r3, #4
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	601a      	str	r2, [r3, #0]
		xDinConfig[ucCh].ucTempValue = 0U;
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <eDinConfig+0xe4>)
 80004ce:	011b      	lsls	r3, r3, #4
 80004d0:	4413      	add	r3, r2
 80004d2:	330d      	adds	r3, #13
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
		eRes = DIN_CONFIG_OK;
 80004d8:	2300      	movs	r3, #0
 80004da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return ( eRes );
 80004de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3728      	adds	r7, #40	; 0x28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2000013c 	.word	0x2000013c
 80004f0:	0800bb90 	.word	0x0800bb90

080004f4 <vDINInit>:

static void vDINInit()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	eDinConfig( INPUT_1, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 80004f8:	230a      	movs	r3, #10
 80004fa:	220a      	movs	r2, #10
 80004fc:	2100      	movs	r1, #0
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff ff82 	bl	8000408 <eDinConfig>
	eDinConfig( INPUT_2, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000504:	230a      	movs	r3, #10
 8000506:	220a      	movs	r2, #10
 8000508:	2100      	movs	r1, #0
 800050a:	2001      	movs	r0, #1
 800050c:	f7ff ff7c 	bl	8000408 <eDinConfig>
	eDinConfig( INPUT_3, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000510:	230a      	movs	r3, #10
 8000512:	220a      	movs	r2, #10
 8000514:	2100      	movs	r1, #0
 8000516:	2002      	movs	r0, #2
 8000518:	f7ff ff76 	bl	8000408 <eDinConfig>
	eDinConfig( INPUT_4, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 800051c:	230a      	movs	r3, #10
 800051e:	220a      	movs	r2, #10
 8000520:	2100      	movs	r1, #0
 8000522:	2003      	movs	r0, #3
 8000524:	f7ff ff70 	bl	8000408 <eDinConfig>
	eDinConfig( INPUT_5, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000528:	230a      	movs	r3, #10
 800052a:	220a      	movs	r2, #10
 800052c:	2100      	movs	r1, #0
 800052e:	2004      	movs	r0, #4
 8000530:	f7ff ff6a 	bl	8000408 <eDinConfig>
	PL_SET();
 8000534:	f7ff fe7c 	bl	8000230 <PL_SET>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <StartDIN_DOUT>:

void StartDIN_DOUT(void *argument)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	EventGroupHandle_t system_event = NULL;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
	uint8_t init_state = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	75fb      	strb	r3, [r7, #23]
	vDINInit();
 800054c:	f7ff ffd2 	bl	80004f4 <vDINInit>
	while(1)
	{

		vTaskDelay(10);
 8000550:	200a      	movs	r0, #10
 8000552:	f009 fcaf 	bl	8009eb4 <vTaskDelay>

		for (uint8_t i = 0; i <DIN_COUNT; i++)
 8000556:	2300      	movs	r3, #0
 8000558:	75bb      	strb	r3, [r7, #22]
 800055a:	e071      	b.n	8000640 <StartDIN_DOUT+0x104>
		{
				if ( xDinConfig[i].eInputType != RPM_CONFIG )
 800055c:	7dbb      	ldrb	r3, [r7, #22]
 800055e:	4a69      	ldr	r2, [pc, #420]	; (8000704 <StartDIN_DOUT+0x1c8>)
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	4413      	add	r3, r2
 8000564:	330e      	adds	r3, #14
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d066      	beq.n	800063a <StartDIN_DOUT+0xfe>
				{
					uint8_t uсDinState = HAL_GPIO_ReadPin( xDinPortConfig[i].GPIOx, xDinPortConfig[i].Pin);
 800056c:	7dbb      	ldrb	r3, [r7, #22]
 800056e:	4a66      	ldr	r2, [pc, #408]	; (8000708 <StartDIN_DOUT+0x1cc>)
 8000570:	00db      	lsls	r3, r3, #3
 8000572:	4413      	add	r3, r2
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	7dbb      	ldrb	r3, [r7, #22]
 8000578:	4963      	ldr	r1, [pc, #396]	; (8000708 <StartDIN_DOUT+0x1cc>)
 800057a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800057e:	b29b      	uxth	r3, r3
 8000580:	4619      	mov	r1, r3
 8000582:	4610      	mov	r0, r2
 8000584:	f003 f92c 	bl	80037e0 <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	72fb      	strb	r3, [r7, #11]
					if (uсDinState != xDinConfig[i].ucTempValue )
 800058c:	7dbb      	ldrb	r3, [r7, #22]
 800058e:	4a5d      	ldr	r2, [pc, #372]	; (8000704 <StartDIN_DOUT+0x1c8>)
 8000590:	011b      	lsls	r3, r3, #4
 8000592:	4413      	add	r3, r2
 8000594:	330d      	adds	r3, #13
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	7afa      	ldrb	r2, [r7, #11]
 800059a:	429a      	cmp	r2, r3
 800059c:	d047      	beq.n	800062e <StartDIN_DOUT+0xf2>
					{
							xDinConfig[i].ulCounter ++ ;
 800059e:	7dbb      	ldrb	r3, [r7, #22]
 80005a0:	4958      	ldr	r1, [pc, #352]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80005a2:	011a      	lsls	r2, r3, #4
 80005a4:	440a      	add	r2, r1
 80005a6:	6812      	ldr	r2, [r2, #0]
 80005a8:	3201      	adds	r2, #1
 80005aa:	4956      	ldr	r1, [pc, #344]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	440b      	add	r3, r1
 80005b0:	601a      	str	r2, [r3, #0]
							if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 80005b2:	7dbb      	ldrb	r3, [r7, #22]
 80005b4:	4a53      	ldr	r2, [pc, #332]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	4413      	add	r3, r2
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	7dbb      	ldrb	r3, [r7, #22]
 80005be:	4951      	ldr	r1, [pc, #324]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	440b      	add	r3, r1
 80005c4:	330d      	adds	r3, #13
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d106      	bne.n	80005da <StartDIN_DOUT+0x9e>
 80005cc:	7dbb      	ldrb	r3, [r7, #22]
 80005ce:	494d      	ldr	r1, [pc, #308]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	440b      	add	r3, r1
 80005d4:	3308      	adds	r3, #8
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	e005      	b.n	80005e6 <StartDIN_DOUT+0xaa>
 80005da:	7dbb      	ldrb	r3, [r7, #22]
 80005dc:	4949      	ldr	r1, [pc, #292]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80005de:	011b      	lsls	r3, r3, #4
 80005e0:	440b      	add	r3, r1
 80005e2:	3304      	adds	r3, #4
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d227      	bcs.n	800063a <StartDIN_DOUT+0xfe>
							{
									xDinConfig[i].ucValue = uсDinState  ^ ( (~xDinConfig[i].eInputType) & 0x1);
 80005ea:	7dbb      	ldrb	r3, [r7, #22]
 80005ec:	4a45      	ldr	r2, [pc, #276]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80005ee:	011b      	lsls	r3, r3, #4
 80005f0:	4413      	add	r3, r2
 80005f2:	330e      	adds	r3, #14
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bf0c      	ite	eq
 80005fe:	2301      	moveq	r3, #1
 8000600:	2300      	movne	r3, #0
 8000602:	b2db      	uxtb	r3, r3
 8000604:	b25a      	sxtb	r2, r3
 8000606:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800060a:	4053      	eors	r3, r2
 800060c:	b25a      	sxtb	r2, r3
 800060e:	7dbb      	ldrb	r3, [r7, #22]
 8000610:	b2d1      	uxtb	r1, r2
 8000612:	4a3c      	ldr	r2, [pc, #240]	; (8000704 <StartDIN_DOUT+0x1c8>)
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	4413      	add	r3, r2
 8000618:	330c      	adds	r3, #12
 800061a:	460a      	mov	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
								    xDinConfig[i].ucTempValue = uсDinState ;
 800061e:	7dbb      	ldrb	r3, [r7, #22]
 8000620:	4a38      	ldr	r2, [pc, #224]	; (8000704 <StartDIN_DOUT+0x1c8>)
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	4413      	add	r3, r2
 8000626:	330d      	adds	r3, #13
 8000628:	7afa      	ldrb	r2, [r7, #11]
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	e005      	b.n	800063a <StartDIN_DOUT+0xfe>
							}
					}
					else
					{
						xDinConfig[i].ulCounter = 0U;
 800062e:	7dbb      	ldrb	r3, [r7, #22]
 8000630:	4a34      	ldr	r2, [pc, #208]	; (8000704 <StartDIN_DOUT+0x1c8>)
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	4413      	add	r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i <DIN_COUNT; i++)
 800063a:	7dbb      	ldrb	r3, [r7, #22]
 800063c:	3301      	adds	r3, #1
 800063e:	75bb      	strb	r3, [r7, #22]
 8000640:	7dbb      	ldrb	r3, [r7, #22]
 8000642:	2b04      	cmp	r3, #4
 8000644:	d98a      	bls.n	800055c <StartDIN_DOUT+0x20>
					}
			  }
		}
		if   (RegisterDATALoad() == 1)
 8000646:	f7ff fdf9 	bl	800023c <RegisterDATALoad>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	d128      	bne.n	80006a2 <StartDIN_DOUT+0x166>
		{
			uint32_t bdata = data[0] | data[1]<<8 | (data[2] & 0x3F)<<16;
 8000650:	4b2e      	ldr	r3, [pc, #184]	; (800070c <StartDIN_DOUT+0x1d0>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <StartDIN_DOUT+0x1d0>)
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	431a      	orrs	r2, r3
 800065e:	4b2b      	ldr	r3, [pc, #172]	; (800070c <StartDIN_DOUT+0x1d0>)
 8000660:	789b      	ldrb	r3, [r3, #2]
 8000662:	041b      	lsls	r3, r3, #16
 8000664:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8000668:	4313      	orrs	r3, r2
 800066a:	60fb      	str	r3, [r7, #12]
			vSetRegister(LAM_ERROR_REG_LSB, bdata);
 800066c:	68f9      	ldr	r1, [r7, #12]
 800066e:	202d      	movs	r0, #45	; 0x2d
 8000670:	f001 fc44 	bl	8001efc <vSetRegister>
		    bdata = data[2]>>6 | data[3]<<10 | (data[4] & 0x3F)<<18 | data[5];
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <StartDIN_DOUT+0x1d0>)
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	099b      	lsrs	r3, r3, #6
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <StartDIN_DOUT+0x1d0>)
 8000680:	78db      	ldrb	r3, [r3, #3]
 8000682:	029b      	lsls	r3, r3, #10
 8000684:	431a      	orrs	r2, r3
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <StartDIN_DOUT+0x1d0>)
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	049b      	lsls	r3, r3, #18
 800068c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
 8000690:	4313      	orrs	r3, r2
 8000692:	4a1e      	ldr	r2, [pc, #120]	; (800070c <StartDIN_DOUT+0x1d0>)
 8000694:	7952      	ldrb	r2, [r2, #5]
 8000696:	4313      	orrs	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
			vSetRegister(LAM_ERROR_REG_MSB, bdata);
 800069a:	68f9      	ldr	r1, [r7, #12]
 800069c:	202e      	movs	r0, #46	; 0x2e
 800069e:	f001 fc2d 	bl	8001efc <vSetRegister>
		}
		vSetRegisterBit(DEVICE_ALARM_REG, DOOR_ALARM ,  (uint16_t)xDinConfig[DOOR].ucValue );
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80006a4:	7b1b      	ldrb	r3, [r3, #12]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2101      	movs	r1, #1
 80006aa:	202f      	movs	r0, #47	; 0x2f
 80006ac:	f001 fc3c 	bl	8001f28 <vSetRegisterBit>
		vSetRegisterBit(DEVICE_STATUS_REG,REMOTE_FLAG,(uint16_t)xDinConfig[REMOTE].ucValue);
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80006b2:	7f1b      	ldrb	r3, [r3, #28]
 80006b4:	461a      	mov	r2, r3
 80006b6:	2101      	movs	r1, #1
 80006b8:	2030      	movs	r0, #48	; 0x30
 80006ba:	f001 fc35 	bl	8001f28 <vSetRegisterBit>
		vSetRegisterBit(DEVICE_STATUS_REG,FIRE_FLAG, (uint16_t)xDinConfig[FIRE].ucValue);
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80006c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80006c4:	461a      	mov	r2, r3
 80006c6:	2102      	movs	r1, #2
 80006c8:	2030      	movs	r0, #48	; 0x30
 80006ca:	f001 fc2d 	bl	8001f28 <vSetRegisterBit>
		vSetRegisterBit(DEVICE_STATUS_REG,LOCAL_FLAG, (uint16_t) xDinConfig[LOCAL_C].ucValue);
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80006d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006d4:	461a      	mov	r2, r3
 80006d6:	2103      	movs	r1, #3
 80006d8:	2030      	movs	r0, #48	; 0x30
 80006da:	f001 fc25 	bl	8001f28 <vSetRegisterBit>
		vSetRegisterBit(DEVICE_STATUS_REG, REMOTE_ACT_FLAG, (uint16_t)xDinConfig[REMOTE_ACT].ucValue);
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <StartDIN_DOUT+0x1c8>)
 80006e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80006e4:	461a      	mov	r2, r3
 80006e6:	2104      	movs	r1, #4
 80006e8:	2030      	movs	r0, #48	; 0x30
 80006ea:	f001 fc1d 	bl	8001f28 <vSetRegisterBit>
		if ( init_state == 0 )
 80006ee:	7dfb      	ldrb	r3, [r7, #23]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f47f af2d 	bne.w	8000550 <StartDIN_DOUT+0x14>
		{
			init_state = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	75fb      	strb	r3, [r7, #23]
			xEventGroupSetBits(system_event,   DIN_SYSTEM_READY);
 80006fa:	2104      	movs	r1, #4
 80006fc:	6938      	ldr	r0, [r7, #16]
 80006fe:	f008 fbc7 	bl	8008e90 <xEventGroupSetBits>
		vTaskDelay(10);
 8000702:	e725      	b.n	8000550 <StartDIN_DOUT+0x14>
 8000704:	2000013c 	.word	0x2000013c
 8000708:	0800bb90 	.word	0x0800bb90
 800070c:	20000118 	.word	0x20000118

08000710 <vKeyboardTask>:
  return pKeyboardQueue;
}


void vKeyboardTask( void * argument )
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  KeyEvent      TEvent;
  GPIO_PinState TK[KEYBOARD_COUNT];
  for(;;)
  {
    vTaskDelay(KEY_PEREOD);
 8000718:	200a      	movs	r0, #10
 800071a:	f009 fbcb 	bl	8009eb4 <vTaskDelay>
    for ( uint8_t i=0U; i<KEYBOARD_COUNT; i++ )                                          /* Считываем текущее состояние портов клавиатуры */
 800071e:	2300      	movs	r3, #0
 8000720:	75fb      	strb	r3, [r7, #23]
 8000722:	e0bf      	b.n	80008a4 <vKeyboardTask+0x194>
    {
      TK[i]=  HAL_GPIO_ReadPin( xDinPortConfig[i+DIN_COUNT].GPIOx, xDinPortConfig[i+DIN_COUNT].Pin );
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	3305      	adds	r3, #5
 8000728:	4a61      	ldr	r2, [pc, #388]	; (80008b0 <vKeyboardTask+0x1a0>)
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	4413      	add	r3, r2
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	3305      	adds	r3, #5
 8000734:	495e      	ldr	r1, [pc, #376]	; (80008b0 <vKeyboardTask+0x1a0>)
 8000736:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800073a:	b29b      	uxth	r3, r3
 800073c:	7dfc      	ldrb	r4, [r7, #23]
 800073e:	4619      	mov	r1, r3
 8000740:	4610      	mov	r0, r2
 8000742:	f003 f84d 	bl	80037e0 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	f104 0318 	add.w	r3, r4, #24
 800074e:	443b      	add	r3, r7
 8000750:	f803 2c0c 	strb.w	r2, [r3, #-12]
      TEvent.KeyCode = CODES[i];
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	4a57      	ldr	r2, [pc, #348]	; (80008b4 <vKeyboardTask+0x1a4>)
 8000758:	5cd3      	ldrb	r3, [r2, r3]
 800075a:	613b      	str	r3, [r7, #16]
	  /*Фиксируем отжатие клавищи (BRAKECODE)*/
      if ( STATUS[i] && ( TK[i] == KEY_OFF_STATE ) )
 800075c:	7dfb      	ldrb	r3, [r7, #23]
 800075e:	4a56      	ldr	r2, [pc, #344]	; (80008b8 <vKeyboardTask+0x1a8>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d01b      	beq.n	800079e <vKeyboardTask+0x8e>
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	3318      	adds	r3, #24
 800076a:	443b      	add	r3, r7
 800076c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d114      	bne.n	800079e <vKeyboardTask+0x8e>
      {
        STATUS[i]      = KEY_OFF; /*Состоянии клавиши ВЫКЛ*/
 8000774:	7dfb      	ldrb	r3, [r7, #23]
 8000776:	4a50      	ldr	r2, [pc, #320]	; (80008b8 <vKeyboardTask+0x1a8>)
 8000778:	2100      	movs	r1, #0
 800077a:	54d1      	strb	r1, [r2, r3]
        COUNTERS[i]    = 0U;      /*Сбрасываем счетчик*/
 800077c:	7dfb      	ldrb	r3, [r7, #23]
 800077e:	4a4f      	ldr	r2, [pc, #316]	; (80008bc <vKeyboardTask+0x1ac>)
 8000780:	2100      	movs	r1, #0
 8000782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        TEvent.Status  = BRAKECODE;
 8000786:	2340      	movs	r3, #64	; 0x40
 8000788:	753b      	strb	r3, [r7, #20]
        //xQueueReset( pKeyboardQueue );
        xQueueSend( pKeyboardQueue, &TEvent, portMAX_DELAY );
 800078a:	4b4d      	ldr	r3, [pc, #308]	; (80008c0 <vKeyboardTask+0x1b0>)
 800078c:	6818      	ldr	r0, [r3, #0]
 800078e:	f107 0110 	add.w	r1, r7, #16
 8000792:	2300      	movs	r3, #0
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	f008 fdfa 	bl	8009390 <xQueueGenericSend>
 800079c:	e07f      	b.n	800089e <vKeyboardTask+0x18e>
      }
      else
      {
        /*Если текущие состояние потрта ВКЛ, а предидущие было ВЫКЛ
        //то запускаме счеткик нажатий*/
        if ( !STATUS[i] && ( TK[i] == KEY_ON_STATE ) )
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	4a45      	ldr	r2, [pc, #276]	; (80008b8 <vKeyboardTask+0x1a8>)
 80007a2:	5cd3      	ldrb	r3, [r2, r3]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d129      	bne.n	80007fc <vKeyboardTask+0xec>
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
 80007aa:	3318      	adds	r3, #24
 80007ac:	443b      	add	r3, r7
 80007ae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d122      	bne.n	80007fc <vKeyboardTask+0xec>
        {
          COUNTERS[i]++;
 80007b6:	7dfb      	ldrb	r3, [r7, #23]
 80007b8:	4a40      	ldr	r2, [pc, #256]	; (80008bc <vKeyboardTask+0x1ac>)
 80007ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007be:	3201      	adds	r2, #1
 80007c0:	493e      	ldr	r1, [pc, #248]	; (80008bc <vKeyboardTask+0x1ac>)
 80007c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          /*если счетчик превысил значение SWITCHONDELAY то фиксируем нажатие*/
          if ( COUNTERS[i] >=  SWITCHONDELAY  )
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	4a3c      	ldr	r2, [pc, #240]	; (80008bc <vKeyboardTask+0x1ac>)
 80007ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d965      	bls.n	800089e <vKeyboardTask+0x18e>
          {
            COUNTERS[i]    = 0U;
 80007d2:	7dfb      	ldrb	r3, [r7, #23]
 80007d4:	4a39      	ldr	r2, [pc, #228]	; (80008bc <vKeyboardTask+0x1ac>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            STATUS[i]      = KEY_ON;
 80007dc:	7dfb      	ldrb	r3, [r7, #23]
 80007de:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <vKeyboardTask+0x1a8>)
 80007e0:	2101      	movs	r1, #1
 80007e2:	54d1      	strb	r1, [r2, r3]
            TEvent.Status  = MAKECODE;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	753b      	strb	r3, [r7, #20]
            xQueueSend( pKeyboardQueue, &TEvent, portMAX_DELAY );
 80007e8:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <vKeyboardTask+0x1b0>)
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	f107 0110 	add.w	r1, r7, #16
 80007f0:	2300      	movs	r3, #0
 80007f2:	f04f 32ff 	mov.w	r2, #4294967295
 80007f6:	f008 fdcb 	bl	8009390 <xQueueGenericSend>
          if ( COUNTERS[i] >=  SWITCHONDELAY  )
 80007fa:	e050      	b.n	800089e <vKeyboardTask+0x18e>

          }
        }
        else if ( (STATUS[i] != KEY_OFF)  && ( TK[i] == KEY_ON_STATE ) )
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <vKeyboardTask+0x1a8>)
 8000800:	5cd3      	ldrb	r3, [r2, r3]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d04b      	beq.n	800089e <vKeyboardTask+0x18e>
 8000806:	7dfb      	ldrb	r3, [r7, #23]
 8000808:	3318      	adds	r3, #24
 800080a:	443b      	add	r3, r7
 800080c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d144      	bne.n	800089e <vKeyboardTask+0x18e>
        {
          COUNTERS[i]++;
 8000814:	7dfb      	ldrb	r3, [r7, #23]
 8000816:	4a29      	ldr	r2, [pc, #164]	; (80008bc <vKeyboardTask+0x1ac>)
 8000818:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800081c:	3201      	adds	r2, #1
 800081e:	4927      	ldr	r1, [pc, #156]	; (80008bc <vKeyboardTask+0x1ac>)
 8000820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          switch ( STATUS[i] )
 8000824:	7dfb      	ldrb	r3, [r7, #23]
 8000826:	4a24      	ldr	r2, [pc, #144]	; (80008b8 <vKeyboardTask+0x1a8>)
 8000828:	5cd3      	ldrb	r3, [r2, r3]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d002      	beq.n	8000834 <vKeyboardTask+0x124>
 800082e:	2b02      	cmp	r3, #2
 8000830:	d01b      	beq.n	800086a <vKeyboardTask+0x15a>
                xQueueSend( pKeyboardQueue, &TEvent, portMAX_DELAY );

              }
              break;
            default:
    	      break;
 8000832:	e034      	b.n	800089e <vKeyboardTask+0x18e>
              if ( COUNTERS[i] >=  DefaultDelay  )
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	4a21      	ldr	r2, [pc, #132]	; (80008bc <vKeyboardTask+0x1ac>)
 8000838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083c:	2b09      	cmp	r3, #9
 800083e:	d92b      	bls.n	8000898 <vKeyboardTask+0x188>
                STATUS[i]      = KEY_ON_REPEAT;
 8000840:	7dfb      	ldrb	r3, [r7, #23]
 8000842:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <vKeyboardTask+0x1a8>)
 8000844:	2102      	movs	r1, #2
 8000846:	54d1      	strb	r1, [r2, r3]
                COUNTERS[i]    = 0U;
 8000848:	7dfb      	ldrb	r3, [r7, #23]
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <vKeyboardTask+0x1ac>)
 800084c:	2100      	movs	r1, #0
 800084e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                TEvent.Status  = MAKECODE;
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	753b      	strb	r3, [r7, #20]
                xQueueSend( pKeyboardQueue, &TEvent, portMAX_DELAY );
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <vKeyboardTask+0x1b0>)
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	f107 0110 	add.w	r1, r7, #16
 800085e:	2300      	movs	r3, #0
 8000860:	f04f 32ff 	mov.w	r2, #4294967295
 8000864:	f008 fd94 	bl	8009390 <xQueueGenericSend>
              break;
 8000868:	e016      	b.n	8000898 <vKeyboardTask+0x188>
              if ( COUNTERS[i] >= DefaultRepeatRate )
 800086a:	7dfb      	ldrb	r3, [r7, #23]
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <vKeyboardTask+0x1ac>)
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	2b27      	cmp	r3, #39	; 0x27
 8000874:	d912      	bls.n	800089c <vKeyboardTask+0x18c>
                COUNTERS[i]    = 0U;
 8000876:	7dfb      	ldrb	r3, [r7, #23]
 8000878:	4a10      	ldr	r2, [pc, #64]	; (80008bc <vKeyboardTask+0x1ac>)
 800087a:	2100      	movs	r1, #0
 800087c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                TEvent.Status  = MAKECODE;
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	753b      	strb	r3, [r7, #20]
                xQueueSend( pKeyboardQueue, &TEvent, portMAX_DELAY );
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <vKeyboardTask+0x1b0>)
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	f107 0110 	add.w	r1, r7, #16
 800088c:	2300      	movs	r3, #0
 800088e:	f04f 32ff 	mov.w	r2, #4294967295
 8000892:	f008 fd7d 	bl	8009390 <xQueueGenericSend>
              break;
 8000896:	e001      	b.n	800089c <vKeyboardTask+0x18c>
              break;
 8000898:	bf00      	nop
 800089a:	e000      	b.n	800089e <vKeyboardTask+0x18e>
              break;
 800089c:	bf00      	nop
    for ( uint8_t i=0U; i<KEYBOARD_COUNT; i++ )                                          /* Считываем текущее состояние портов клавиатуры */
 800089e:	7dfb      	ldrb	r3, [r7, #23]
 80008a0:	3301      	adds	r3, #1
 80008a2:	75fb      	strb	r3, [r7, #23]
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	f67f af3c 	bls.w	8000724 <vKeyboardTask+0x14>
    vTaskDelay(KEY_PEREOD);
 80008ac:	e734      	b.n	8000718 <vKeyboardTask+0x8>
 80008ae:	bf00      	nop
 80008b0:	0800bb90 	.word	0x0800bb90
 80008b4:	20000000 	.word	0x20000000
 80008b8:	2000018c 	.word	0x2000018c
 80008bc:	20000190 	.word	0x20000190
 80008c0:	200001a0 	.word	0x200001a0

080008c4 <eEEPROMWr>:
	I2C = hi2c2;
}


 EERPOM_ERROR_CODE_t eEEPROMWr(  EEPROM_ADRESS_TYPE addr, uint8_t * data, EEPROM_ADRESS_TYPE len )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	80fb      	strh	r3, [r7, #6]
 80008d0:	4613      	mov	r3, r2
 80008d2:	80bb      	strh	r3, [r7, #4]
	EERPOM_ERROR_CODE_t res = EEPROM_NOT_VALIDE_ADRESS;
 80008d4:	2302      	movs	r3, #2
 80008d6:	75fb      	strb	r3, [r7, #23]
	if ((  addr+ len  <= EEPROM_SIZE ) && (len!=0))
 80008d8:	88fa      	ldrh	r2, [r7, #6]
 80008da:	88bb      	ldrh	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008e2:	f200 8092 	bhi.w	8000a0a <eEEPROMWr+0x146>
 80008e6:	88bb      	ldrh	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	f000 808e 	beq.w	8000a0a <eEEPROMWr+0x146>
	{


	  if (len == sizeof(uint8_t))
 80008ee:	88bb      	ldrh	r3, [r7, #4]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d12f      	bne.n	8000954 <eEEPROMWr+0x90>
	  {
		  for (uint8_t i = 0; i< ADDRESS_DATA; i++ )
 80008f4:	2300      	movs	r3, #0
 80008f6:	75bb      	strb	r3, [r7, #22]
 80008f8:	e00a      	b.n	8000910 <eEEPROMWr+0x4c>
		  {
		 		  sector_buffer[i] = (( addr >> BYTE_SHIFT*i ) & ADDRES_MASK ) ;
 80008fa:	88fa      	ldrh	r2, [r7, #6]
 80008fc:	7dbb      	ldrb	r3, [r7, #22]
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	411a      	asrs	r2, r3
 8000902:	7dbb      	ldrb	r3, [r7, #22]
 8000904:	b2d1      	uxtb	r1, r2
 8000906:	4a43      	ldr	r2, [pc, #268]	; (8000a14 <eEEPROMWr+0x150>)
 8000908:	54d1      	strb	r1, [r2, r3]
		  for (uint8_t i = 0; i< ADDRESS_DATA; i++ )
 800090a:	7dbb      	ldrb	r3, [r7, #22]
 800090c:	3301      	adds	r3, #1
 800090e:	75bb      	strb	r3, [r7, #22]
 8000910:	7dbb      	ldrb	r3, [r7, #22]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f1      	beq.n	80008fa <eEEPROMWr+0x36>
		  }
		  sector_buffer[ADDRESS_DATA] = *data;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	4b3e      	ldr	r3, [pc, #248]	; (8000a14 <eEEPROMWr+0x150>)
 800091c:	705a      	strb	r2, [r3, #1]
		  res =  (HAL_I2C_Master_Transmit(I2C, Device_ADD | GET_ADDR_MSB( addr) , (uint8_t *) sector_buffer, ADDRESS_DATA + sizeof(uint8_t) , EEPROM_TIME_OUT ) == HAL_OK ) ? EEPROM_OK : EEPROM_WRITE_ERROR ;
 800091e:	4b3e      	ldr	r3, [pc, #248]	; (8000a18 <eEEPROMWr+0x154>)
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	09db      	lsrs	r3, r3, #7
 8000926:	b29b      	uxth	r3, r3
 8000928:	b21b      	sxth	r3, r3
 800092a:	f003 030e 	and.w	r3, r3, #14
 800092e:	b21b      	sxth	r3, r3
 8000930:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000934:	b21b      	sxth	r3, r3
 8000936:	b299      	uxth	r1, r3
 8000938:	2364      	movs	r3, #100	; 0x64
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2302      	movs	r3, #2
 800093e:	4a35      	ldr	r2, [pc, #212]	; (8000a14 <eEEPROMWr+0x150>)
 8000940:	f003 f8c2 	bl	8003ac8 <HAL_I2C_Master_Transmit>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <eEEPROMWr+0x8a>
 800094a:	2300      	movs	r3, #0
 800094c:	e000      	b.n	8000950 <eEEPROMWr+0x8c>
 800094e:	2304      	movs	r3, #4
 8000950:	75fb      	strb	r3, [r7, #23]
 8000952:	e05a      	b.n	8000a0a <eEEPROMWr+0x146>
	  }
	  else
	  {
		  res = EEPROM_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	75fb      	strb	r3, [r7, #23]
		  EEPROM_ADRESS_TYPE cur_len;
		  EEPROM_ADRESS_TYPE byte_to_send = len;
 8000958:	88bb      	ldrh	r3, [r7, #4]
 800095a:	827b      	strh	r3, [r7, #18]
		  EEPROM_ADRESS_TYPE offset = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	823b      	strh	r3, [r7, #16]
		  EEPROM_ADRESS_TYPE cur_addr = addr;
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	81fb      	strh	r3, [r7, #14]
		  while  (byte_to_send > 0)
 8000964:	e04e      	b.n	8000a04 <eEEPROMWr+0x140>
		  {
			  cur_len = SECTOR_SIZE - ( cur_addr % SECTOR_SIZE );
 8000966:	89fb      	ldrh	r3, [r7, #14]
 8000968:	f003 030f 	and.w	r3, r3, #15
 800096c:	b29b      	uxth	r3, r3
 800096e:	f1c3 0310 	rsb	r3, r3, #16
 8000972:	82bb      	strh	r3, [r7, #20]
			  if ( cur_len > byte_to_send )  cur_len = byte_to_send;
 8000974:	8aba      	ldrh	r2, [r7, #20]
 8000976:	8a7b      	ldrh	r3, [r7, #18]
 8000978:	429a      	cmp	r2, r3
 800097a:	d901      	bls.n	8000980 <eEEPROMWr+0xbc>
 800097c:	8a7b      	ldrh	r3, [r7, #18]
 800097e:	82bb      	strh	r3, [r7, #20]
			  ( void )memcpy( &sector_buffer[ADDRESS_DATA], &data[offset], cur_len );
 8000980:	8a3b      	ldrh	r3, [r7, #16]
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	4413      	add	r3, r2
 8000986:	8aba      	ldrh	r2, [r7, #20]
 8000988:	4619      	mov	r1, r3
 800098a:	4824      	ldr	r0, [pc, #144]	; (8000a1c <eEEPROMWr+0x158>)
 800098c:	f00b f83a 	bl	800ba04 <memcpy>
			  for (uint8_t i = 0; i< ADDRESS_DATA; i++ )
 8000990:	2300      	movs	r3, #0
 8000992:	737b      	strb	r3, [r7, #13]
 8000994:	e00a      	b.n	80009ac <eEEPROMWr+0xe8>
			  {
			 		  sector_buffer[i] = (( cur_addr >> BYTE_SHIFT*i ) & ADDRES_MASK ) ;
 8000996:	89fa      	ldrh	r2, [r7, #14]
 8000998:	7b7b      	ldrb	r3, [r7, #13]
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	411a      	asrs	r2, r3
 800099e:	7b7b      	ldrb	r3, [r7, #13]
 80009a0:	b2d1      	uxtb	r1, r2
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <eEEPROMWr+0x150>)
 80009a4:	54d1      	strb	r1, [r2, r3]
			  for (uint8_t i = 0; i< ADDRESS_DATA; i++ )
 80009a6:	7b7b      	ldrb	r3, [r7, #13]
 80009a8:	3301      	adds	r3, #1
 80009aa:	737b      	strb	r3, [r7, #13]
 80009ac:	7b7b      	ldrb	r3, [r7, #13]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0f1      	beq.n	8000996 <eEEPROMWr+0xd2>
			 // res =  EEPROM_WRITE_ERROR;
			 // for (int i =0; i<5;i++)
			//  {


				  if  (HAL_I2C_Master_Transmit(I2C, Device_ADD | GET_ADDR_MSB( cur_addr) ,(uint8_t *) sector_buffer,  cur_len + ADDRESS_DATA , EEPROM_TIME_OUT ) != HAL_OK )
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <eEEPROMWr+0x154>)
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	89fb      	ldrh	r3, [r7, #14]
 80009b8:	09db      	lsrs	r3, r3, #7
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b21b      	sxth	r3, r3
 80009be:	f003 030e 	and.w	r3, r3, #14
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	b299      	uxth	r1, r3
 80009cc:	8abb      	ldrh	r3, [r7, #20]
 80009ce:	3301      	adds	r3, #1
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	2264      	movs	r2, #100	; 0x64
 80009d4:	9200      	str	r2, [sp, #0]
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <eEEPROMWr+0x150>)
 80009d8:	f003 f876 	bl	8003ac8 <HAL_I2C_Master_Transmit>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <eEEPROMWr+0x122>
				  {
					//  vTaskDelay(1);
					  res =  EEPROM_WRITE_ERROR;
 80009e2:	2304      	movs	r3, #4
 80009e4:	75fb      	strb	r3, [r7, #23]
				//  else
				//  {
				//	  res =  EEPROM_OK;
				//  }
			//  }
			  vTaskDelay(5);
 80009e6:	2005      	movs	r0, #5
 80009e8:	f009 fa64 	bl	8009eb4 <vTaskDelay>
			 // HAL_I2C_IsDeviceReady(I2C, Device_ADD,20,1);
			  offset = offset  + cur_len;
 80009ec:	8a3a      	ldrh	r2, [r7, #16]
 80009ee:	8abb      	ldrh	r3, [r7, #20]
 80009f0:	4413      	add	r3, r2
 80009f2:	823b      	strh	r3, [r7, #16]
			  byte_to_send = byte_to_send - cur_len;
 80009f4:	8a7a      	ldrh	r2, [r7, #18]
 80009f6:	8abb      	ldrh	r3, [r7, #20]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	827b      	strh	r3, [r7, #18]
			  cur_addr = cur_addr  + cur_len;
 80009fc:	89fa      	ldrh	r2, [r7, #14]
 80009fe:	8abb      	ldrh	r3, [r7, #20]
 8000a00:	4413      	add	r3, r2
 8000a02:	81fb      	strh	r3, [r7, #14]
		  while  (byte_to_send > 0)
 8000a04:	8a7b      	ldrh	r3, [r7, #18]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1ad      	bne.n	8000966 <eEEPROMWr+0xa2>
		  }
		}
	}
	return ( res );
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200001a8 	.word	0x200001a8
 8000a18:	200001bc 	.word	0x200001bc
 8000a1c:	200001a9 	.word	0x200001a9

08000a20 <eEEPROMRd>:

 /*
 * Функция чтения блока данных из EEPROM
 */
 EERPOM_ERROR_CODE_t eEEPROMRd(  EEPROM_ADRESS_TYPE addr, uint8_t * data,   EEPROM_ADRESS_TYPE len )
 {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	80fb      	strh	r3, [r7, #6]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	80bb      	strh	r3, [r7, #4]
 	if ( (addr +len)  <= EEPROM_SIZE)
 8000a30:	88fa      	ldrh	r2, [r7, #6]
 8000a32:	88bb      	ldrh	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a3a:	d83b      	bhi.n	8000ab4 <eEEPROMRd+0x94>
 	{
 		uint8_t ucTemp[ADDRESS_DATA];
 		for (uint8_t i = 0; i< ADDRESS_DATA; i++ )
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	e00c      	b.n	8000a5c <eEEPROMRd+0x3c>
 		{
 			ucTemp[i] = (( addr >> BYTE_SHIFT*i ) & ADDRES_MASK ) ;
 8000a42:	88fa      	ldrh	r2, [r7, #6]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	411a      	asrs	r2, r3
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	3310      	adds	r3, #16
 8000a50:	443b      	add	r3, r7
 8000a52:	f803 2c04 	strb.w	r2, [r3, #-4]
 		for (uint8_t i = 0; i< ADDRESS_DATA; i++ )
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0ef      	beq.n	8000a42 <eEEPROMRd+0x22>
 	    }

 		if ( HAL_I2C_Master_Transmit(I2C, Device_ADD | GET_ADDR_MSB( addr ),(uint8_t *) &ucTemp, ADDRESS_DATA ,EEPROM_TIME_OUT ) != HAL_OK )
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <eEEPROMRd+0xa0>)
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	09db      	lsrs	r3, r3, #7
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	f003 030e 	and.w	r3, r3, #14
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	b299      	uxth	r1, r3
 8000a7c:	f107 020c 	add.w	r2, r7, #12
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2301      	movs	r3, #1
 8000a86:	f003 f81f 	bl	8003ac8 <HAL_I2C_Master_Transmit>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <eEEPROMRd+0x74>
 		{
 			return ( EEPROM_READ_ERROR );
 8000a90:	2303      	movs	r3, #3
 8000a92:	e010      	b.n	8000ab6 <eEEPROMRd+0x96>
 		}
 		else
 		{
 			return ( ( HAL_I2C_Master_Receive( I2C, Device_ADD, data, len ,EEPROM_TIME_OUT) != HAL_OK) ? EEPROM_READ_ERROR : EEPROM_OK );
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <eEEPROMRd+0xa0>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	2264      	movs	r2, #100	; 0x64
 8000a9c:	9200      	str	r2, [sp, #0]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	21a0      	movs	r1, #160	; 0xa0
 8000aa2:	f003 f90f 	bl	8003cc4 <HAL_I2C_Master_Receive>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <eEEPROMRd+0x90>
 8000aac:	2303      	movs	r3, #3
 8000aae:	e002      	b.n	8000ab6 <eEEPROMRd+0x96>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e000      	b.n	8000ab6 <eEEPROMRd+0x96>
 	    }
 	}
 	return ( EEPROM_NOT_VALIDE_ADRESS );
 8000ab4:	2302      	movs	r3, #2
 }
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200001bc 	.word	0x200001bc

08000ac4 <WriteByte>:
{

}

static void WriteByte( uint8_t data)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	uint16_t buf_port =(uint16_t) LCD_0_GPIO_Port->ODR;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <WriteByte+0x34>)
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	81fb      	strh	r3, [r7, #14]
	buf_port = buf_port & 0xF0;
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ada:	81fb      	strh	r3, [r7, #14]
	buf_port = buf_port | data;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	81fb      	strh	r3, [r7, #14]
	LCD_0_GPIO_Port->ODR = buf_port;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <WriteByte+0x34>)
 8000ae8:	89fb      	ldrh	r3, [r7, #14]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40010c00 	.word	0x40010c00

08000afc <DelayUS>:
{
	*pData = (uint16_t) LCD_0_GPIO_Port->ODR & 0x0F;
}

static void DelayUS( uint16_t value)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
	TIM6->ARR = value;
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <DelayUS+0x48>)
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM6->CNT = 0;//Обнуляем счётный регист
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <DelayUS+0x48>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1 |= TIM_CR1_CEN;//Запускаем таймер, разрешаем его работу.
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <DelayUS+0x48>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <DelayUS+0x48>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6013      	str	r3, [r2, #0]
	while((TIM6->SR & TIM_SR_UIF)==0){} //Ждём установки флага UIF = счёт закончен
 8000b1e:	bf00      	nop
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <DelayUS+0x48>)
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0f9      	beq.n	8000b20 <DelayUS+0x24>
	TIM6->SR &=~ TIM_SR_UIF;//Сброс флага.
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <DelayUS+0x48>)
 8000b2e:	691b      	ldr	r3, [r3, #16]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <DelayUS+0x48>)
 8000b32:	f023 0301 	bic.w	r3, r3, #1
 8000b36:	6113      	str	r3, [r2, #16]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40001000 	.word	0x40001000

08000b48 <Strob>:

static void Strob()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	SET_E;
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2110      	movs	r1, #16
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <Strob+0x24>)
 8000b52:	f002 fe5c 	bl	800380e <HAL_GPIO_WritePin>
	DelayUS(1);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff ffd0 	bl	8000afc <DelayUS>
	RESET_E;
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <Strob+0x24>)
 8000b62:	f002 fe54 	bl	800380e <HAL_GPIO_WritePin>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40011000 	.word	0x40011000

08000b70 <LCD_SendCommand>:

static void LCD_SendCommand(uint8_t command)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
	RESET_RS;
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <LCD_SendCommand+0x44>)
 8000b82:	f002 fe44 	bl	800380e <HAL_GPIO_WritePin>
	RESET_RW;
 8000b86:	2200      	movs	r2, #0
 8000b88:	2120      	movs	r1, #32
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <LCD_SendCommand+0x48>)
 8000b8c:	f002 fe3f 	bl	800380e <HAL_GPIO_WritePin>
	RESET_E;
 8000b90:	2200      	movs	r2, #0
 8000b92:	2110      	movs	r1, #16
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <LCD_SendCommand+0x48>)
 8000b96:	f002 fe3a 	bl	800380e <HAL_GPIO_WritePin>
	WriteByte( command);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff91 	bl	8000ac4 <WriteByte>
	Strob();
 8000ba2:	f7ff ffd1 	bl	8000b48 <Strob>
	DelayUS(40);
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f7ff ffa8 	bl	8000afc <DelayUS>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	40011000 	.word	0x40011000

08000bbc <LCD_SendData>:

static void LCD_SendData(uint8_t data)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	SET_RS;
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <LCD_SendData+0x44>)
 8000bce:	f002 fe1e 	bl	800380e <HAL_GPIO_WritePin>
	RESET_RW;
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	480b      	ldr	r0, [pc, #44]	; (8000c04 <LCD_SendData+0x48>)
 8000bd8:	f002 fe19 	bl	800380e <HAL_GPIO_WritePin>
	RESET_E;
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2110      	movs	r1, #16
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <LCD_SendData+0x48>)
 8000be2:	f002 fe14 	bl	800380e <HAL_GPIO_WritePin>
	WriteByte( data);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff6b 	bl	8000ac4 <WriteByte>
	Strob();
 8000bee:	f7ff ffab 	bl	8000b48 <Strob>
	DelayUS(40);
 8000bf2:	2028      	movs	r0, #40	; 0x28
 8000bf4:	f7ff ff82 	bl	8000afc <DelayUS>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40010c00 	.word	0x40010c00
 8000c04:	40011000 	.word	0x40011000

08000c08 <Init16X2LCD>:

void Init16X2LCD()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	osDelay(40);
 8000c0c:	2028      	movs	r0, #40	; 0x28
 8000c0e:	f007 ff35 	bl	8008a7c <osDelay>
	LCD_SendCommand(LCD_FUNSTION_SET  | DB_4);
 8000c12:	2030      	movs	r0, #48	; 0x30
 8000c14:	f7ff ffac 	bl	8000b70 <LCD_SendCommand>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <vRedrawLCD>:



void vRedrawLCD()
{
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af02      	add	r7, sp, #8
	EventBits_t redraw_flags;
	redraw_flags = xEventGroupWaitBits(lcdFlags, UP_STRING | DOWN_STRING ,pdTRUE,pdFALSE,0);
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <vRedrawLCD+0xa0>)
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	2300      	movs	r3, #0
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2103      	movs	r1, #3
 8000c30:	f008 f828 	bl	8008c84 <xEventGroupWaitBits>
 8000c34:	6038      	str	r0, [r7, #0]
	if (redraw_flags & UP_STRING )
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d019      	beq.n	8000c74 <vRedrawLCD+0x58>
	{
		memcpy(LCD_OUT_BUFFER,LCD_BUFFER,LED_STRING_LEN);
 8000c40:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <vRedrawLCD+0xa4>)
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <vRedrawLCD+0xa8>)
 8000c44:	4614      	mov	r4, r2
 8000c46:	461d      	mov	r5, r3
 8000c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4c:	682b      	ldr	r3, [r5, #0]
 8000c4e:	6023      	str	r3, [r4, #0]
		LCD_SendCommand(0x80);  //Устаналвиаем адрес в начало верхней строки
 8000c50:	2080      	movs	r0, #128	; 0x80
 8000c52:	f7ff ff8d 	bl	8000b70 <LCD_SendCommand>
		for (uint8_t i = 0;i< LED_STRING_LEN;i++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	e008      	b.n	8000c6e <vRedrawLCD+0x52>
		{
			LCD_SendData(LCD_OUT_BUFFER[i]);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <vRedrawLCD+0xa4>)
 8000c60:	5cd3      	ldrb	r3, [r2, r3]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffaa 	bl	8000bbc <LCD_SendData>
		for (uint8_t i = 0;i< LED_STRING_LEN;i++)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b13      	cmp	r3, #19
 8000c72:	d9f3      	bls.n	8000c5c <vRedrawLCD+0x40>
		}
	}
	if (redraw_flags & DOWN_STRING )
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d01a      	beq.n	8000cb4 <vRedrawLCD+0x98>
	{
		memcpy(LCD_OUT_BUFFER,&LCD_BUFFER[LED_STRING_LEN ],LED_STRING_LEN);
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <vRedrawLCD+0xa4>)
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <vRedrawLCD+0xa8>)
 8000c82:	4615      	mov	r5, r2
 8000c84:	f103 0414 	add.w	r4, r3, #20
 8000c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	602b      	str	r3, [r5, #0]
		LCD_SendCommand(0x80 | 0x40);  //Устаналвиаем адрес в начало нижней строки
 8000c90:	20c0      	movs	r0, #192	; 0xc0
 8000c92:	f7ff ff6d 	bl	8000b70 <LCD_SendCommand>
		for (uint8_t i = 0;i< LED_STRING_LEN;i++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	71bb      	strb	r3, [r7, #6]
 8000c9a:	e008      	b.n	8000cae <vRedrawLCD+0x92>
		{
			LCD_SendData(LCD_OUT_BUFFER[i]);
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <vRedrawLCD+0xa4>)
 8000ca0:	5cd3      	ldrb	r3, [r2, r3]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff8a 	bl	8000bbc <LCD_SendData>
		for (uint8_t i = 0;i< LED_STRING_LEN;i++)
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	3301      	adds	r3, #1
 8000cac:	71bb      	strb	r3, [r7, #6]
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	2b13      	cmp	r3, #19
 8000cb2:	d9f3      	bls.n	8000c9c <vRedrawLCD+0x80>
		}
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bdb0      	pop	{r4, r5, r7, pc}
 8000cbc:	200001fc 	.word	0x200001fc
 8000cc0:	200001e8 	.word	0x200001e8
 8000cc4:	200001c0 	.word	0x200001c0

08000cc8 <LCD_Task>:
/*
 * Таск перерисовывет данные на LCD
 */
void LCD_Task(void *argument)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	Init16X2LCD();
 8000cd0:	f7ff ff9a 	bl	8000c08 <Init16X2LCD>
	while(1)
	{
		vTaskDelay(DISPALY_REDRAW_TIME);
 8000cd4:	2032      	movs	r0, #50	; 0x32
 8000cd6:	f009 f8ed 	bl	8009eb4 <vTaskDelay>
		vRedrawLCD();
 8000cda:	f7ff ff9f 	bl	8000c1c <vRedrawLCD>
		vTaskDelay(DISPALY_REDRAW_TIME);
 8000cde:	e7f9      	b.n	8000cd4 <LCD_Task+0xc>

08000ce0 <StartControlTask>:
#include "control.h"



void StartControlTask(void *argument)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	6078      	str	r0, [r7, #4]
	CONTROLLER_STATE_t state = CONTROLLER_INIT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
	EventGroupHandle_t system_event = NULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		vTaskDelay(1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f009 f8df 	bl	8009eb4 <vTaskDelay>
		switch (state)
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d8f9      	bhi.n	8000cf0 <StartControlTask+0x10>
 8000cfc:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <StartControlTask+0x24>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000cf1 	.word	0x08000cf1
 8000d0c:	08000cf1 	.word	0x08000cf1
 8000d10:	08000d45 	.word	0x08000d45
		{
			case CONTROLLER_INIT:
				system_event = xGetSystemUpdateEvent();
 8000d14:	f000 fc10 	bl	8001538 <xGetSystemUpdateEvent>
 8000d18:	60b8      	str	r0, [r7, #8]
				if (system_event !=NULL)
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d016      	beq.n	8000d4e <StartControlTask+0x6e>
				{
					vInitRegister();
 8000d20:	f001 f8b2 	bl	8001e88 <vInitRegister>
					xEventGroupWaitBits(system_event,   REGISTER_SYSTEM_READY | DIN_SYSTEM_READY,  pdTRUE, pdTRUE, portMAX_DELAY );
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2105      	movs	r1, #5
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f007 ffa7 	bl	8008c84 <xEventGroupWaitBits>
					xEventGroupSetBits(system_event, WORK_READY);
 8000d36:	2108      	movs	r1, #8
 8000d38:	68b8      	ldr	r0, [r7, #8]
 8000d3a:	f008 f8a9 	bl	8008e90 <xEventGroupSetBits>
					state = CONTROLLER_WORK;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000d42:	e004      	b.n	8000d4e <StartControlTask+0x6e>
			case CONTROLLER_WORK:
				break;
			case CONTROLLER_REINIT:
				break;
			case CONTROLLER_SHOTDOWN:
				xEventGroupClearBits(system_event, WORK_READY);
 8000d44:	2108      	movs	r1, #8
 8000d46:	68b8      	ldr	r0, [r7, #8]
 8000d48:	f008 f86a 	bl	8008e20 <xEventGroupClearBits>
				break;
 8000d4c:	e001      	b.n	8000d52 <StartControlTask+0x72>
				break;
 8000d4e:	bf00      	nop
 8000d50:	e7ce      	b.n	8000cf0 <StartControlTask+0x10>
		vTaskDelay(1);
 8000d52:	e7cd      	b.n	8000cf0 <StartControlTask+0x10>

08000d54 <eIntiDataStorage>:

/*
 * Функция инициализации хранилища данных
 */
EERPOM_ERROR_CODE_t eIntiDataStorage()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
	EERPOM_ERROR_CODE_t res = EEPROM_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	( void )memset(datacash,0U,REGISTER_OFFSET );
 8000d5e:	220e      	movs	r2, #14
 8000d60:	2100      	movs	r1, #0
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <eIntiDataStorage+0x44>)
 8000d64:	f00a fdca 	bl	800b8fc <memset>
	res =  eEEPROMRd(VALIDE_CODE_ADDR, datacash, REGISTER_OFFSET  );
 8000d68:	220e      	movs	r2, #14
 8000d6a:	490b      	ldr	r1, [pc, #44]	; (8000d98 <eIntiDataStorage+0x44>)
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff fe57 	bl	8000a20 <eEEPROMRd>
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	if ( res== EEPROM_OK )
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d107      	bne.n	8000d8c <eIntiDataStorage+0x38>
	{
		if (datacash[VALIDE_CODE_ADDR ] != VALID_CODE)
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <eIntiDataStorage+0x44>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b66      	cmp	r3, #102	; 0x66
 8000d82:	d001      	beq.n	8000d88 <eIntiDataStorage+0x34>
		{
			eResetDataStorage();
 8000d84:	f000 f9c0 	bl	8001108 <eResetDataStorage>
		}
		vInitDescriptor();
 8000d88:	f000 f9ea 	bl	8001160 <vInitDescriptor>
	}
	return ( res );
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000200 	.word	0x20000200

08000d9c <eCreateDataStorage>:

STORAGE_ERROR eCreateDataStorage(EEPROM_ADRESS_TYPE reg_count, uint8_t * record_format_data, uint8_t record_count)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	80fb      	strh	r3, [r7, #6]
 8000da8:	4613      	mov	r3, r2
 8000daa:	717b      	strb	r3, [r7, #5]
	volatile EEPROM_DISCRIPTOR tempDataStorageDiscriptor;
	if ( ((reg_count * REGISTER_SIZE + REGISTER_OFFSET) < EEPROM_SIZE) && ( record_count <= MAX_RECORD_SIZE ) )
 8000dac:	88fa      	ldrh	r2, [r7, #6]
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	330e      	adds	r3, #14
 8000db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dba:	d252      	bcs.n	8000e62 <eCreateDataStorage+0xc6>
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	2b10      	cmp	r3, #16
 8000dc0:	d84f      	bhi.n	8000e62 <eCreateDataStorage+0xc6>
	{
		tempDataStorageDiscriptor.register_count  = reg_count;
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	833b      	strh	r3, [r7, #24]
		tempDataStorageDiscriptor.record_fields_count = record_count;
 8000dc6:	797b      	ldrb	r3, [r7, #5]
 8000dc8:	733b      	strb	r3, [r7, #12]
		tempDataStorageDiscriptor.record_mask = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
		tempDataStorageDiscriptor.record_byte_size = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3020 	strb.w	r3, [r7, #32]
		for (int i=record_count-1; i >=0 ;i--)
 8000dd4:	797b      	ldrb	r3, [r7, #5]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000dda:	e03b      	b.n	8000e54 <eCreateDataStorage+0xb8>
		{
			tempDataStorageDiscriptor.record_mask  = tempDataStorageDiscriptor.record_mask  <<2;
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	61fb      	str	r3, [r7, #28]
			tempDataStorageDiscriptor.record_mask  |= (record_format_data[i] & RECORD_TYPE_MASK);
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	6839      	ldr	r1, [r7, #0]
 8000de8:	440b      	add	r3, r1
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61fb      	str	r3, [r7, #28]
			switch (record_format_data[i] & RECORD_TYPE_MASK)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d823      	bhi.n	8000e4c <eCreateDataStorage+0xb0>
 8000e04:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <eCreateDataStorage+0x70>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000e2d 	.word	0x08000e2d
 8000e14:	08000e3d 	.word	0x08000e3d
 8000e18:	08000e1d 	.word	0x08000e1d
			{
					case RECORD_TIME_STAMP:
					case RECORD_LUA:
									tempDataStorageDiscriptor.record_byte_size +=REGISTER_SIZE;
 8000e1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3305      	adds	r3, #5
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	f887 3020 	strb.w	r3, [r7, #32]
								   	break;
 8000e2a:	e010      	b.n	8000e4e <eCreateDataStorage+0xb2>
					case RECORD_BYTE:
									tempDataStorageDiscriptor.record_byte_size +=1;
 8000e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f887 3020 	strb.w	r3, [r7, #32]
								   	break;
 8000e3a:	e008      	b.n	8000e4e <eCreateDataStorage+0xb2>
					case RECORD_SHORT:
									tempDataStorageDiscriptor.record_byte_size +=2;
 8000e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	3302      	adds	r3, #2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f887 3020 	strb.w	r3, [r7, #32]
								   	break;
 8000e4a:	e000      	b.n	8000e4e <eCreateDataStorage+0xb2>
						default:
							 		break;
 8000e4c:	bf00      	nop
		for (int i=record_count-1; i >=0 ;i--)
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	3b01      	subs	r3, #1
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	dac0      	bge.n	8000ddc <eCreateDataStorage+0x40>
			}
		}
		tempDataStorageDiscriptor.record_count = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	82fb      	strh	r3, [r7, #22]
		tempDataStorageDiscriptor.record_pointer = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	837b      	strh	r3, [r7, #26]
	}
	eIntiDataStorage();
 8000e62:	f7ff ff77 	bl	8000d54 <eIntiDataStorage>
	if ( (tempDataStorageDiscriptor.register_count != DataStorageDiscriptor.register_count ) ||
 8000e66:	8b3b      	ldrh	r3, [r7, #24]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <eCreateDataStorage+0x114>)
 8000e6c:	899b      	ldrh	r3, [r3, #12]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d104      	bne.n	8000e7c <eCreateDataStorage+0xe0>
			( tempDataStorageDiscriptor.record_mask  != DataStorageDiscriptor.record_mask ))
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <eCreateDataStorage+0x114>)
 8000e76:	691b      	ldr	r3, [r3, #16]
	if ( (tempDataStorageDiscriptor.register_count != DataStorageDiscriptor.register_count ) ||
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d014      	beq.n	8000ea6 <eCreateDataStorage+0x10a>
		{
			eResetDataStorage();
 8000e7c:	f000 f944 	bl	8001108 <eResetDataStorage>
			tempDataStorageDiscriptor.token = DataStorageDiscriptor.token;
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <eCreateDataStorage+0x114>)
 8000e82:	885b      	ldrh	r3, [r3, #2]
 8000e84:	81fb      	strh	r3, [r7, #14]
			eWriteNewDescriptor( tempDataStorageDiscriptor);
 8000e86:	466a      	mov	r2, sp
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e90:	e882 0003 	stmia.w	r2, {r0, r1}
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e9a:	f000 f80b 	bl	8000eb4 <eWriteNewDescriptor>
			eIntiDataStorage();
 8000e9e:	f7ff ff59 	bl	8000d54 <eIntiDataStorage>
			return (STORAGE_NEW);
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e000      	b.n	8000ea8 <eCreateDataStorage+0x10c>
		}
	else
		return  ( STORAGE_OK );
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000210 	.word	0x20000210

08000eb4 <eWriteNewDescriptor>:

STORAGE_ERROR eWriteNewDescriptor( EEPROM_DISCRIPTOR desc)
{
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	f107 0c08 	add.w	ip, r7, #8
 8000ebe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	( void )memset(datacash,0U,REGISTER_OFFSET );
 8000ec2:	220e      	movs	r2, #14
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4823      	ldr	r0, [pc, #140]	; (8000f54 <eWriteNewDescriptor+0xa0>)
 8000ec8:	f00a fd18 	bl	800b8fc <memset>
	datacash[VALIDE_CODE_ADDR] = VALID_CODE;
 8000ecc:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <eWriteNewDescriptor+0xa0>)
 8000ece:	2266      	movs	r2, #102	; 0x66
 8000ed0:	701a      	strb	r2, [r3, #0]
	SET_SHORT( ACCESS_TOKEN_ADDR,  desc.token );
 8000ed2:	897b      	ldrh	r3, [r7, #10]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 fa1c 	bl	8001314 <SET_SHORT>
	vWriteDescriptorReg(REGISTER_COUNT_ADDR ,  desc.register_count );
 8000edc:	8abb      	ldrh	r3, [r7, #20]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 fa03 	bl	80012ec <vWriteDescriptorReg>
	vWriteDescriptorReg(RECORD_COUNT_ADDR ,    desc.record_count );
 8000ee6:	8a7b      	ldrh	r3, [r7, #18]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2005      	movs	r0, #5
 8000eec:	f000 f9fe 	bl	80012ec <vWriteDescriptorReg>
	vWriteDescriptorReg(RECORD_POINTER_ADDR  , desc.record_pointer );
 8000ef0:	8afb      	ldrh	r3, [r7, #22]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	2007      	movs	r0, #7
 8000ef6:	f000 f9f9 	bl	80012ec <vWriteDescriptorReg>
	datacash[RECORD_SIZE_ADDR] 				=  desc.record_byte_size;
 8000efa:	7f3a      	ldrb	r2, [r7, #28]
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <eWriteNewDescriptor+0xa0>)
 8000efe:	725a      	strb	r2, [r3, #9]
	datacash[RECORD_FORMAT_ADDR] = desc.record_mask & BYTE_MASK;
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <eWriteNewDescriptor+0xa0>)
 8000f06:	729a      	strb	r2, [r3, #10]
	datacash[RECORD_FORMAT_ADDR + SECOND_BYTE_ADDR ] = ( desc.record_mask >> SECOND_BYTE_OFS ) & BYTE_MASK;
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	0a1b      	lsrs	r3, r3, #8
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <eWriteNewDescriptor+0xa0>)
 8000f10:	72da      	strb	r2, [r3, #11]
	datacash[RECORD_FORMAT_ADDR + THRID_BYTE_ADDR ] = ( desc.record_mask >> THRID_BYTE_OFS) & BYTE_MASK;
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	0c1b      	lsrs	r3, r3, #16
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <eWriteNewDescriptor+0xa0>)
 8000f1a:	731a      	strb	r2, [r3, #12]
	datacash[RECORD_FORMAT_ADDR + FOURTH_BYTE_ADDR ] = ( desc.record_mask >> FOURTH_BYTE_OFS) & BYTE_MASK;
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	0e1b      	lsrs	r3, r3, #24
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <eWriteNewDescriptor+0xa0>)
 8000f24:	735a      	strb	r2, [r3, #13]
	eEEPROMWr(VALIDE_CODE_ADDR, datacash,REGISTER_OFFSET);
 8000f26:	220e      	movs	r2, #14
 8000f28:	490a      	ldr	r1, [pc, #40]	; (8000f54 <eWriteNewDescriptor+0xa0>)
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff fcca 	bl	80008c4 <eEEPROMWr>
	( void )memset(datacash,0U,REGISTER_OFFSET );
 8000f30:	220e      	movs	r2, #14
 8000f32:	2100      	movs	r1, #0
 8000f34:	4807      	ldr	r0, [pc, #28]	; (8000f54 <eWriteNewDescriptor+0xa0>)
 8000f36:	f00a fce1 	bl	800b8fc <memset>
	 eEEPROMRd(VALIDE_CODE_ADDR, datacash, REGISTER_OFFSET  );
 8000f3a:	220e      	movs	r2, #14
 8000f3c:	4905      	ldr	r1, [pc, #20]	; (8000f54 <eWriteNewDescriptor+0xa0>)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff fd6e 	bl	8000a20 <eEEPROMRd>
	return  ( STORAGE_OK );
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f4e:	b004      	add	sp, #16
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000200 	.word	0x20000200

08000f58 <vSetRegData>:
/*
 *  Функции работы с регистрами
 *
 */
void vSetRegData(uint8_t * buf, uint8_t * data, uint8_t data_type)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	4613      	mov	r3, r2
 8000f64:	71fb      	strb	r3, [r7, #7]
	buf[0] = data_type;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	79fa      	ldrb	r2, [r7, #7]
 8000f6a:	701a      	strb	r2, [r3, #0]
	(void) memcpy(&buf[1],data,REGISTER_SIZE - 1);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	601a      	str	r2, [r3, #0]
	return;
 8000f76:	bf00      	nop
}
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <eEEPROMRegTypeWrite>:

/*
 *  Запись регистра с указанием типа данных
 */
EERPOM_ERROR_CODE_t eEEPROMRegTypeWrite( EEPROM_ADRESS_TYPE addr, void * data, REGISTE_DATA_TYPE_t datatype )
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	80fb      	strh	r3, [r7, #6]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	717b      	strb	r3, [r7, #5]
	uint8_t Data[REGISTER_SIZE];
	if  (datatype ==TIME_STAMP )
 8000f90:	797b      	ldrb	r3, [r7, #5]
 8000f92:	2b80      	cmp	r3, #128	; 0x80
 8000f94:	d106      	bne.n	8000fa4 <eEEPROMRegTypeWrite+0x24>
	{
		vSetTimeToReg(Data,  data);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f9d5 	bl	800134c <vSetTimeToReg>
 8000fa2:	e006      	b.n	8000fb2 <eEEPROMRegTypeWrite+0x32>
	}
	else
	{
		vSetRegData(Data,(uint8_t *) data, datatype);
 8000fa4:	797a      	ldrb	r2, [r7, #5]
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffd3 	bl	8000f58 <vSetRegData>
	}
	return  ( eEEPROMRegWrite(addr, Data) );
 8000fb2:	f107 0208 	add.w	r2, r7, #8
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f806 	bl	8000fcc <eEEPROMRegWrite>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <eEEPROMRegWrite>:
/*
 *  Запись абстрактных 5 байт данных в регистр
 */
EERPOM_ERROR_CODE_t eEEPROMRegWrite( EEPROM_ADRESS_TYPE addr, uint8_t * data )
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	80fb      	strh	r3, [r7, #6]
	EEPROM_ADRESS_TYPE usAddres = addr * REGISTER_SIZE + REGISTER_OFFSET ;
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	330e      	adds	r3, #14
 8000fe4:	81fb      	strh	r3, [r7, #14]
	if (( addr  <  DataStorageDiscriptor.register_count  ) && (USB_access==0))
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <eEEPROMRegWrite+0x58>)
 8000fe8:	899b      	ldrh	r3, [r3, #12]
 8000fea:	88fa      	ldrh	r2, [r7, #6]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d213      	bcs.n	8001018 <eEEPROMRegWrite+0x4c>
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <eEEPROMRegWrite+0x5c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10f      	bne.n	8001018 <eEEPROMRegWrite+0x4c>
	{
		uint8_t Data[REGISTER_SIZE];
		( void )memcpy(Data,data,REGISTER_SIZE);
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	6810      	ldr	r0, [r2, #0]
 8001000:	6018      	str	r0, [r3, #0]
 8001002:	7912      	ldrb	r2, [r2, #4]
 8001004:	711a      	strb	r2, [r3, #4]
		return ( eEEPROMWr(usAddres,&Data[0],REGISTER_SIZE));
 8001006:	f107 0108 	add.w	r1, r7, #8
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	2205      	movs	r2, #5
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fc58 	bl	80008c4 <eEEPROMWr>
 8001014:	4603      	mov	r3, r0
 8001016:	e000      	b.n	800101a <eEEPROMRegWrite+0x4e>

	}
	return ( EEPROM_NOT_VALIDE_ADRESS );
 8001018:	2302      	movs	r3, #2
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000210 	.word	0x20000210
 8001028:	2000020e 	.word	0x2000020e

0800102c <eEEPROMReadRegister>:
/*
 * Чтение данных из регистра
 */
REGISTE_DATA_TYPE_t eEEPROMReadRegister( EEPROM_ADRESS_TYPE addr, void * pData )
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	80fb      	strh	r3, [r7, #6]
	EEPROM_ADRESS_TYPE usAddres = addr * REGISTER_SIZE  + REGISTER_OFFSET ;
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	461a      	mov	r2, r3
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	4413      	add	r3, r2
 8001040:	b29b      	uxth	r3, r3
 8001042:	330e      	adds	r3, #14
 8001044:	81fb      	strh	r3, [r7, #14]
	uint8_t Data[REGISTER_SIZE];
	eEEPROMRd(usAddres , Data, REGISTER_SIZE);
 8001046:	f107 0108 	add.w	r1, r7, #8
 800104a:	89fb      	ldrh	r3, [r7, #14]
 800104c:	2205      	movs	r2, #5
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fce6 	bl	8000a20 <eEEPROMRd>
	REGISTE_DATA_TYPE_t register_type = (Data[0] & REGISTER_TYPE_MASK);
 8001054:	7a3b      	ldrb	r3, [r7, #8]
 8001056:	f023 030f 	bic.w	r3, r3, #15
 800105a:	737b      	strb	r3, [r7, #13]
	switch ( register_type )
 800105c:	7b7b      	ldrb	r3, [r7, #13]
 800105e:	2b80      	cmp	r3, #128	; 0x80
 8001060:	d00f      	beq.n	8001082 <eEEPROMReadRegister+0x56>
 8001062:	2b80      	cmp	r3, #128	; 0x80
 8001064:	dc1d      	bgt.n	80010a2 <eEEPROMReadRegister+0x76>
 8001066:	2b40      	cmp	r3, #64	; 0x40
 8001068:	d005      	beq.n	8001076 <eEEPROMReadRegister+0x4a>
 800106a:	2b40      	cmp	r3, #64	; 0x40
 800106c:	dc19      	bgt.n	80010a2 <eEEPROMReadRegister+0x76>
 800106e:	2b10      	cmp	r3, #16
 8001070:	d001      	beq.n	8001076 <eEEPROMReadRegister+0x4a>
 8001072:	2b20      	cmp	r3, #32
 8001074:	d115      	bne.n	80010a2 <eEEPROMReadRegister+0x76>
 8001076:	f8d7 3009 	ldr.w	r3, [r7, #9]
 800107a:	461a      	mov	r2, r3
	{
				case INTEGER_DATA:
				case BOOLEAN_DATA:
				case NUMBER_DATA:
				   ( void )memcpy(pData,&Data[1U],EEPROM_DATA_FRAME-1U);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	601a      	str	r2, [r3, #0]
					break;
 8001080:	e010      	b.n	80010a4 <eEEPROMReadRegister+0x78>
				case TIME_STAMP:
					( void )memcpy(pData,Data,EEPROM_DATA_FRAME);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	6010      	str	r0, [r2, #0]
 800108e:	791b      	ldrb	r3, [r3, #4]
 8001090:	7113      	strb	r3, [r2, #4]
					((uint8_t *)pData)[0] &=  ~REGISTER_TYPE_MASK ;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	b2da      	uxtb	r2, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	701a      	strb	r2, [r3, #0]
					break;
 80010a0:	e000      	b.n	80010a4 <eEEPROMReadRegister+0x78>
				default:
					break;
 80010a2:	bf00      	nop
	}
	return ( register_type );
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <eEEPROMWriteExternData>:
}
/*
 * Запись данных из внешнего источника в хранилище
 */
EERPOM_ERROR_CODE_t eEEPROMWriteExternData ( uint32_t adr, const uint8_t* data, uint32_t length )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
	if ( DataStorageDiscriptor.access == ACCESS_ALLOWED)
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <eEEPROMWriteExternData+0x50>)
 80010be:	7d5b      	ldrb	r3, [r3, #21]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d117      	bne.n	80010f4 <eEEPROMWriteExternData+0x44>
	{
		if ( length + adr  <= EEPROM_MAX_ADRRES )
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010ce:	d20f      	bcs.n	80010f0 <eEEPROMWriteExternData+0x40>
		{
			USB_access = 1;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <eEEPROMWriteExternData+0x54>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
			eEEPROMWr( adr,(uint8_t*)data,  length );
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	b292      	uxth	r2, r2
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fbef 	bl	80008c4 <eEEPROMWr>
			USB_access = 0;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <eEEPROMWriteExternData+0x54>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
			return (EEPROM_OK);
 80010ec:	2300      	movs	r3, #0
 80010ee:	e002      	b.n	80010f6 <eEEPROMWriteExternData+0x46>
        }
		else
		{
			return (EEPROM_NOT_VALIDE_ADRESS) ;
 80010f0:	2302      	movs	r3, #2
 80010f2:	e000      	b.n	80010f6 <eEEPROMWriteExternData+0x46>
		}
	}
	return ( EEPROM_ACCESS_ERROR );
 80010f4:	2305      	movs	r3, #5
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000210 	.word	0x20000210
 8001104:	2000020e 	.word	0x2000020e

08001108 <eResetDataStorage>:
/*******************************************************PRIVATE********************************************************************/
/*
 *   функция сборса хранилища
 */
static void eResetDataStorage()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
	 uint8_t data_buffer[SECTOR_SIZE];
	 ( void )memset(data_buffer,0U,SECTOR_SIZE);
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2210      	movs	r2, #16
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f00a fbf1 	bl	800b8fc <memset>
	 DataStorageDiscriptor.access = ACCESS_ALLOWED;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <eResetDataStorage+0x50>)
 800111c:	2201      	movs	r2, #1
 800111e:	755a      	strb	r2, [r3, #21]
	 for (uint16_t i=0;i<EEPROM_SIZE;i=i+SECTOR_SIZE)
 8001120:	2300      	movs	r3, #0
 8001122:	82fb      	strh	r3, [r7, #22]
 8001124:	e008      	b.n	8001138 <eResetDataStorage+0x30>
	 {
		 eEEPROMWriteExternData(i, data_buffer,SECTOR_SIZE);
 8001126:	8afb      	ldrh	r3, [r7, #22]
 8001128:	1d39      	adds	r1, r7, #4
 800112a:	2210      	movs	r2, #16
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ffbf 	bl	80010b0 <eEEPROMWriteExternData>
	 for (uint16_t i=0;i<EEPROM_SIZE;i=i+SECTOR_SIZE)
 8001132:	8afb      	ldrh	r3, [r7, #22]
 8001134:	3310      	adds	r3, #16
 8001136:	82fb      	strh	r3, [r7, #22]
 8001138:	8afb      	ldrh	r3, [r7, #22]
 800113a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800113e:	d3f2      	bcc.n	8001126 <eResetDataStorage+0x1e>
	 }
	 datacash[VALIDE_CODE_ADDR ] = VALID_CODE;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <eResetDataStorage+0x54>)
 8001142:	2266      	movs	r2, #102	; 0x66
 8001144:	701a      	strb	r2, [r3, #0]
	 eEEPROMWr( VALIDE_CODE_ADDR , datacash, 1 );
 8001146:	2201      	movs	r2, #1
 8001148:	4904      	ldr	r1, [pc, #16]	; (800115c <eResetDataStorage+0x54>)
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fbba 	bl	80008c4 <eEEPROMWr>
	 return;
 8001150:	bf00      	nop
}
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000210 	.word	0x20000210
 800115c:	20000200 	.word	0x20000200

08001160 <vInitDescriptor>:

static void vInitDescriptor()
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
	uint8_t offset = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
	DataStorageDiscriptor.record_fields_count = 0U;
 800116a:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <vInitDescriptor+0x184>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
	DataStorageDiscriptor.register_count     = GET_REG(REGISTER_COUNT_ADDR);
 8001170:	4b5d      	ldr	r3, [pc, #372]	; (80012e8 <vInitDescriptor+0x188>)
 8001172:	78db      	ldrb	r3, [r3, #3]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	4b5b      	ldr	r3, [pc, #364]	; (80012e8 <vInitDescriptor+0x188>)
 800117a:	791b      	ldrb	r3, [r3, #4]
 800117c:	b21b      	sxth	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b21b      	sxth	r3, r3
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b57      	ldr	r3, [pc, #348]	; (80012e4 <vInitDescriptor+0x184>)
 8001186:	819a      	strh	r2, [r3, #12]
	DataStorageDiscriptor.token              = GET_SHORT(ACCESS_TOKEN_ADDR);
 8001188:	4b57      	ldr	r3, [pc, #348]	; (80012e8 <vInitDescriptor+0x188>)
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	4b55      	ldr	r3, [pc, #340]	; (80012e8 <vInitDescriptor+0x188>)
 8001192:	789b      	ldrb	r3, [r3, #2]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21b      	sxth	r3, r3
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b51      	ldr	r3, [pc, #324]	; (80012e4 <vInitDescriptor+0x184>)
 800119e:	805a      	strh	r2, [r3, #2]
	if ( datacash[RECORD_SIZE_ADDR ] !=0U )
 80011a0:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <vInitDescriptor+0x188>)
 80011a2:	7a5b      	ldrb	r3, [r3, #9]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 8082 	beq.w	80012ae <vInitDescriptor+0x14e>
	{

		DataStorageDiscriptor.record_pointer     = GET_REG(RECORD_POINTER_ADDR);
 80011aa:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <vInitDescriptor+0x188>)
 80011ac:	79db      	ldrb	r3, [r3, #7]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <vInitDescriptor+0x188>)
 80011b4:	7a1b      	ldrb	r3, [r3, #8]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	b29a      	uxth	r2, r3
 80011be:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <vInitDescriptor+0x184>)
 80011c0:	81da      	strh	r2, [r3, #14]
		DataStorageDiscriptor.record_count       = GET_REG(RECORD_COUNT_ADDR);
 80011c2:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <vInitDescriptor+0x188>)
 80011c4:	795b      	ldrb	r3, [r3, #5]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <vInitDescriptor+0x188>)
 80011cc:	799b      	ldrb	r3, [r3, #6]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b43      	ldr	r3, [pc, #268]	; (80012e4 <vInitDescriptor+0x184>)
 80011d8:	815a      	strh	r2, [r3, #10]
		DataStorageDiscriptor.recod_start_offset = GET_REG(REGISTER_COUNT_ADDR)*REGISTER_SIZE + REGISTER_OFFSET;
 80011da:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <vInitDescriptor+0x188>)
 80011dc:	78db      	ldrb	r3, [r3, #3]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	4a41      	ldr	r2, [pc, #260]	; (80012e8 <vInitDescriptor+0x188>)
 80011e2:	7912      	ldrb	r2, [r2, #4]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	330e      	adds	r3, #14
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <vInitDescriptor+0x184>)
 80011f6:	809a      	strh	r2, [r3, #4]
		DataStorageDiscriptor.record_byte_size = datacash[RECORD_SIZE_ADDR ];
 80011f8:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <vInitDescriptor+0x188>)
 80011fa:	7a5a      	ldrb	r2, [r3, #9]
 80011fc:	4b39      	ldr	r3, [pc, #228]	; (80012e4 <vInitDescriptor+0x184>)
 80011fe:	751a      	strb	r2, [r3, #20]
		DataStorageDiscriptor.max_record_count   = (EEPROM_MAX_ADRRES - DataStorageDiscriptor.recod_start_offset)/DataStorageDiscriptor.record_byte_size;
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <vInitDescriptor+0x184>)
 8001202:	889b      	ldrh	r3, [r3, #4]
 8001204:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001208:	3307      	adds	r3, #7
 800120a:	4a36      	ldr	r2, [pc, #216]	; (80012e4 <vInitDescriptor+0x184>)
 800120c:	7d12      	ldrb	r2, [r2, #20]
 800120e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <vInitDescriptor+0x184>)
 8001216:	80da      	strh	r2, [r3, #6]

		DataStorageDiscriptor.record_mask = datacash[RECORD_FORMAT_ADDR]
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <vInitDescriptor+0x188>)
 800121a:	7a9b      	ldrb	r3, [r3, #10]
 800121c:	461a      	mov	r2, r3
										|   datacash[RECORD_FORMAT_ADDR+SECOND_BYTE_ADDR]<<SECOND_BYTE_OFS
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <vInitDescriptor+0x188>)
 8001220:	7adb      	ldrb	r3, [r3, #11]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	431a      	orrs	r2, r3
										|   datacash[RECORD_FORMAT_ADDR+2]<<THRID_BYTE_OFS
 8001226:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <vInitDescriptor+0x188>)
 8001228:	7b1b      	ldrb	r3, [r3, #12]
 800122a:	041b      	lsls	r3, r3, #16
 800122c:	431a      	orrs	r2, r3
										|   datacash[RECORD_FORMAT_ADDR+FOURTH_BYTE_ADDR]<<FOURTH_BYTE_OFS;;
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <vInitDescriptor+0x188>)
 8001230:	7b5b      	ldrb	r3, [r3, #13]
 8001232:	061b      	lsls	r3, r3, #24
 8001234:	4313      	orrs	r3, r2
 8001236:	461a      	mov	r2, r3
		DataStorageDiscriptor.record_mask = datacash[RECORD_FORMAT_ADDR]
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <vInitDescriptor+0x184>)
 800123a:	611a      	str	r2, [r3, #16]
		uint32_t temp_data_format = DataStorageDiscriptor.record_mask;
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <vInitDescriptor+0x184>)
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	60bb      	str	r3, [r7, #8]
		if ((DataStorageDiscriptor.record_mask & DATA_TYPE_MASK) == 0 )
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <vInitDescriptor+0x184>)
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d107      	bne.n	800125e <vInitDescriptor+0xfe>
		{
			offset = 1;
 800124e:	2301      	movs	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
			DataStorageDiscriptor.record_fields_count = 1;
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <vInitDescriptor+0x184>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
			temp_data_format>>=2;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	60bb      	str	r3, [r7, #8]
		}
		for ( int i = offset; i < MAX_RECORD_SIZE ; i++)
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	e010      	b.n	8001286 <vInitDescriptor+0x126>
		{
			if ((temp_data_format & DATA_TYPE_MASK )!=0)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00f      	beq.n	800128e <vInitDescriptor+0x12e>
			{
				DataStorageDiscriptor.record_fields_count++;
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <vInitDescriptor+0x184>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <vInitDescriptor+0x184>)
 8001278:	701a      	strb	r2, [r3, #0]
				temp_data_format>>=2;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
		for ( int i = offset; i < MAX_RECORD_SIZE ; i++)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3301      	adds	r3, #1
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	ddeb      	ble.n	8001264 <vInitDescriptor+0x104>
 800128c:	e000      	b.n	8001290 <vInitDescriptor+0x130>
			}
			else
				break;
 800128e:	bf00      	nop
		}
		DataStorageDiscriptor.current_reccord_offset = DataStorageDiscriptor.recod_start_offset + DataStorageDiscriptor.record_byte_size * DataStorageDiscriptor.record_pointer;
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <vInitDescriptor+0x184>)
 8001292:	889a      	ldrh	r2, [r3, #4]
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <vInitDescriptor+0x184>)
 8001296:	7d1b      	ldrb	r3, [r3, #20]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4912      	ldr	r1, [pc, #72]	; (80012e4 <vInitDescriptor+0x184>)
 800129c:	89c9      	ldrh	r1, [r1, #14]
 800129e:	fb01 f303 	mul.w	r3, r1, r3
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4413      	add	r3, r2
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <vInitDescriptor+0x184>)
 80012aa:	811a      	strh	r2, [r3, #8]
		DataStorageDiscriptor.record_count = 0;
		DataStorageDiscriptor.record_pointer = 0;
		DataStorageDiscriptor.record_mask = 0;
		//eWriteNewDescriptor(DataStorageDiscriptor);
	}
}
 80012ac:	e014      	b.n	80012d8 <vInitDescriptor+0x178>
		DataStorageDiscriptor.current_reccord_offset = REGISTER_OFFSET;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <vInitDescriptor+0x184>)
 80012b0:	220e      	movs	r2, #14
 80012b2:	811a      	strh	r2, [r3, #8]
		DataStorageDiscriptor.recod_start_offset = 0;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <vInitDescriptor+0x184>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	809a      	strh	r2, [r3, #4]
		DataStorageDiscriptor.max_record_count   = 0;
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <vInitDescriptor+0x184>)
 80012bc:	2200      	movs	r2, #0
 80012be:	80da      	strh	r2, [r3, #6]
		DataStorageDiscriptor.record_fields_count = 0;
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <vInitDescriptor+0x184>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
		DataStorageDiscriptor.record_count = 0;
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <vInitDescriptor+0x184>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	815a      	strh	r2, [r3, #10]
		DataStorageDiscriptor.record_pointer = 0;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <vInitDescriptor+0x184>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	81da      	strh	r2, [r3, #14]
		DataStorageDiscriptor.record_mask = 0;
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <vInitDescriptor+0x184>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000210 	.word	0x20000210
 80012e8:	20000200 	.word	0x20000200

080012ec <vWriteDescriptorReg>:
	SET_LONG(RECORD_POINTER_ADDR, DataStorageDiscriptor.record_pointer);
#endif
}

static void vWriteDescriptorReg( uint8_t addr, EEPROM_ADRESS_TYPE data)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	4613      	mov	r3, r2
 80012fa:	80bb      	strh	r3, [r7, #4]
#if  ADDRESS_SIZE_BYTES == 2
	SET_SHORT( addr,  data);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	88ba      	ldrh	r2, [r7, #4]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f805 	bl	8001314 <SET_SHORT>
#else
	SET_LONG( addr,  data);

#endif
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <SET_SHORT>:

static void SET_SHORT( EEPROM_ADRESS_TYPE addr, uint16_t data)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	80fb      	strh	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	80bb      	strh	r3, [r7, #4]
	datacash[addr] =  data >> SECOND_BYTE_OFS;
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b29a      	uxth	r2, r3
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	b2d1      	uxtb	r1, r2
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <SET_SHORT+0x34>)
 8001330:	54d1      	strb	r1, [r2, r3]
	datacash[addr+1] = data & BYTE_MASK;
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	3301      	adds	r3, #1
 8001336:	88ba      	ldrh	r2, [r7, #4]
 8001338:	b2d1      	uxtb	r1, r2
 800133a:	4a03      	ldr	r2, [pc, #12]	; (8001348 <SET_SHORT+0x34>)
 800133c:	54d1      	strb	r1, [r2, r3]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000200 	.word	0x20000200

0800134c <vSetTimeToReg>:

/*
 * Функци записи данных даты и времени в нужны регистр
 */
static void vSetTimeToReg( uint8_t * Data, void * data)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	uint32_t date_time;
	date_time = (uint32_t)( ( (PDM_DATA_TIME*) data )->Second & SECOND_MASK);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800135e:	60fb      	str	r3, [r7, #12]
	date_time |= (uint32_t)( ( (PDM_DATA_TIME*) data)->Minute &  MINUTE_MASK ) << MINUTE_OFS ;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	785b      	ldrb	r3, [r3, #1]
 8001364:	019b      	lsls	r3, r3, #6
 8001366:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
	date_time |= (uint32_t)( ( (PDM_DATA_TIME*)data)->Hour & HOUR_MASK ) << HOUR_OFS ;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	789b      	ldrb	r3, [r3, #2]
 8001374:	031b      	lsls	r3, r3, #12
 8001376:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
	date_time |= (uint32_t)( ( (PDM_DATA_TIME*)data)->Year & YEAR_MASK ) << YEAR_OFS ;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	795b      	ldrb	r3, [r3, #5]
 8001384:	045b      	lsls	r3, r3, #17
 8001386:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
	date_time |= (uint32_t)( ( (PDM_DATA_TIME*)data)->Month & MONTH_MASK  ) << MONTH_OFS ;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	791b      	ldrb	r3, [r3, #4]
 8001394:	061b      	lsls	r3, r3, #24
 8001396:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
	date_time |= (uint32_t)( ( (PDM_DATA_TIME*)data)->Day & DAY_MASK_LSB) << DAY_OFS_LSB;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	071b      	lsls	r3, r3, #28
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
	Data[0U] = (TIME_STAMP  | ((( (PDM_DATA_TIME*)data)->Day & DAY_MASK_MSB) >> DAY_OFS_MSB ));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	78db      	ldrb	r3, [r3, #3]
 80013b0:	111b      	asrs	r3, r3, #4
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	701a      	strb	r2, [r3, #0]
	Data[1U] = (uint8_t)((date_time >> FOURTH_BYTE_OFS ) & BYTE_MASK );
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	0e1a      	lsrs	r2, r3, #24
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]
	Data[2U] = (uint8_t)((date_time >> THRID_BYTE_OFS) & BYTE_MASK );
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	0c1a      	lsrs	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3302      	adds	r3, #2
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]
	Data[THRID_BYTE_ADDR + 1U ] = (uint8_t)((date_time >> SECOND_BYTE_OFS) & BYTE_MASK );
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	0a1a      	lsrs	r2, r3, #8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3303      	adds	r3, #3
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]
	Data[FOURTH_BYTE_ADDR + 1U ] = (uint8_t)(date_time & BYTE_MASK );
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3304      	adds	r3, #4
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	701a      	strb	r2, [r3, #0]
 return;
 80013f4:	bf00      	nop
}
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
	...

08001400 <LAMPstart>:


static 	LAMP_FSM_SATE lamp_fsm = WAIT_FOR_INIT;

void LAMPstart(void *argument)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af02      	add	r7, sp, #8
 8001406:	6078      	str	r0, [r7, #4]
	EventGroupHandle_t system_event = NULL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
	uint8_t lamp_count = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	74fb      	strb	r3, [r7, #19]

	for(;;)
	{
		switch (lamp_fsm)
 8001410:	4b43      	ldr	r3, [pc, #268]	; (8001520 <LAMPstart+0x120>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d022      	beq.n	800145e <LAMPstart+0x5e>
 8001418:	2b02      	cmp	r3, #2
 800141a:	dc7c      	bgt.n	8001516 <LAMPstart+0x116>
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <LAMPstart+0x26>
 8001420:	2b01      	cmp	r3, #1
 8001422:	d013      	beq.n	800144c <LAMPstart+0x4c>
 8001424:	e077      	b.n	8001516 <LAMPstart+0x116>
		{
			case WAIT_FOR_INIT:
				system_event = xGetSystemUpdateEvent();
 8001426:	f000 f887 	bl	8001538 <xGetSystemUpdateEvent>
 800142a:	6178      	str	r0, [r7, #20]
				if (system_event !=NULL)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d06e      	beq.n	8001510 <LAMPstart+0x110>
				{
					xEventGroupWaitBits(system_event,   WORK_READY,  pdFALSE, pdTRUE, portMAX_DELAY );
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	2200      	movs	r2, #0
 800143c:	2108      	movs	r1, #8
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f007 fc20 	bl	8008c84 <xEventGroupWaitBits>
					lamp_fsm  = INIT;
 8001444:	4b36      	ldr	r3, [pc, #216]	; (8001520 <LAMPstart+0x120>)
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
				}
				break;
 800144a:	e061      	b.n	8001510 <LAMPstart+0x110>
			case INIT:
				lamp_count = uGetRegister(LAMP_REG);
 800144c:	202c      	movs	r0, #44	; 0x2c
 800144e:	f000 fd9f 	bl	8001f90 <uGetRegister>
 8001452:	4603      	mov	r3, r0
 8001454:	74fb      	strb	r3, [r7, #19]
				lamp_fsm   = WORK;
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <LAMPstart+0x120>)
 8001458:	2202      	movs	r2, #2
 800145a:	701a      	strb	r2, [r3, #0]
				break;
 800145c:	e05b      	b.n	8001516 <LAMPstart+0x116>
			case WORK:
				if (xEventGroupWaitBits(system_event, WORK_READY |  LAMP_REINIT, pdFALSE, pdTRUE, portMAX_DELAY ) & LAMP_REINIT )
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2301      	movs	r3, #1
 8001466:	2200      	movs	r2, #0
 8001468:	210a      	movs	r1, #10
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f007 fc0a 	bl	8008c84 <xEventGroupWaitBits>
 8001470:	4603      	mov	r3, r0
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <LAMPstart+0x82>
				{
					lamp_fsm = INIT;
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <LAMPstart+0x120>)
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
					if (error_count >=2 )
					{
						vSetRegisterBit(DEVICE_ALARM_REG, TWO_LAMP_ERROR, 1);
					}
				}
			break;
 8001480:	e048      	b.n	8001514 <LAMPstart+0x114>
					uint32_t error_lsb = uGetRegister(LAM_ERROR_REG_LSB);
 8001482:	202d      	movs	r0, #45	; 0x2d
 8001484:	f000 fd84 	bl	8001f90 <uGetRegister>
 8001488:	60f8      	str	r0, [r7, #12]
					uint32_t error_msb = uGetRegister(LAM_ERROR_REG_MSB);
 800148a:	202e      	movs	r0, #46	; 0x2e
 800148c:	f000 fd80 	bl	8001f90 <uGetRegister>
 8001490:	60b8      	str	r0, [r7, #8]
					uint8_t error_flag = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	74bb      	strb	r3, [r7, #18]
					uint8_t error_count = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	747b      	strb	r3, [r7, #17]
					for (uint8_t i = 0; i <  lamp_count; i++ )
 800149a:	2300      	movs	r3, #0
 800149c:	743b      	strb	r3, [r7, #16]
 800149e:	e022      	b.n	80014e6 <LAMPstart+0xe6>
							if (i < MAX_LAMP_COUNT/2 )
 80014a0:	7c3b      	ldrb	r3, [r7, #16]
 80014a2:	2b15      	cmp	r3, #21
 80014a4:	d808      	bhi.n	80014b8 <LAMPstart+0xb8>
								error_flag = (error_lsb >> i) & 0x01;
 80014a6:	7c3b      	ldrb	r3, [r7, #16]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	fa22 f303 	lsr.w	r3, r2, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	74bb      	strb	r3, [r7, #18]
 80014b6:	e007      	b.n	80014c8 <LAMPstart+0xc8>
								error_flag = (error_msb >> i) & 0x01;
 80014b8:	7c3b      	ldrb	r3, [r7, #16]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	74bb      	strb	r3, [r7, #18]
							if (!error_flag)
 80014c8:	7cbb      	ldrb	r3, [r7, #18]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d105      	bne.n	80014da <LAMPstart+0xda>
								 vIncRegister(LAMP1_REG + i,1);
 80014ce:	7c3b      	ldrb	r3, [r7, #16]
 80014d0:	2101      	movs	r1, #1
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fd72 	bl	8001fbc <vIncRegister>
 80014d8:	e002      	b.n	80014e0 <LAMPstart+0xe0>
								error_count++;
 80014da:	7c7b      	ldrb	r3, [r7, #17]
 80014dc:	3301      	adds	r3, #1
 80014de:	747b      	strb	r3, [r7, #17]
					for (uint8_t i = 0; i <  lamp_count; i++ )
 80014e0:	7c3b      	ldrb	r3, [r7, #16]
 80014e2:	3301      	adds	r3, #1
 80014e4:	743b      	strb	r3, [r7, #16]
 80014e6:	7c3a      	ldrb	r2, [r7, #16]
 80014e8:	7cfb      	ldrb	r3, [r7, #19]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d3d8      	bcc.n	80014a0 <LAMPstart+0xa0>
					if (error_count ==1 )
 80014ee:	7c7b      	ldrb	r3, [r7, #17]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d104      	bne.n	80014fe <LAMPstart+0xfe>
						vSetRegisterBit(DEVICE_ALARM_REG, ONE_LAMP_ERROR, 1);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2101      	movs	r1, #1
 80014f8:	202f      	movs	r0, #47	; 0x2f
 80014fa:	f000 fd15 	bl	8001f28 <vSetRegisterBit>
					if (error_count >=2 )
 80014fe:	7c7b      	ldrb	r3, [r7, #17]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d907      	bls.n	8001514 <LAMPstart+0x114>
						vSetRegisterBit(DEVICE_ALARM_REG, TWO_LAMP_ERROR, 1);
 8001504:	2201      	movs	r2, #1
 8001506:	2102      	movs	r1, #2
 8001508:	202f      	movs	r0, #47	; 0x2f
 800150a:	f000 fd0d 	bl	8001f28 <vSetRegisterBit>
			break;
 800150e:	e001      	b.n	8001514 <LAMPstart+0x114>
				break;
 8001510:	bf00      	nop
 8001512:	e000      	b.n	8001516 <LAMPstart+0x116>
			break;
 8001514:	bf00      	nop

		}
		vTaskDelay(1000);
 8001516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151a:	f008 fccb 	bl	8009eb4 <vTaskDelay>
		switch (lamp_fsm)
 800151e:	e777      	b.n	8001410 <LAMPstart+0x10>
 8001520:	20000228 	.word	0x20000228

08001524 <xGetOSEvent>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
EventGroupHandle_t xGetOSEvent()
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	return (xOSEventHandle);
 8001528:	4b02      	ldr	r3, [pc, #8]	; (8001534 <xGetOSEvent+0x10>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	20001504 	.word	0x20001504

08001538 <xGetSystemUpdateEvent>:
 EventGroupHandle_t xGetUARTEvent()
 {
	 return (xUARTEvnetHandle);
 }
 EventGroupHandle_t xGetSystemUpdateEvent()
 {
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	 return (SystemUpdateEventHandle);
 800153c:	4b02      	ldr	r3, [pc, #8]	; (8001548 <xGetSystemUpdateEvent+0x10>)
 800153e:	681b      	ldr	r3, [r3, #0]
 }
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	2000154c 	.word	0x2000154c

0800154c <vTimerInit>:
 {
 return (mbSemHandle);
 }*/

 void vTimerInit(uint16_t timeout)
 {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 	htim2.Init.Period = timeout;
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <vTimerInit+0x28>)
 800155a:	60d3      	str	r3, [r2, #12]
     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <vTimerInit+0x28>)
 800155e:	f004 ff7f 	bl	8006460 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <vTimerInit+0x20>
 	{
 	  Error_Handler();
 8001568:	f000 fc2d 	bl	8001dc6 <Error_Handler>
 	}

 }
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000390 	.word	0x20000390

08001578 <vStartTimer>:
 void vStartTimer()
 {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
 	HAL_TIM_Base_Stop_IT(&htim2);
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <vStartTimer+0x1c>)
 800157e:	f005 f81f 	bl	80065c0 <HAL_TIM_Base_Stop_IT>
 	htim2.Instance->CNT=0;
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <vStartTimer+0x1c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
 	HAL_TIM_Base_Start_IT(&htim2);
 800158a:	4802      	ldr	r0, [pc, #8]	; (8001594 <vStartTimer+0x1c>)
 800158c:	f004 ffb8 	bl	8006500 <HAL_TIM_Base_Start_IT>
 }
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000390 	.word	0x20000390

08001598 <vStopTimer>:
 void vStopTimer()
 {
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
 	HAL_TIM_Base_Stop_IT(&htim2);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <vStopTimer+0x10>)
 800159e:	f005 f80f 	bl	80065c0 <HAL_TIM_Base_Stop_IT>
 }
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000390 	.word	0x20000390

080015ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b0:	f001 f816 	bl	80025e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b4:	f000 f8b0 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b8:	f000 fb48 	bl	8001c4c <MX_GPIO_Init>
  MX_DMA_Init();
 80015bc:	f000 fb28 	bl	8001c10 <MX_DMA_Init>
  MX_TIM7_Init();
 80015c0:	f000 fac8 	bl	8001b54 <MX_TIM7_Init>
  MX_RTC_Init();
 80015c4:	f000 f9c4 	bl	8001950 <MX_RTC_Init>
  MX_ADC1_Init();
 80015c8:	f000 f908 	bl	80017dc <MX_ADC1_Init>
  MX_I2C1_Init();
 80015cc:	f000 f992 	bl	80018f4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80015d0:	f000 fa08 	bl	80019e4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80015d4:	f000 faf2 	bl	8001bbc <MX_USART1_UART_Init>
  MX_ADC3_Init();
 80015d8:	f000 f94e 	bl	8001878 <MX_ADC3_Init>
  MX_TIM6_Init();
 80015dc:	f000 fa86 	bl	8001aec <MX_TIM6_Init>
  MX_TIM2_Init();
 80015e0:	f000 fa38 	bl	8001a54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015e4:	f007 f93a 	bl	800885c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015e8:	4a2c      	ldr	r2, [pc, #176]	; (800169c <main+0xf0>)
 80015ea:	2100      	movs	r1, #0
 80015ec:	482c      	ldr	r0, [pc, #176]	; (80016a0 <main+0xf4>)
 80015ee:	f007 f99b 	bl	8008928 <osThreadNew>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a2b      	ldr	r2, [pc, #172]	; (80016a4 <main+0xf8>)
 80015f6:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(LCD_Task, NULL, &LCD_attributes);
 80015f8:	4a2b      	ldr	r2, [pc, #172]	; (80016a8 <main+0xfc>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	482b      	ldr	r0, [pc, #172]	; (80016ac <main+0x100>)
 80015fe:	f007 f993 	bl	8008928 <osThreadNew>
 8001602:	4603      	mov	r3, r0
 8001604:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <main+0x104>)
 8001606:	6013      	str	r3, [r2, #0]

  /* creation of DIN_DOUT_Task */
  DIN_DOUT_TaskHandle = osThreadNew(StartDIN_DOUT, NULL, &DIN_DOUT_Task_attributes);
 8001608:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <main+0x108>)
 800160a:	2100      	movs	r1, #0
 800160c:	482a      	ldr	r0, [pc, #168]	; (80016b8 <main+0x10c>)
 800160e:	f007 f98b 	bl	8008928 <osThreadNew>
 8001612:	4603      	mov	r3, r0
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <main+0x110>)
 8001616:	6013      	str	r3, [r2, #0]

  /* creation of KeyboardTask */
  KeyboardTaskHandle = osThreadNew(vKeyboardTask, NULL, &KeyboardTask_attributes);
 8001618:	4a29      	ldr	r2, [pc, #164]	; (80016c0 <main+0x114>)
 800161a:	2100      	movs	r1, #0
 800161c:	4829      	ldr	r0, [pc, #164]	; (80016c4 <main+0x118>)
 800161e:	f007 f983 	bl	8008928 <osThreadNew>
 8001622:	4603      	mov	r3, r0
 8001624:	4a28      	ldr	r2, [pc, #160]	; (80016c8 <main+0x11c>)
 8001626:	6013      	str	r3, [r2, #0]

  /* creation of LAP_task */
  LAP_taskHandle = osThreadNew(LAMPstart, NULL, &LAP_task_attributes);
 8001628:	4a28      	ldr	r2, [pc, #160]	; (80016cc <main+0x120>)
 800162a:	2100      	movs	r1, #0
 800162c:	4828      	ldr	r0, [pc, #160]	; (80016d0 <main+0x124>)
 800162e:	f007 f97b 	bl	8008928 <osThreadNew>
 8001632:	4603      	mov	r3, r0
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <main+0x128>)
 8001636:	6013      	str	r3, [r2, #0]

  /* creation of mbTask */
  mbTaskHandle = osThreadNew(StartMb, NULL, &mbTask_attributes);
 8001638:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <main+0x12c>)
 800163a:	2100      	movs	r1, #0
 800163c:	4827      	ldr	r0, [pc, #156]	; (80016dc <main+0x130>)
 800163e:	f007 f973 	bl	8008928 <osThreadNew>
 8001642:	4603      	mov	r3, r0
 8001644:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <main+0x134>)
 8001646:	6013      	str	r3, [r2, #0]

  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 8001648:	4a26      	ldr	r2, [pc, #152]	; (80016e4 <main+0x138>)
 800164a:	2100      	movs	r1, #0
 800164c:	4826      	ldr	r0, [pc, #152]	; (80016e8 <main+0x13c>)
 800164e:	f007 f96b 	bl	8008928 <osThreadNew>
 8001652:	4603      	mov	r3, r0
 8001654:	4a25      	ldr	r2, [pc, #148]	; (80016ec <main+0x140>)
 8001656:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of TimersEvent */
  TimersEventHandle = osEventFlagsNew(&TimersEvent_attributes);
 8001658:	4825      	ldr	r0, [pc, #148]	; (80016f0 <main+0x144>)
 800165a:	f007 fa3d 	bl	8008ad8 <osEventFlagsNew>
 800165e:	4603      	mov	r3, r0
 8001660:	4a24      	ldr	r2, [pc, #144]	; (80016f4 <main+0x148>)
 8001662:	6013      	str	r3, [r2, #0]

  /* creation of DIN_DOUT_EVENT */
  DIN_DOUT_EVENTHandle = osEventFlagsNew(&DIN_DOUT_EVENT_attributes);
 8001664:	4824      	ldr	r0, [pc, #144]	; (80016f8 <main+0x14c>)
 8001666:	f007 fa37 	bl	8008ad8 <osEventFlagsNew>
 800166a:	4603      	mov	r3, r0
 800166c:	4a23      	ldr	r2, [pc, #140]	; (80016fc <main+0x150>)
 800166e:	6013      	str	r3, [r2, #0]

  /* creation of xOSEvent */
  xOSEventHandle = osEventFlagsNew(&xOSEvent_attributes);
 8001670:	4823      	ldr	r0, [pc, #140]	; (8001700 <main+0x154>)
 8001672:	f007 fa31 	bl	8008ad8 <osEventFlagsNew>
 8001676:	4603      	mov	r3, r0
 8001678:	4a22      	ldr	r2, [pc, #136]	; (8001704 <main+0x158>)
 800167a:	6013      	str	r3, [r2, #0]

  /* creation of xUARTEvnet */
  xUARTEvnetHandle = osEventFlagsNew(&xUARTEvnet_attributes);
 800167c:	4822      	ldr	r0, [pc, #136]	; (8001708 <main+0x15c>)
 800167e:	f007 fa2b 	bl	8008ad8 <osEventFlagsNew>
 8001682:	4603      	mov	r3, r0
 8001684:	4a21      	ldr	r2, [pc, #132]	; (800170c <main+0x160>)
 8001686:	6013      	str	r3, [r2, #0]

  /* creation of SystemUpdateEvent */
  SystemUpdateEventHandle = osEventFlagsNew(&SystemUpdateEvent_attributes);
 8001688:	4821      	ldr	r0, [pc, #132]	; (8001710 <main+0x164>)
 800168a:	f007 fa25 	bl	8008ad8 <osEventFlagsNew>
 800168e:	4603      	mov	r3, r0
 8001690:	4a20      	ldr	r2, [pc, #128]	; (8001714 <main+0x168>)
 8001692:	6013      	str	r3, [r2, #0]
 // vSetTimersEnvet( TimersEventHandle);
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001694:	f007 f914 	bl	80088c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001698:	e7fe      	b.n	8001698 <main+0xec>
 800169a:	bf00      	nop
 800169c:	0800bbd8 	.word	0x0800bbd8
 80016a0:	08001db7 	.word	0x08001db7
 80016a4:	200004b0 	.word	0x200004b0
 80016a8:	0800bbfc 	.word	0x0800bbfc
 80016ac:	08000cc9 	.word	0x08000cc9
 80016b0:	200004b4 	.word	0x200004b4
 80016b4:	0800bc20 	.word	0x0800bc20
 80016b8:	0800053d 	.word	0x0800053d
 80016bc:	20000760 	.word	0x20000760
 80016c0:	0800bc44 	.word	0x0800bc44
 80016c4:	08000711 	.word	0x08000711
 80016c8:	20000a0c 	.word	0x20000a0c
 80016cc:	0800bc68 	.word	0x0800bc68
 80016d0:	08001401 	.word	0x08001401
 80016d4:	20000cb8 	.word	0x20000cb8
 80016d8:	0800bc8c 	.word	0x0800bc8c
 80016dc:	08001e59 	.word	0x08001e59
 80016e0:	20000f64 	.word	0x20000f64
 80016e4:	0800bcb0 	.word	0x0800bcb0
 80016e8:	08000ce1 	.word	0x08000ce1
 80016ec:	20001210 	.word	0x20001210
 80016f0:	0800bcd4 	.word	0x0800bcd4
 80016f4:	200014bc 	.word	0x200014bc
 80016f8:	0800bce4 	.word	0x0800bce4
 80016fc:	200014e0 	.word	0x200014e0
 8001700:	0800bcf4 	.word	0x0800bcf4
 8001704:	20001504 	.word	0x20001504
 8001708:	0800bd04 	.word	0x0800bd04
 800170c:	20001528 	.word	0x20001528
 8001710:	0800bd14 	.word	0x0800bd14
 8001714:	2000154c 	.word	0x2000154c

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b096      	sub	sp, #88	; 0x58
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001722:	2228      	movs	r2, #40	; 0x28
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f00a f8e8 	bl	800b8fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800174c:	2305      	movs	r3, #5
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800175a:	2301      	movs	r3, #1
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175e:	2301      	movs	r3, #1
 8001760:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001762:	2302      	movs	r3, #2
 8001764:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800176c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001770:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001776:	4618      	mov	r0, r3
 8001778:	f003 f8a2 	bl	80048c0 <HAL_RCC_OscConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001782:	f000 fb20 	bl	8001dc6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001786:	230f      	movs	r3, #15
 8001788:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178a:	2302      	movs	r3, #2
 800178c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	2102      	movs	r1, #2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fb0e 	bl	8004dc4 <HAL_RCC_ClockConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017ae:	f000 fb0a 	bl	8001dc6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80017b2:	2303      	movs	r3, #3
 80017b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80017bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fcbb 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80017d0:	f000 faf9 	bl	8001dc6 <Error_Handler>
  }
}
 80017d4:	bf00      	nop
 80017d6:	3758      	adds	r7, #88	; 0x58
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017ec:	4b20      	ldr	r3, [pc, #128]	; (8001870 <MX_ADC1_Init+0x94>)
 80017ee:	4a21      	ldr	r2, [pc, #132]	; (8001874 <MX_ADC1_Init+0x98>)
 80017f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <MX_ADC1_Init+0x94>)
 80017f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <MX_ADC1_Init+0x94>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <MX_ADC1_Init+0x94>)
 8001802:	2200      	movs	r2, #0
 8001804:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <MX_ADC1_Init+0x94>)
 8001808:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800180c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <MX_ADC1_Init+0x94>)
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <MX_ADC1_Init+0x94>)
 8001816:	2202      	movs	r2, #2
 8001818:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800181a:	4815      	ldr	r0, [pc, #84]	; (8001870 <MX_ADC1_Init+0x94>)
 800181c:	f000 ff00 	bl	8002620 <HAL_ADC_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001826:	f000 face 	bl	8001dc6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800182e:	2301      	movs	r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_ADC1_Init+0x94>)
 800183c:	f000 ffda 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001846:	f000 fabe 	bl	8001dc6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800184a:	2301      	movs	r3, #1
 800184c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800184e:	2302      	movs	r3, #2
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <MX_ADC1_Init+0x94>)
 8001858:	f000 ffcc 	bl	80027f4 <HAL_ADC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001862:	f000 fab0 	bl	8001dc6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000022c 	.word	0x2000022c
 8001874:	40012400 	.word	0x40012400

08001878 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_ADC3_Init+0x74>)
 800188a:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <MX_ADC3_Init+0x78>)
 800188c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_ADC3_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <MX_ADC3_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_ADC3_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_ADC3_Init+0x74>)
 80018a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018a6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_ADC3_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_ADC3_Init+0x74>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <MX_ADC3_Init+0x74>)
 80018b6:	f000 feb3 	bl	8002620 <HAL_ADC_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 80018c0:	f000 fa81 	bl	8001dc6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018c4:	2303      	movs	r3, #3
 80018c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_ADC3_Init+0x74>)
 80018d6:	f000 ff8d 	bl	80027f4 <HAL_ADC_ConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 80018e0:	f000 fa71 	bl	8001dc6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000025c 	.word	0x2000025c
 80018f0:	40013c00 	.word	0x40013c00

080018f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <MX_I2C1_Init+0x50>)
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <MX_I2C1_Init+0x54>)
 80018fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_I2C1_Init+0x50>)
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <MX_I2C1_Init+0x58>)
 8001902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_I2C1_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_I2C1_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_I2C1_Init+0x50>)
 8001912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001916:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_I2C1_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_I2C1_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_I2C1_Init+0x50>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_I2C1_Init+0x50>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_I2C1_Init+0x50>)
 8001932:	f001 ff85 	bl	8003840 <HAL_I2C_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800193c:	f000 fa43 	bl	8001dc6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200002d0 	.word	0x200002d0
 8001948:	40005400 	.word	0x40005400
 800194c:	00061a80 	.word	0x00061a80

08001950 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	2100      	movs	r1, #0
 800195a:	460a      	mov	r2, r1
 800195c:	801a      	strh	r2, [r3, #0]
 800195e:	460a      	mov	r2, r1
 8001960:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_RTC_Init+0x8c>)
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <MX_RTC_Init+0x90>)
 800196a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_RTC_Init+0x8c>)
 800196e:	f04f 32ff 	mov.w	r2, #4294967295
 8001972:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <MX_RTC_Init+0x8c>)
 8001976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800197c:	4817      	ldr	r0, [pc, #92]	; (80019dc <MX_RTC_Init+0x8c>)
 800197e:	f003 fd6d 	bl	800545c <HAL_RTC_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001988:	f000 fa1d 	bl	8001dc6 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800198c:	2300      	movs	r3, #0
 800198e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001990:	2300      	movs	r3, #0
 8001992:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001994:	2300      	movs	r3, #0
 8001996:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2201      	movs	r2, #1
 800199c:	4619      	mov	r1, r3
 800199e:	480f      	ldr	r0, [pc, #60]	; (80019dc <MX_RTC_Init+0x8c>)
 80019a0:	f003 fde8 	bl	8005574 <HAL_RTC_SetTime>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80019aa:	f000 fa0c 	bl	8001dc6 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019ae:	2301      	movs	r3, #1
 80019b0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80019b2:	2301      	movs	r3, #1
 80019b4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80019be:	463b      	mov	r3, r7
 80019c0:	2201      	movs	r2, #1
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_RTC_Init+0x8c>)
 80019c6:	f003 fe6d 	bl	80056a4 <HAL_RTC_SetDate>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80019d0:	f000 f9f9 	bl	8001dc6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000324 	.word	0x20000324
 80019e0:	40002800 	.word	0x40002800

080019e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_SPI2_Init+0x68>)
 80019ea:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <MX_SPI2_Init+0x6c>)
 80019ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <MX_SPI2_Init+0x68>)
 80019f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_SPI2_Init+0x68>)
 80019f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_SPI2_Init+0x68>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_SPI2_Init+0x68>)
 8001a06:	2202      	movs	r2, #2
 8001a08:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MX_SPI2_Init+0x68>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_SPI2_Init+0x68>)
 8001a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a16:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_SPI2_Init+0x68>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_SPI2_Init+0x68>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_SPI2_Init+0x68>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_SPI2_Init+0x68>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_SPI2_Init+0x68>)
 8001a32:	220a      	movs	r2, #10
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_SPI2_Init+0x68>)
 8001a38:	f004 f8dd 	bl	8005bf6 <HAL_SPI_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001a42:	f000 f9c0 	bl	8001dc6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000338 	.word	0x20000338
 8001a50:	40003800 	.word	0x40003800

08001a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <MX_TIM2_Init+0x94>)
 8001a72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <MX_TIM2_Init+0x94>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <MX_TIM2_Init+0x94>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <MX_TIM2_Init+0x94>)
 8001a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_TIM2_Init+0x94>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <MX_TIM2_Init+0x94>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a98:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <MX_TIM2_Init+0x94>)
 8001a9a:	f004 fce1 	bl	8006460 <HAL_TIM_Base_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001aa4:	f000 f98f 	bl	8001dc6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <MX_TIM2_Init+0x94>)
 8001ab6:	f004 feb9 	bl	800682c <HAL_TIM_ConfigClockSource>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ac0:	f000 f981 	bl	8001dc6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001acc:	463b      	mov	r3, r7
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_TIM2_Init+0x94>)
 8001ad2:	f005 f8a7 	bl	8006c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001adc:	f000 f973 	bl	8001dc6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000390 	.word	0x20000390

08001aec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af2:	463b      	mov	r3, r7
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_TIM6_Init+0x60>)
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <MX_TIM6_Init+0x64>)
 8001afe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_TIM6_Init+0x60>)
 8001b02:	2248      	movs	r2, #72	; 0x48
 8001b04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_TIM6_Init+0x60>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_TIM6_Init+0x60>)
 8001b0e:	2264      	movs	r2, #100	; 0x64
 8001b10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_TIM6_Init+0x60>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <MX_TIM6_Init+0x60>)
 8001b1a:	f004 fca1 	bl	8006460 <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001b24:	f000 f94f 	bl	8001dc6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b30:	463b      	mov	r3, r7
 8001b32:	4619      	mov	r1, r3
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_TIM6_Init+0x60>)
 8001b36:	f005 f875 	bl	8006c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001b40:	f000 f941 	bl	8001dc6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200003d8 	.word	0x200003d8
 8001b50:	40001000 	.word	0x40001000

08001b54 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <MX_TIM7_Init+0x60>)
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <MX_TIM7_Init+0x64>)
 8001b66:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72;
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <MX_TIM7_Init+0x60>)
 8001b6a:	2248      	movs	r2, #72	; 0x48
 8001b6c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_TIM7_Init+0x60>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 40;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_TIM7_Init+0x60>)
 8001b76:	2228      	movs	r2, #40	; 0x28
 8001b78:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_TIM7_Init+0x60>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <MX_TIM7_Init+0x60>)
 8001b82:	f004 fc6d 	bl	8006460 <HAL_TIM_Base_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8001b8c:	f000 f91b 	bl	8001dc6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_TIM7_Init+0x60>)
 8001b9e:	f005 f841 	bl	8006c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8001ba8:	f000 f90d 	bl	8001dc6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000420 	.word	0x20000420
 8001bb8:	40001400 	.word	0x40001400

08001bbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <MX_USART1_UART_Init+0x50>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bf4:	f005 f894 	bl	8006d20 <HAL_UART_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bfe:	f000 f8e2 	bl	8001dc6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000468 	.word	0x20000468
 8001c0c:	40013800 	.word	0x40013800

08001c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_DMA_Init+0x38>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <MX_DMA_Init+0x38>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	6153      	str	r3, [r2, #20]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_DMA_Init+0x38>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 5, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2105      	movs	r1, #5
 8001c32:	203b      	movs	r0, #59	; 0x3b
 8001c34:	f000 ffcd 	bl	8002bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8001c38:	203b      	movs	r0, #59	; 0x3b
 8001c3a:	f000 ffe6 	bl	8002c0a <HAL_NVIC_EnableIRQ>

}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000

08001c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001c66:	f043 0310 	orr.w	r3, r3, #16
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c78:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a45      	ldr	r2, [pc, #276]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001c7e:	f043 0320 	orr.w	r3, r3, #32
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a3f      	ldr	r2, [pc, #252]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca8:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	4a39      	ldr	r2, [pc, #228]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001cae:	f043 0308 	orr.w	r3, r3, #8
 8001cb2:	6193      	str	r3, [r2, #24]
 8001cb4:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <MX_GPIO_Init+0x148>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Fire_alarm_Pin|local_Pin|remote_Pin|IND_E_Pin
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8001cc6:	4834      	ldr	r0, [pc, #208]	; (8001d98 <MX_GPIO_Init+0x14c>)
 8001cc8:	f001 fda1 	bl	800380e <HAL_GPIO_WritePin>
                          |Ind_R_nW_Pin|POW_OUT1_Pin|POW_OUT2_Pin|Relay_Work_Pin
                          |Relay_Crash_Pin|LedR_FBO_accident_Pin|LedY_Local_Control_Pin|LedG_FBO_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_0_Pin|LCD_1_Pin|LCD_2_Pin|LampNPL_Pin
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8001cd2:	4832      	ldr	r0, [pc, #200]	; (8001d9c <MX_GPIO_Init+0x150>)
 8001cd4:	f001 fd9b 	bl	800380e <HAL_GPIO_WritePin>
                          |LCD_3_Pin|LCD_4_Pin|LCD_5_Pin|LCD_6_Pin
                          |LCD_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN485_GPIO_Port, EN485_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cde:	4830      	ldr	r0, [pc, #192]	; (8001da0 <MX_GPIO_Init+0x154>)
 8001ce0:	f001 fd95 	bl	800380e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nDOOR_sens_Pin nRemote_activatio_Pin */
  GPIO_InitStruct.Pin = nDOOR_sens_Pin|nRemote_activatio_Pin;
 8001ce4:	f242 0301 	movw	r3, #8193	; 0x2001
 8001ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4827      	ldr	r0, [pc, #156]	; (8001d98 <MX_GPIO_Init+0x14c>)
 8001cfa:	f001 fbdd 	bl	80034b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Fire_alarm_Pin local_Pin remote_Pin IND_E_Pin
                           Ind_R_nW_Pin POW_OUT1_Pin POW_OUT2_Pin Relay_Work_Pin
                           Relay_Crash_Pin LedR_FBO_accident_Pin LedY_Local_Control_Pin LedG_FBO_ON_Pin */
  GPIO_InitStruct.Pin = Fire_alarm_Pin|local_Pin|remote_Pin|IND_E_Pin
 8001cfe:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001d02:	613b      	str	r3, [r7, #16]
                          |Ind_R_nW_Pin|POW_OUT1_Pin|POW_OUT2_Pin|Relay_Work_Pin
                          |Relay_Crash_Pin|LedR_FBO_accident_Pin|LedY_Local_Control_Pin|LedG_FBO_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	4619      	mov	r1, r3
 8001d16:	4820      	ldr	r0, [pc, #128]	; (8001d98 <MX_GPIO_Init+0x14c>)
 8001d18:	f001 fbce 	bl	80034b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KL1_Pin KL2_Pin KL3_Pin KL4_Pin */
  GPIO_InitStruct.Pin = KL1_Pin|KL2_Pin|KL3_Pin|KL4_Pin;
 8001d1c:	23f0      	movs	r3, #240	; 0xf0
 8001d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481c      	ldr	r0, [pc, #112]	; (8001da0 <MX_GPIO_Init+0x154>)
 8001d30:	f001 fbc2 	bl	80034b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_0_Pin LCD_1_Pin LCD_2_Pin LampNPL_Pin
                           LCD_3_Pin LCD_4_Pin LCD_5_Pin LCD_6_Pin
                           LCD_7_Pin */
  GPIO_InitStruct.Pin = LCD_0_Pin|LCD_1_Pin|LCD_2_Pin|LampNPL_Pin
 8001d34:	f241 03ff 	movw	r3, #4351	; 0x10ff
 8001d38:	613b      	str	r3, [r7, #16]
                          |LCD_3_Pin|LCD_4_Pin|LCD_5_Pin|LCD_6_Pin
                          |LCD_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4813      	ldr	r0, [pc, #76]	; (8001d9c <MX_GPIO_Init+0x150>)
 8001d4e:	f001 fbb3 	bl	80034b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ind_RS_Pin Ind_LED_Pin */
  GPIO_InitStruct.Pin = Ind_RS_Pin|Ind_LED_Pin;
 8001d52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4619      	mov	r1, r3
 8001d66:	480d      	ldr	r0, [pc, #52]	; (8001d9c <MX_GPIO_Init+0x150>)
 8001d68:	f001 fba6 	bl	80034b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN485_Pin */
  GPIO_InitStruct.Pin = EN485_Pin;
 8001d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN485_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4619      	mov	r1, r3
 8001d84:	4806      	ldr	r0, [pc, #24]	; (8001da0 <MX_GPIO_Init+0x154>)
 8001d86:	f001 fb97 	bl	80034b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d8a:	bf00      	nop
 8001d8c:	3720      	adds	r7, #32
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40011000 	.word	0x40011000
 8001d9c:	40010c00 	.word	0x40010c00
 8001da0:	40010800 	.word	0x40010800

08001da4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 if (htim->Instance == TIM7)
 {
	// vTimeExpire();
 }
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f006 fe5c 	bl	8008a7c <osDelay>
 8001dc4:	e7fb      	b.n	8001dbe <StartDefaultTask+0x8>

08001dc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dca:	b672      	cpsid	i
}
 8001dcc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dce:	e7fe      	b.n	8001dce <Error_Handler+0x8>

08001dd0 <usGetRegInput>:
#include "mb.h"

uint16_t input_regs[REG_COUNT];
uint16_t system_regs[REG_COUNT ];
uint16_t usGetRegInput( REGS_t reg_addr)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
	uint16_t usRes;
    usRes = input_regs[reg_addr];
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <usGetRegInput+0x20>)
 8001dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001de2:	81fb      	strh	r3, [r7, #14]
	return  (usRes);
 8001de4:	89fb      	ldrh	r3, [r7, #14]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20001570 	.word	0x20001570

08001df4 <vUPDATECoils>:
void vUPDATECoils( uint8_t rw)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]

}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <vSetReg>:
void vSetReg(REGS_t reg_addr, uint16_t data)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460a      	mov	r2, r1
 8001e12:	71fb      	strb	r3, [r7, #7]
 8001e14:	4613      	mov	r3, r2
 8001e16:	80bb      	strh	r3, [r7, #4]
			  if (reg_addr == MODE)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
				  if (system_regs[reg_addr] != data)
				  {
					//  mode_restart = 1;
				  }
			  }
			  system_regs[reg_addr] = data;
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	4904      	ldr	r1, [pc, #16]	; (8001e30 <vSetReg+0x28>)
 8001e20:	88ba      	ldrh	r2, [r7, #4]
 8001e22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	20001584 	.word	0x20001584

08001e34 <usGetReg>:

uint16_t usGetReg( REGS_t reg_addr)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]

     if (reg_addr == MODE)
	 {
			//connection = 1;
		}
		usRes = system_regs[reg_addr];
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <usGetReg+0x20>)
 8001e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e46:	81fb      	strh	r3, [r7, #14]

	return  (usRes);
 8001e48:	89fb      	ldrh	r3, [r7, #14]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	20001584 	.word	0x20001584

08001e58 <StartMb>:


void StartMb(void *argument)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	6078      	str	r0, [r7, #4]


	 uint16_t addres = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	81fb      	strh	r3, [r7, #14]
	// addres = (uiGetDinMask() & DEVICE_ADDR_MASK)>>DEVICE_ADDR_OFFSET;
	 eMBInit(MB_RTU,addres,0,19200,MB_PAR_ODD );
 8001e64:	89fb      	ldrh	r3, [r7, #14]
 8001e66:	b2d9      	uxtb	r1, r3
 8001e68:	2301      	movs	r3, #1
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8001e70:	2200      	movs	r2, #0
 8001e72:	2000      	movs	r0, #0
 8001e74:	f005 f998 	bl	80071a8 <eMBInit>
	 eMBEnable(  );
 8001e78:	f005 fa14 	bl	80072a4 <eMBEnable>
     while (1)
     {
		 eMBPoll();
 8001e7c:	f005 fa2e 	bl	80072dc <eMBPoll>

		 vTaskDelay(10);
 8001e80:	200a      	movs	r0, #10
 8001e82:	f008 f817 	bl	8009eb4 <vTaskDelay>
		 eMBPoll();
 8001e86:	e7f9      	b.n	8001e7c <StartMb+0x24>

08001e88 <vInitRegister>:
#include "datastorage.h"

static uint32_t REGISTER[REGISTER_COUNT];

void vInitRegister()
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
	REGISTE_DATA_TYPE_t data_type;
	//Во первых инициализируем блок данных
	 uint8_t record_format[2]={RECORD_TIME_STAMP,RECORD_BYTE};
 8001e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e92:	80bb      	strh	r3, [r7, #4]
	 eCreateDataStorage(FLASH_REGISTER_COUNT,record_format,2);
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2202      	movs	r2, #2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	202c      	movs	r0, #44	; 0x2c
 8001e9c:	f7fe ff7e 	bl	8000d9c <eCreateDataStorage>
	 for (uint8_t i= 0; i< FLASH_REGISTER_COUNT;i++ )
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	71fb      	strb	r3, [r7, #7]
 8001ea4:	e020      	b.n	8001ee8 <vInitRegister+0x60>
	 {
		data_type = eEEPROMReadRegister(FIRST_EEPROM_REG_ADDR + i, &REGISTER[FIRST_REGISTER_ADDR + i]);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4912      	ldr	r1, [pc, #72]	; (8001ef8 <vInitRegister+0x70>)
 8001eb0:	440b      	add	r3, r1
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f7ff f8b9 	bl	800102c <eEEPROMReadRegister>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71bb      	strb	r3, [r7, #6]
		if (data_type!= INTEGER_DATA)
 8001ebe:	79bb      	ldrb	r3, [r7, #6]
 8001ec0:	2b40      	cmp	r3, #64	; 0x40
 8001ec2:	d00e      	beq.n	8001ee2 <vInitRegister+0x5a>
		{
			 REGISTER[FIRST_REGISTER_ADDR + i] = 0;
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <vInitRegister+0x70>)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 eEEPROMRegTypeWrite(FIRST_EEPROM_REG_ADDR + i,&REGISTER[FIRST_REGISTER_ADDR + i], INTEGER_DATA);
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	b298      	uxth	r0, r3
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <vInitRegister+0x70>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7ff f84f 	bl	8000f80 <eEEPROMRegTypeWrite>
	 for (uint8_t i= 0; i< FLASH_REGISTER_COUNT;i++ )
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	2b2b      	cmp	r3, #43	; 0x2b
 8001eec:	d9db      	bls.n	8001ea6 <vInitRegister+0x1e>
		}
	 }
}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20001598 	.word	0x20001598

08001efc <vSetRegister>:

void vSetRegister(uint8_t addres, uint32_t data)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
	if ( addres < REGISTER_COUNT )
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	2b30      	cmp	r3, #48	; 0x30
 8001f0c:	d804      	bhi.n	8001f18 <vSetRegister+0x1c>
	{
		REGISTER[addres] = data;
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	4904      	ldr	r1, [pc, #16]	; (8001f24 <vSetRegister+0x28>)
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20001598 	.word	0x20001598

08001f28 <vSetRegisterBit>:
void vSetRegisterBit(uint8_t addres, uint8_t bits, uint8_t data)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
 8001f32:	460b      	mov	r3, r1
 8001f34:	71bb      	strb	r3, [r7, #6]
 8001f36:	4613      	mov	r3, r2
 8001f38:	717b      	strb	r3, [r7, #5]
	if ( addres < REGISTER_COUNT )
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b30      	cmp	r3, #48	; 0x30
 8001f3e:	d820      	bhi.n	8001f82 <vSetRegisterBit+0x5a>
	{
		if (data != 0)
 8001f40:	797b      	ldrb	r3, [r7, #5]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00e      	beq.n	8001f64 <vSetRegisterBit+0x3c>
			REGISTER[addres] |= 0x1 << bits;
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <vSetRegisterBit+0x64>)
 8001f4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	4619      	mov	r1, r3
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	490b      	ldr	r1, [pc, #44]	; (8001f8c <vSetRegisterBit+0x64>)
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		else
			REGISTER[addres] &= ~(0x1 << bits);
	}
}
 8001f62:	e00e      	b.n	8001f82 <vSetRegisterBit+0x5a>
			REGISTER[addres] &= ~(0x1 << bits);
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <vSetRegisterBit+0x64>)
 8001f68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f6c:	79bb      	ldrb	r3, [r7, #6]
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	4903      	ldr	r1, [pc, #12]	; (8001f8c <vSetRegisterBit+0x64>)
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	20001598 	.word	0x20001598

08001f90 <uGetRegister>:

uint32_t uGetRegister(uint8_t addres)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
	return  (( addres < REGISTER_COUNT ) ? REGISTER[addres] : 0);
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	2b30      	cmp	r3, #48	; 0x30
 8001f9e:	d804      	bhi.n	8001faa <uGetRegister+0x1a>
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <uGetRegister+0x28>)
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	e000      	b.n	8001fac <uGetRegister+0x1c>
 8001faa:	2300      	movs	r3, #0

}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20001598 	.word	0x20001598

08001fbc <vIncRegister>:
void vDecRegister(uint8_t addres, uint32_t step)
{

}
void vIncRegister(uint8_t addres, uint32_t step)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]

}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_MspInit+0x68>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_MspInit+0x68>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6193      	str	r3, [r2, #24]
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_MspInit+0x68>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_MspInit+0x68>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_MspInit+0x68>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_MspInit+0x68>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	210f      	movs	r1, #15
 800200e:	f06f 0001 	mvn.w	r0, #1
 8002012:	f000 fdde 	bl	8002bd2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_MspInit+0x6c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_MspInit+0x6c>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000

08002044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0318 	add.w	r3, r7, #24
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a3c      	ldr	r2, [pc, #240]	; (8002150 <HAL_ADC_MspInit+0x10c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d122      	bne.n	80020aa <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002064:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <HAL_ADC_MspInit+0x110>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <HAL_ADC_MspInit+0x110>)
 800206a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b38      	ldr	r3, [pc, #224]	; (8002154 <HAL_ADC_MspInit+0x110>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b35      	ldr	r3, [pc, #212]	; (8002154 <HAL_ADC_MspInit+0x110>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a34      	ldr	r2, [pc, #208]	; (8002154 <HAL_ADC_MspInit+0x110>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b32      	ldr	r3, [pc, #200]	; (8002154 <HAL_ADC_MspInit+0x110>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002094:	2307      	movs	r3, #7
 8002096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002098:	2303      	movs	r3, #3
 800209a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0318 	add.w	r3, r7, #24
 80020a0:	4619      	mov	r1, r3
 80020a2:	482d      	ldr	r0, [pc, #180]	; (8002158 <HAL_ADC_MspInit+0x114>)
 80020a4:	f001 fa08 	bl	80034b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020a8:	e04e      	b.n	8002148 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC3)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a2b      	ldr	r2, [pc, #172]	; (800215c <HAL_ADC_MspInit+0x118>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d149      	bne.n	8002148 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_ADC_MspInit+0x110>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a26      	ldr	r2, [pc, #152]	; (8002154 <HAL_ADC_MspInit+0x110>)
 80020ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_ADC_MspInit+0x110>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020cc:	4b21      	ldr	r3, [pc, #132]	; (8002154 <HAL_ADC_MspInit+0x110>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a20      	ldr	r2, [pc, #128]	; (8002154 <HAL_ADC_MspInit+0x110>)
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_ADC_MspInit+0x110>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020e4:	2308      	movs	r3, #8
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e8:	2303      	movs	r3, #3
 80020ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 0318 	add.w	r3, r7, #24
 80020f0:	4619      	mov	r1, r3
 80020f2:	4819      	ldr	r0, [pc, #100]	; (8002158 <HAL_ADC_MspInit+0x114>)
 80020f4:	f001 f9e0 	bl	80034b8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 80020fa:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <HAL_ADC_MspInit+0x120>)
 80020fc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 8002100:	2200      	movs	r2, #0
 8002102:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 8002112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002116:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 800211a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800211e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 8002128:	2200      	movs	r2, #0
 800212a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800212c:	480c      	ldr	r0, [pc, #48]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 800212e:	f000 fd7b 	bl	8002c28 <HAL_DMA_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_ADC_MspInit+0xf8>
      Error_Handler();
 8002138:	f7ff fe45 	bl	8001dc6 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 8002140:	621a      	str	r2, [r3, #32]
 8002142:	4a07      	ldr	r2, [pc, #28]	; (8002160 <HAL_ADC_MspInit+0x11c>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002148:	bf00      	nop
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40012400 	.word	0x40012400
 8002154:	40021000 	.word	0x40021000
 8002158:	40010800 	.word	0x40010800
 800215c:	40013c00 	.word	0x40013c00
 8002160:	2000028c 	.word	0x2000028c
 8002164:	40020458 	.word	0x40020458

08002168 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_I2C_MspInit+0x90>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d132      	bne.n	80021ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <HAL_I2C_MspInit+0x94>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_I2C_MspInit+0x94>)
 800218e:	f043 0308 	orr.w	r3, r3, #8
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_I2C_MspInit+0x94>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a6:	2312      	movs	r3, #18
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	4812      	ldr	r0, [pc, #72]	; (8002200 <HAL_I2C_MspInit+0x98>)
 80021b6:	f001 f97f 	bl	80034b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_I2C_MspInit+0x9c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <HAL_I2C_MspInit+0x9c>)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_I2C_MspInit+0x94>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <HAL_I2C_MspInit+0x94>)
 80021dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_I2C_MspInit+0x94>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021ee:	bf00      	nop
 80021f0:	3728      	adds	r7, #40	; 0x28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40005400 	.word	0x40005400
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010c00 	.word	0x40010c00
 8002204:	40010000 	.word	0x40010000

08002208 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <HAL_RTC_MspInit+0x4c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d118      	bne.n	800224c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800221a:	f002 fb45 	bl	80048a8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <HAL_RTC_MspInit+0x50>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a0d      	ldr	r2, [pc, #52]	; (8002258 <HAL_RTC_MspInit+0x50>)
 8002224:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RTC_MspInit+0x50>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_RTC_MspInit+0x54>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2105      	movs	r1, #5
 8002240:	2003      	movs	r0, #3
 8002242:	f000 fcc6 	bl	8002bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002246:	2003      	movs	r0, #3
 8002248:	f000 fcdf 	bl	8002c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40002800 	.word	0x40002800
 8002258:	40021000 	.word	0x40021000
 800225c:	4242043c 	.word	0x4242043c

08002260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <HAL_SPI_MspInit+0x8c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d131      	bne.n	80022e4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_SPI_MspInit+0x90>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	4a1a      	ldr	r2, [pc, #104]	; (80022f0 <HAL_SPI_MspInit+0x90>)
 8002286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228a:	61d3      	str	r3, [r2, #28]
 800228c:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <HAL_SPI_MspInit+0x90>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_SPI_MspInit+0x90>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_SPI_MspInit+0x90>)
 800229e:	f043 0308 	orr.w	r3, r3, #8
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_SPI_MspInit+0x90>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	4619      	mov	r1, r3
 80022c4:	480b      	ldr	r0, [pc, #44]	; (80022f4 <HAL_SPI_MspInit+0x94>)
 80022c6:	f001 f8f7 	bl	80034b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	4619      	mov	r1, r3
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <HAL_SPI_MspInit+0x94>)
 80022e0:	f001 f8ea 	bl	80034b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022e4:	bf00      	nop
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40003800 	.word	0x40003800
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010c00 	.word	0x40010c00

080022f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002308:	d10c      	bne.n	8002324 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_TIM_Base_MspInit+0x8c>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_TIM_Base_MspInit+0x8c>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_TIM_Base_MspInit+0x8c>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002322:	e02a      	b.n	800237a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_TIM_Base_MspInit+0x90>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10c      	bne.n	8002348 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_TIM_Base_MspInit+0x8c>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_TIM_Base_MspInit+0x8c>)
 8002334:	f043 0310 	orr.w	r3, r3, #16
 8002338:	61d3      	str	r3, [r2, #28]
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_TIM_Base_MspInit+0x8c>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
}
 8002346:	e018      	b.n	800237a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0f      	ldr	r2, [pc, #60]	; (800238c <HAL_TIM_Base_MspInit+0x94>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d113      	bne.n	800237a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_TIM_Base_MspInit+0x8c>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <HAL_TIM_Base_MspInit+0x8c>)
 8002358:	f043 0320 	orr.w	r3, r3, #32
 800235c:	61d3      	str	r3, [r2, #28]
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_TIM_Base_MspInit+0x8c>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2105      	movs	r1, #5
 800236e:	2037      	movs	r0, #55	; 0x37
 8002370:	f000 fc2f 	bl	8002bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002374:	2037      	movs	r0, #55	; 0x37
 8002376:	f000 fc48 	bl	8002c0a <HAL_NVIC_EnableIRQ>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	40001000 	.word	0x40001000
 800238c:	40001400 	.word	0x40001400

08002390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_UART_MspInit+0x8c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d131      	bne.n	8002414 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4a1a      	ldr	r2, [pc, #104]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ba:	6193      	str	r3, [r2, #24]
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a14      	ldr	r2, [pc, #80]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6193      	str	r3, [r2, #24]
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_UART_MspInit+0x90>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0310 	add.w	r3, r7, #16
 80023f2:	4619      	mov	r1, r3
 80023f4:	480b      	ldr	r0, [pc, #44]	; (8002424 <HAL_UART_MspInit+0x94>)
 80023f6:	f001 f85f 	bl	80034b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	4619      	mov	r1, r3
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <HAL_UART_MspInit+0x94>)
 8002410:	f001 f852 	bl	80034b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002414:	bf00      	nop
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40013800 	.word	0x40013800
 8002420:	40021000 	.word	0x40021000
 8002424:	40010800 	.word	0x40010800

08002428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800243e:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <HAL_InitTick+0xd0>)
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	4a2d      	ldr	r2, [pc, #180]	; (80024f8 <HAL_InitTick+0xd0>)
 8002444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002448:	6193      	str	r3, [r2, #24]
 800244a:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <HAL_InitTick+0xd0>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002456:	f107 020c 	add.w	r2, r7, #12
 800245a:	f107 0310 	add.w	r3, r7, #16
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f002 fe1f 	bl	80050a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002466:	f002 fe09 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 800246a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	4a23      	ldr	r2, [pc, #140]	; (80024fc <HAL_InitTick+0xd4>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	0c9b      	lsrs	r3, r3, #18
 8002476:	3b01      	subs	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_InitTick+0xd8>)
 800247c:	4a21      	ldr	r2, [pc, #132]	; (8002504 <HAL_InitTick+0xdc>)
 800247e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <HAL_InitTick+0xd8>)
 8002482:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002486:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002488:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <HAL_InitTick+0xd8>)
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800248e:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_InitTick+0xd8>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_InitTick+0xd8>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249a:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_InitTick+0xd8>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80024a0:	4817      	ldr	r0, [pc, #92]	; (8002500 <HAL_InitTick+0xd8>)
 80024a2:	f003 ffdd 	bl	8006460 <HAL_TIM_Base_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80024ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d11b      	bne.n	80024ec <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80024b4:	4812      	ldr	r0, [pc, #72]	; (8002500 <HAL_InitTick+0xd8>)
 80024b6:	f004 f823 	bl	8006500 <HAL_TIM_Base_Start_IT>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80024c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d111      	bne.n	80024ec <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80024c8:	2019      	movs	r0, #25
 80024ca:	f000 fb9e 	bl	8002c0a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0f      	cmp	r3, #15
 80024d2:	d808      	bhi.n	80024e6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80024d4:	2200      	movs	r2, #0
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	2019      	movs	r0, #25
 80024da:	f000 fb7a 	bl	8002bd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <HAL_InitTick+0xe0>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e002      	b.n	80024ec <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80024ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3730      	adds	r7, #48	; 0x30
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	2000165c 	.word	0x2000165c
 8002504:	40012c00 	.word	0x40012c00
 8002508:	20000008 	.word	0x20000008

0800250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <NMI_Handler+0x4>

08002512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <HardFault_Handler+0x4>

08002518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <MemManage_Handler+0x4>

0800251e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002522:	e7fe      	b.n	8002522 <BusFault_Handler+0x4>

08002524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <UsageFault_Handler+0x4>

0800252a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
	...

08002538 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <RTC_IRQHandler+0x10>)
 800253e:	f003 fb11 	bl	8005b64 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000324 	.word	0x20000324

0800254c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <TIM1_UP_IRQHandler+0x10>)
 8002552:	f004 f863 	bl	800661c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	2000165c 	.word	0x2000165c

08002560 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <TIM7_IRQHandler+0x10>)
 8002566:	f004 f859 	bl	800661c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000420 	.word	0x20000420

08002574 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <DMA2_Channel4_5_IRQHandler+0x10>)
 800257a:	f000 fd33 	bl	8002fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2000028c 	.word	0x2000028c

08002588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002594:	f7ff fff8 	bl	8002588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002598:	480b      	ldr	r0, [pc, #44]	; (80025c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800259a:	490c      	ldr	r1, [pc, #48]	; (80025cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800259c:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a0:	e002      	b.n	80025a8 <LoopCopyDataInit>

080025a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a6:	3304      	adds	r3, #4

080025a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ac:	d3f9      	bcc.n	80025a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ae:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025b0:	4c09      	ldr	r4, [pc, #36]	; (80025d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b4:	e001      	b.n	80025ba <LoopFillZerobss>

080025b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b8:	3204      	adds	r2, #4

080025ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025bc:	d3fb      	bcc.n	80025b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025be:	f009 f9fb 	bl	800b9b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025c2:	f7fe fff3 	bl	80015ac <main>
  bx lr
 80025c6:	4770      	bx	lr
  ldr r0, =_sdata
 80025c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025cc:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80025d0:	0800bf6c 	.word	0x0800bf6c
  ldr r2, =_sbss
 80025d4:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80025d8:	2000335c 	.word	0x2000335c

080025dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <ADC1_2_IRQHandler>
	...

080025e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_Init+0x28>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a07      	ldr	r2, [pc, #28]	; (8002608 <HAL_Init+0x28>)
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f0:	2003      	movs	r0, #3
 80025f2:	f000 fae3 	bl	8002bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f6:	200f      	movs	r0, #15
 80025f8:	f7ff ff16 	bl	8002428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025fc:	f7ff fcea 	bl	8001fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40022000 	.word	0x40022000

0800260c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <HAL_GetTick+0x10>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	200016a4 	.word	0x200016a4

08002620 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0ce      	b.n	80027e0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fcf0 	bl	8002044 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f9bd 	bl	80029e4 <ADC_ConversionStop_Disable>
 800266a:	4603      	mov	r3, r0
 800266c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 80a9 	bne.w	80027ce <HAL_ADC_Init+0x1ae>
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80a5 	bne.w	80027ce <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800268c:	f023 0302 	bic.w	r3, r3, #2
 8002690:	f043 0202 	orr.w	r2, r3, #2
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4951      	ldr	r1, [pc, #324]	; (80027e8 <HAL_ADC_Init+0x1c8>)
 80026a2:	428b      	cmp	r3, r1
 80026a4:	d10a      	bne.n	80026bc <HAL_ADC_Init+0x9c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80026ae:	d002      	beq.n	80026b6 <HAL_ADC_Init+0x96>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	e004      	b.n	80026c0 <HAL_ADC_Init+0xa0>
 80026b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80026ba:	e001      	b.n	80026c0 <HAL_ADC_Init+0xa0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	7b1b      	ldrb	r3, [r3, #12]
 80026c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d8:	d003      	beq.n	80026e2 <HAL_ADC_Init+0xc2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d102      	bne.n	80026e8 <HAL_ADC_Init+0xc8>
 80026e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e6:	e000      	b.n	80026ea <HAL_ADC_Init+0xca>
 80026e8:	2300      	movs	r3, #0
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	7d1b      	ldrb	r3, [r3, #20]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d119      	bne.n	800272c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7b1b      	ldrb	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	3b01      	subs	r3, #1
 8002706:	035a      	lsls	r2, r3, #13
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	e00b      	b.n	800272c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f043 0220 	orr.w	r2, r3, #32
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_ADC_Init+0x1cc>)
 8002748:	4013      	ands	r3, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	430b      	orrs	r3, r1
 8002752:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800275c:	d003      	beq.n	8002766 <HAL_ADC_Init+0x146>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d104      	bne.n	8002770 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	3b01      	subs	r3, #1
 800276c:	051b      	lsls	r3, r3, #20
 800276e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	430a      	orrs	r2, r1
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_ADC_Init+0x1d0>)
 800278c:	4013      	ands	r3, r2
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	429a      	cmp	r2, r3
 8002792:	d10b      	bne.n	80027ac <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027aa:	e018      	b.n	80027de <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f023 0312 	bic.w	r3, r3, #18
 80027b4:	f043 0210 	orr.w	r2, r3, #16
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	f043 0201 	orr.w	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027cc:	e007      	b.n	80027de <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	f043 0210 	orr.w	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027de:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40013c00 	.word	0x40013c00
 80027ec:	ffe1f7fd 	.word	0xffe1f7fd
 80027f0:	ff1f0efe 	.word	0xff1f0efe

080027f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x20>
 8002810:	2302      	movs	r3, #2
 8002812:	e0dc      	b.n	80029ce <HAL_ADC_ConfigChannel+0x1da>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d81c      	bhi.n	800285e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	3b05      	subs	r3, #5
 8002836:	221f      	movs	r2, #31
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	4019      	ands	r1, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	3b05      	subs	r3, #5
 8002850:	fa00 f203 	lsl.w	r2, r0, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	635a      	str	r2, [r3, #52]	; 0x34
 800285c:	e03c      	b.n	80028d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b0c      	cmp	r3, #12
 8002864:	d81c      	bhi.n	80028a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	3b23      	subs	r3, #35	; 0x23
 8002878:	221f      	movs	r2, #31
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	4019      	ands	r1, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	3b23      	subs	r3, #35	; 0x23
 8002892:	fa00 f203 	lsl.w	r2, r0, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
 800289e:	e01b      	b.n	80028d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	3b41      	subs	r3, #65	; 0x41
 80028b2:	221f      	movs	r2, #31
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	4019      	ands	r1, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	3b41      	subs	r3, #65	; 0x41
 80028cc:	fa00 f203 	lsl.w	r2, r0, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b09      	cmp	r3, #9
 80028de:	d91c      	bls.n	800291a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68d9      	ldr	r1, [r3, #12]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	3b1e      	subs	r3, #30
 80028f2:	2207      	movs	r2, #7
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	4019      	ands	r1, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6898      	ldr	r0, [r3, #8]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	3b1e      	subs	r3, #30
 800290c:	fa00 f203 	lsl.w	r2, r0, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	e019      	b.n	800294e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6919      	ldr	r1, [r3, #16]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	2207      	movs	r2, #7
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	4019      	ands	r1, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6898      	ldr	r0, [r3, #8]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	fa00 f203 	lsl.w	r2, r0, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b10      	cmp	r3, #16
 8002954:	d003      	beq.n	800295e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800295a:	2b11      	cmp	r3, #17
 800295c:	d132      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d125      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d126      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002984:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b10      	cmp	r3, #16
 800298c:	d11a      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_ADC_ConfigChannel+0x1e8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	0c9a      	lsrs	r2, r3, #18
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029a4:	e002      	b.n	80029ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f9      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x1b2>
 80029b2:	e007      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40012400 	.word	0x40012400
 80029dc:	20000004 	.word	0x20000004
 80029e0:	431bde83 	.word	0x431bde83

080029e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d12e      	bne.n	8002a5c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a0e:	f7ff fdfd 	bl	800260c <HAL_GetTick>
 8002a12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a14:	e01b      	b.n	8002a4e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a16:	f7ff fdf9 	bl	800260c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d914      	bls.n	8002a4e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10d      	bne.n	8002a4e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a36:	f043 0210 	orr.w	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e007      	b.n	8002a5e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d0dc      	beq.n	8002a16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <__NVIC_SetPriorityGrouping+0x44>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a84:	4013      	ands	r3, r2
 8002a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9a:	4a04      	ldr	r2, [pc, #16]	; (8002aac <__NVIC_SetPriorityGrouping+0x44>)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	60d3      	str	r3, [r2, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	0a1b      	lsrs	r3, r3, #8
 8002aba:	f003 0307 	and.w	r3, r3, #7
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	db0b      	blt.n	8002af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	4906      	ldr	r1, [pc, #24]	; (8002b00 <__NVIC_EnableIRQ+0x34>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2001      	movs	r0, #1
 8002aee:	fa00 f202 	lsl.w	r2, r0, r2
 8002af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100

08002b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	6039      	str	r1, [r7, #0]
 8002b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	db0a      	blt.n	8002b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	490c      	ldr	r1, [pc, #48]	; (8002b50 <__NVIC_SetPriority+0x4c>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	0112      	lsls	r2, r2, #4
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	440b      	add	r3, r1
 8002b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b2c:	e00a      	b.n	8002b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4908      	ldr	r1, [pc, #32]	; (8002b54 <__NVIC_SetPriority+0x50>)
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	3b04      	subs	r3, #4
 8002b3c:	0112      	lsls	r2, r2, #4
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	440b      	add	r3, r1
 8002b42:	761a      	strb	r2, [r3, #24]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e100 	.word	0xe000e100
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	; 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f1c3 0307 	rsb	r3, r3, #7
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	bf28      	it	cs
 8002b76:	2304      	movcs	r3, #4
 8002b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	2b06      	cmp	r3, #6
 8002b80:	d902      	bls.n	8002b88 <NVIC_EncodePriority+0x30>
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3b03      	subs	r3, #3
 8002b86:	e000      	b.n	8002b8a <NVIC_EncodePriority+0x32>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43da      	mvns	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	43d9      	mvns	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	4313      	orrs	r3, r2
         );
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3724      	adds	r7, #36	; 0x24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ff4f 	bl	8002a68 <__NVIC_SetPriorityGrouping>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be4:	f7ff ff64 	bl	8002ab0 <__NVIC_GetPriorityGrouping>
 8002be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f7ff ffb2 	bl	8002b58 <NVIC_EncodePriority>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff81 	bl	8002b04 <__NVIC_SetPriority>
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff57 	bl	8002acc <__NVIC_EnableIRQ>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e059      	b.n	8002cf2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b2d      	ldr	r3, [pc, #180]	; (8002cfc <HAL_DMA_Init+0xd4>)
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d80f      	bhi.n	8002c6a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_DMA_Init+0xd8>)
 8002c52:	4413      	add	r3, r2
 8002c54:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_DMA_Init+0xdc>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a28      	ldr	r2, [pc, #160]	; (8002d08 <HAL_DMA_Init+0xe0>)
 8002c66:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c68:	e00e      	b.n	8002c88 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <HAL_DMA_Init+0xe4>)
 8002c72:	4413      	add	r3, r2
 8002c74:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <HAL_DMA_Init+0xdc>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	009a      	lsls	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a22      	ldr	r2, [pc, #136]	; (8002d10 <HAL_DMA_Init+0xe8>)
 8002c86:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ca2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40020407 	.word	0x40020407
 8002d00:	bffdfff8 	.word	0xbffdfff8
 8002d04:	cccccccd 	.word	0xcccccccd
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	bffdfbf8 	.word	0xbffdfbf8
 8002d10:	40020400 	.word	0x40020400

08002d14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_DMA_Start_IT+0x20>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e04b      	b.n	8002dcc <HAL_DMA_Start_IT+0xb8>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d13a      	bne.n	8002dbe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fb75 	bl	800345c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 020e 	orr.w	r2, r2, #14
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e00f      	b.n	8002dac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0204 	bic.w	r2, r2, #4
 8002d9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 020a 	orr.w	r2, r2, #10
 8002daa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e005      	b.n	8002dca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d005      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2204      	movs	r2, #4
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	e0d6      	b.n	8002fa6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 020e 	bic.w	r2, r2, #14
 8002e06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b64      	ldr	r3, [pc, #400]	; (8002fb0 <HAL_DMA_Abort_IT+0x1dc>)
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d958      	bls.n	8002ed6 <HAL_DMA_Abort_IT+0x102>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a62      	ldr	r2, [pc, #392]	; (8002fb4 <HAL_DMA_Abort_IT+0x1e0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d04f      	beq.n	8002ece <HAL_DMA_Abort_IT+0xfa>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a61      	ldr	r2, [pc, #388]	; (8002fb8 <HAL_DMA_Abort_IT+0x1e4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d048      	beq.n	8002eca <HAL_DMA_Abort_IT+0xf6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5f      	ldr	r2, [pc, #380]	; (8002fbc <HAL_DMA_Abort_IT+0x1e8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d040      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xf0>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a5e      	ldr	r2, [pc, #376]	; (8002fc0 <HAL_DMA_Abort_IT+0x1ec>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d038      	beq.n	8002ebe <HAL_DMA_Abort_IT+0xea>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5c      	ldr	r2, [pc, #368]	; (8002fc4 <HAL_DMA_Abort_IT+0x1f0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d030      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0xe4>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a5b      	ldr	r2, [pc, #364]	; (8002fc8 <HAL_DMA_Abort_IT+0x1f4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d028      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0xde>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a52      	ldr	r2, [pc, #328]	; (8002fb0 <HAL_DMA_Abort_IT+0x1dc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d020      	beq.n	8002eac <HAL_DMA_Abort_IT+0xd8>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a57      	ldr	r2, [pc, #348]	; (8002fcc <HAL_DMA_Abort_IT+0x1f8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d019      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xd4>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a55      	ldr	r2, [pc, #340]	; (8002fd0 <HAL_DMA_Abort_IT+0x1fc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d012      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xd0>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a54      	ldr	r2, [pc, #336]	; (8002fd4 <HAL_DMA_Abort_IT+0x200>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00a      	beq.n	8002e9e <HAL_DMA_Abort_IT+0xca>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a52      	ldr	r2, [pc, #328]	; (8002fd8 <HAL_DMA_Abort_IT+0x204>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d102      	bne.n	8002e98 <HAL_DMA_Abort_IT+0xc4>
 8002e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e96:	e01b      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xfc>
 8002e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e9c:	e018      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xfc>
 8002e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea2:	e015      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xfc>
 8002ea4:	2310      	movs	r3, #16
 8002ea6:	e013      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xfc>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e011      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xfc>
 8002eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb0:	e00e      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xfc>
 8002eb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002eb6:	e00b      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xfc>
 8002eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ebc:	e008      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xfc>
 8002ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec2:	e005      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xfc>
 8002ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec8:	e002      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xfc>
 8002eca:	2310      	movs	r3, #16
 8002ecc:	e000      	b.n	8002ed0 <HAL_DMA_Abort_IT+0xfc>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	4a42      	ldr	r2, [pc, #264]	; (8002fdc <HAL_DMA_Abort_IT+0x208>)
 8002ed2:	6053      	str	r3, [r2, #4]
 8002ed4:	e057      	b.n	8002f86 <HAL_DMA_Abort_IT+0x1b2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a36      	ldr	r2, [pc, #216]	; (8002fb4 <HAL_DMA_Abort_IT+0x1e0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d04f      	beq.n	8002f80 <HAL_DMA_Abort_IT+0x1ac>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <HAL_DMA_Abort_IT+0x1e4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d048      	beq.n	8002f7c <HAL_DMA_Abort_IT+0x1a8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a33      	ldr	r2, [pc, #204]	; (8002fbc <HAL_DMA_Abort_IT+0x1e8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d040      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x1a2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a31      	ldr	r2, [pc, #196]	; (8002fc0 <HAL_DMA_Abort_IT+0x1ec>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d038      	beq.n	8002f70 <HAL_DMA_Abort_IT+0x19c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a30      	ldr	r2, [pc, #192]	; (8002fc4 <HAL_DMA_Abort_IT+0x1f0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d030      	beq.n	8002f6a <HAL_DMA_Abort_IT+0x196>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2e      	ldr	r2, [pc, #184]	; (8002fc8 <HAL_DMA_Abort_IT+0x1f4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d028      	beq.n	8002f64 <HAL_DMA_Abort_IT+0x190>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a26      	ldr	r2, [pc, #152]	; (8002fb0 <HAL_DMA_Abort_IT+0x1dc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d020      	beq.n	8002f5e <HAL_DMA_Abort_IT+0x18a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <HAL_DMA_Abort_IT+0x1f8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d019      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x186>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <HAL_DMA_Abort_IT+0x1fc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d012      	beq.n	8002f56 <HAL_DMA_Abort_IT+0x182>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a27      	ldr	r2, [pc, #156]	; (8002fd4 <HAL_DMA_Abort_IT+0x200>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00a      	beq.n	8002f50 <HAL_DMA_Abort_IT+0x17c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <HAL_DMA_Abort_IT+0x204>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d102      	bne.n	8002f4a <HAL_DMA_Abort_IT+0x176>
 8002f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f48:	e01b      	b.n	8002f82 <HAL_DMA_Abort_IT+0x1ae>
 8002f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f4e:	e018      	b.n	8002f82 <HAL_DMA_Abort_IT+0x1ae>
 8002f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f54:	e015      	b.n	8002f82 <HAL_DMA_Abort_IT+0x1ae>
 8002f56:	2310      	movs	r3, #16
 8002f58:	e013      	b.n	8002f82 <HAL_DMA_Abort_IT+0x1ae>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e011      	b.n	8002f82 <HAL_DMA_Abort_IT+0x1ae>
 8002f5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f62:	e00e      	b.n	8002f82 <HAL_DMA_Abort_IT+0x1ae>
 8002f64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f68:	e00b      	b.n	8002f82 <HAL_DMA_Abort_IT+0x1ae>
 8002f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f6e:	e008      	b.n	8002f82 <HAL_DMA_Abort_IT+0x1ae>
 8002f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f74:	e005      	b.n	8002f82 <HAL_DMA_Abort_IT+0x1ae>
 8002f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f7a:	e002      	b.n	8002f82 <HAL_DMA_Abort_IT+0x1ae>
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	e000      	b.n	8002f82 <HAL_DMA_Abort_IT+0x1ae>
 8002f80:	2301      	movs	r3, #1
 8002f82:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <HAL_DMA_Abort_IT+0x20c>)
 8002f84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
    } 
  }
  return status;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40020080 	.word	0x40020080
 8002fb4:	40020008 	.word	0x40020008
 8002fb8:	4002001c 	.word	0x4002001c
 8002fbc:	40020030 	.word	0x40020030
 8002fc0:	40020044 	.word	0x40020044
 8002fc4:	40020058 	.word	0x40020058
 8002fc8:	4002006c 	.word	0x4002006c
 8002fcc:	40020408 	.word	0x40020408
 8002fd0:	4002041c 	.word	0x4002041c
 8002fd4:	40020430 	.word	0x40020430
 8002fd8:	40020444 	.word	0x40020444
 8002fdc:	40020400 	.word	0x40020400
 8002fe0:	40020000 	.word	0x40020000

08002fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2204      	movs	r2, #4
 8003002:	409a      	lsls	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80f1 	beq.w	80031f0 <HAL_DMA_IRQHandler+0x20c>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80eb 	beq.w	80031f0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d107      	bne.n	8003038 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0204 	bic.w	r2, r2, #4
 8003036:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b5f      	ldr	r3, [pc, #380]	; (80031bc <HAL_DMA_IRQHandler+0x1d8>)
 8003040:	429a      	cmp	r2, r3
 8003042:	d958      	bls.n	80030f6 <HAL_DMA_IRQHandler+0x112>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a5d      	ldr	r2, [pc, #372]	; (80031c0 <HAL_DMA_IRQHandler+0x1dc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d04f      	beq.n	80030ee <HAL_DMA_IRQHandler+0x10a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a5c      	ldr	r2, [pc, #368]	; (80031c4 <HAL_DMA_IRQHandler+0x1e0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d048      	beq.n	80030ea <HAL_DMA_IRQHandler+0x106>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5a      	ldr	r2, [pc, #360]	; (80031c8 <HAL_DMA_IRQHandler+0x1e4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d040      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x100>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a59      	ldr	r2, [pc, #356]	; (80031cc <HAL_DMA_IRQHandler+0x1e8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d038      	beq.n	80030de <HAL_DMA_IRQHandler+0xfa>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a57      	ldr	r2, [pc, #348]	; (80031d0 <HAL_DMA_IRQHandler+0x1ec>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d030      	beq.n	80030d8 <HAL_DMA_IRQHandler+0xf4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a56      	ldr	r2, [pc, #344]	; (80031d4 <HAL_DMA_IRQHandler+0x1f0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d028      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xee>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a4d      	ldr	r2, [pc, #308]	; (80031bc <HAL_DMA_IRQHandler+0x1d8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d020      	beq.n	80030cc <HAL_DMA_IRQHandler+0xe8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <HAL_DMA_IRQHandler+0x1f4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d019      	beq.n	80030c8 <HAL_DMA_IRQHandler+0xe4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a50      	ldr	r2, [pc, #320]	; (80031dc <HAL_DMA_IRQHandler+0x1f8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d012      	beq.n	80030c4 <HAL_DMA_IRQHandler+0xe0>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a4f      	ldr	r2, [pc, #316]	; (80031e0 <HAL_DMA_IRQHandler+0x1fc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00a      	beq.n	80030be <HAL_DMA_IRQHandler+0xda>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a4d      	ldr	r2, [pc, #308]	; (80031e4 <HAL_DMA_IRQHandler+0x200>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d102      	bne.n	80030b8 <HAL_DMA_IRQHandler+0xd4>
 80030b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030b6:	e01b      	b.n	80030f0 <HAL_DMA_IRQHandler+0x10c>
 80030b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030bc:	e018      	b.n	80030f0 <HAL_DMA_IRQHandler+0x10c>
 80030be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030c2:	e015      	b.n	80030f0 <HAL_DMA_IRQHandler+0x10c>
 80030c4:	2340      	movs	r3, #64	; 0x40
 80030c6:	e013      	b.n	80030f0 <HAL_DMA_IRQHandler+0x10c>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e011      	b.n	80030f0 <HAL_DMA_IRQHandler+0x10c>
 80030cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030d0:	e00e      	b.n	80030f0 <HAL_DMA_IRQHandler+0x10c>
 80030d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030d6:	e00b      	b.n	80030f0 <HAL_DMA_IRQHandler+0x10c>
 80030d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030dc:	e008      	b.n	80030f0 <HAL_DMA_IRQHandler+0x10c>
 80030de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030e2:	e005      	b.n	80030f0 <HAL_DMA_IRQHandler+0x10c>
 80030e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e8:	e002      	b.n	80030f0 <HAL_DMA_IRQHandler+0x10c>
 80030ea:	2340      	movs	r3, #64	; 0x40
 80030ec:	e000      	b.n	80030f0 <HAL_DMA_IRQHandler+0x10c>
 80030ee:	2304      	movs	r3, #4
 80030f0:	4a3d      	ldr	r2, [pc, #244]	; (80031e8 <HAL_DMA_IRQHandler+0x204>)
 80030f2:	6053      	str	r3, [r2, #4]
 80030f4:	e057      	b.n	80031a6 <HAL_DMA_IRQHandler+0x1c2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a31      	ldr	r2, [pc, #196]	; (80031c0 <HAL_DMA_IRQHandler+0x1dc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d04f      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x1bc>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2f      	ldr	r2, [pc, #188]	; (80031c4 <HAL_DMA_IRQHandler+0x1e0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d048      	beq.n	800319c <HAL_DMA_IRQHandler+0x1b8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2e      	ldr	r2, [pc, #184]	; (80031c8 <HAL_DMA_IRQHandler+0x1e4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d040      	beq.n	8003196 <HAL_DMA_IRQHandler+0x1b2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2c      	ldr	r2, [pc, #176]	; (80031cc <HAL_DMA_IRQHandler+0x1e8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d038      	beq.n	8003190 <HAL_DMA_IRQHandler+0x1ac>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2b      	ldr	r2, [pc, #172]	; (80031d0 <HAL_DMA_IRQHandler+0x1ec>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d030      	beq.n	800318a <HAL_DMA_IRQHandler+0x1a6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a29      	ldr	r2, [pc, #164]	; (80031d4 <HAL_DMA_IRQHandler+0x1f0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d028      	beq.n	8003184 <HAL_DMA_IRQHandler+0x1a0>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a21      	ldr	r2, [pc, #132]	; (80031bc <HAL_DMA_IRQHandler+0x1d8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d020      	beq.n	800317e <HAL_DMA_IRQHandler+0x19a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <HAL_DMA_IRQHandler+0x1f4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d019      	beq.n	800317a <HAL_DMA_IRQHandler+0x196>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a24      	ldr	r2, [pc, #144]	; (80031dc <HAL_DMA_IRQHandler+0x1f8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d012      	beq.n	8003176 <HAL_DMA_IRQHandler+0x192>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <HAL_DMA_IRQHandler+0x1fc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00a      	beq.n	8003170 <HAL_DMA_IRQHandler+0x18c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a21      	ldr	r2, [pc, #132]	; (80031e4 <HAL_DMA_IRQHandler+0x200>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d102      	bne.n	800316a <HAL_DMA_IRQHandler+0x186>
 8003164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003168:	e01b      	b.n	80031a2 <HAL_DMA_IRQHandler+0x1be>
 800316a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800316e:	e018      	b.n	80031a2 <HAL_DMA_IRQHandler+0x1be>
 8003170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003174:	e015      	b.n	80031a2 <HAL_DMA_IRQHandler+0x1be>
 8003176:	2340      	movs	r3, #64	; 0x40
 8003178:	e013      	b.n	80031a2 <HAL_DMA_IRQHandler+0x1be>
 800317a:	2304      	movs	r3, #4
 800317c:	e011      	b.n	80031a2 <HAL_DMA_IRQHandler+0x1be>
 800317e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003182:	e00e      	b.n	80031a2 <HAL_DMA_IRQHandler+0x1be>
 8003184:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003188:	e00b      	b.n	80031a2 <HAL_DMA_IRQHandler+0x1be>
 800318a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800318e:	e008      	b.n	80031a2 <HAL_DMA_IRQHandler+0x1be>
 8003190:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003194:	e005      	b.n	80031a2 <HAL_DMA_IRQHandler+0x1be>
 8003196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800319a:	e002      	b.n	80031a2 <HAL_DMA_IRQHandler+0x1be>
 800319c:	2340      	movs	r3, #64	; 0x40
 800319e:	e000      	b.n	80031a2 <HAL_DMA_IRQHandler+0x1be>
 80031a0:	2304      	movs	r3, #4
 80031a2:	4a12      	ldr	r2, [pc, #72]	; (80031ec <HAL_DMA_IRQHandler+0x208>)
 80031a4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8136 	beq.w	800341c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031b8:	e130      	b.n	800341c <HAL_DMA_IRQHandler+0x438>
 80031ba:	bf00      	nop
 80031bc:	40020080 	.word	0x40020080
 80031c0:	40020008 	.word	0x40020008
 80031c4:	4002001c 	.word	0x4002001c
 80031c8:	40020030 	.word	0x40020030
 80031cc:	40020044 	.word	0x40020044
 80031d0:	40020058 	.word	0x40020058
 80031d4:	4002006c 	.word	0x4002006c
 80031d8:	40020408 	.word	0x40020408
 80031dc:	4002041c 	.word	0x4002041c
 80031e0:	40020430 	.word	0x40020430
 80031e4:	40020444 	.word	0x40020444
 80031e8:	40020400 	.word	0x40020400
 80031ec:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2202      	movs	r2, #2
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80dd 	beq.w	80033bc <HAL_DMA_IRQHandler+0x3d8>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80d7 	beq.w	80033bc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10b      	bne.n	8003234 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 020a 	bic.w	r2, r2, #10
 800322a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	4b7b      	ldr	r3, [pc, #492]	; (8003428 <HAL_DMA_IRQHandler+0x444>)
 800323c:	429a      	cmp	r2, r3
 800323e:	d958      	bls.n	80032f2 <HAL_DMA_IRQHandler+0x30e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a79      	ldr	r2, [pc, #484]	; (800342c <HAL_DMA_IRQHandler+0x448>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d04f      	beq.n	80032ea <HAL_DMA_IRQHandler+0x306>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a78      	ldr	r2, [pc, #480]	; (8003430 <HAL_DMA_IRQHandler+0x44c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d048      	beq.n	80032e6 <HAL_DMA_IRQHandler+0x302>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a76      	ldr	r2, [pc, #472]	; (8003434 <HAL_DMA_IRQHandler+0x450>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d040      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x2fc>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a75      	ldr	r2, [pc, #468]	; (8003438 <HAL_DMA_IRQHandler+0x454>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d038      	beq.n	80032da <HAL_DMA_IRQHandler+0x2f6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a73      	ldr	r2, [pc, #460]	; (800343c <HAL_DMA_IRQHandler+0x458>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d030      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x2f0>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a72      	ldr	r2, [pc, #456]	; (8003440 <HAL_DMA_IRQHandler+0x45c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d028      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ea>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a69      	ldr	r2, [pc, #420]	; (8003428 <HAL_DMA_IRQHandler+0x444>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d020      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x2e4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6e      	ldr	r2, [pc, #440]	; (8003444 <HAL_DMA_IRQHandler+0x460>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d019      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x2e0>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a6c      	ldr	r2, [pc, #432]	; (8003448 <HAL_DMA_IRQHandler+0x464>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d012      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x2dc>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6b      	ldr	r2, [pc, #428]	; (800344c <HAL_DMA_IRQHandler+0x468>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00a      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2d6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a69      	ldr	r2, [pc, #420]	; (8003450 <HAL_DMA_IRQHandler+0x46c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d102      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x2d0>
 80032ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032b2:	e01b      	b.n	80032ec <HAL_DMA_IRQHandler+0x308>
 80032b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b8:	e018      	b.n	80032ec <HAL_DMA_IRQHandler+0x308>
 80032ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032be:	e015      	b.n	80032ec <HAL_DMA_IRQHandler+0x308>
 80032c0:	2320      	movs	r3, #32
 80032c2:	e013      	b.n	80032ec <HAL_DMA_IRQHandler+0x308>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e011      	b.n	80032ec <HAL_DMA_IRQHandler+0x308>
 80032c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032cc:	e00e      	b.n	80032ec <HAL_DMA_IRQHandler+0x308>
 80032ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032d2:	e00b      	b.n	80032ec <HAL_DMA_IRQHandler+0x308>
 80032d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d8:	e008      	b.n	80032ec <HAL_DMA_IRQHandler+0x308>
 80032da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032de:	e005      	b.n	80032ec <HAL_DMA_IRQHandler+0x308>
 80032e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032e4:	e002      	b.n	80032ec <HAL_DMA_IRQHandler+0x308>
 80032e6:	2320      	movs	r3, #32
 80032e8:	e000      	b.n	80032ec <HAL_DMA_IRQHandler+0x308>
 80032ea:	2302      	movs	r3, #2
 80032ec:	4a59      	ldr	r2, [pc, #356]	; (8003454 <HAL_DMA_IRQHandler+0x470>)
 80032ee:	6053      	str	r3, [r2, #4]
 80032f0:	e057      	b.n	80033a2 <HAL_DMA_IRQHandler+0x3be>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a4d      	ldr	r2, [pc, #308]	; (800342c <HAL_DMA_IRQHandler+0x448>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d04f      	beq.n	800339c <HAL_DMA_IRQHandler+0x3b8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a4b      	ldr	r2, [pc, #300]	; (8003430 <HAL_DMA_IRQHandler+0x44c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d048      	beq.n	8003398 <HAL_DMA_IRQHandler+0x3b4>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a4a      	ldr	r2, [pc, #296]	; (8003434 <HAL_DMA_IRQHandler+0x450>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d040      	beq.n	8003392 <HAL_DMA_IRQHandler+0x3ae>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a48      	ldr	r2, [pc, #288]	; (8003438 <HAL_DMA_IRQHandler+0x454>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d038      	beq.n	800338c <HAL_DMA_IRQHandler+0x3a8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a47      	ldr	r2, [pc, #284]	; (800343c <HAL_DMA_IRQHandler+0x458>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d030      	beq.n	8003386 <HAL_DMA_IRQHandler+0x3a2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a45      	ldr	r2, [pc, #276]	; (8003440 <HAL_DMA_IRQHandler+0x45c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d028      	beq.n	8003380 <HAL_DMA_IRQHandler+0x39c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a3d      	ldr	r2, [pc, #244]	; (8003428 <HAL_DMA_IRQHandler+0x444>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d020      	beq.n	800337a <HAL_DMA_IRQHandler+0x396>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a41      	ldr	r2, [pc, #260]	; (8003444 <HAL_DMA_IRQHandler+0x460>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d019      	beq.n	8003376 <HAL_DMA_IRQHandler+0x392>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a40      	ldr	r2, [pc, #256]	; (8003448 <HAL_DMA_IRQHandler+0x464>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d012      	beq.n	8003372 <HAL_DMA_IRQHandler+0x38e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a3e      	ldr	r2, [pc, #248]	; (800344c <HAL_DMA_IRQHandler+0x468>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00a      	beq.n	800336c <HAL_DMA_IRQHandler+0x388>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a3d      	ldr	r2, [pc, #244]	; (8003450 <HAL_DMA_IRQHandler+0x46c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d102      	bne.n	8003366 <HAL_DMA_IRQHandler+0x382>
 8003360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003364:	e01b      	b.n	800339e <HAL_DMA_IRQHandler+0x3ba>
 8003366:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800336a:	e018      	b.n	800339e <HAL_DMA_IRQHandler+0x3ba>
 800336c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003370:	e015      	b.n	800339e <HAL_DMA_IRQHandler+0x3ba>
 8003372:	2320      	movs	r3, #32
 8003374:	e013      	b.n	800339e <HAL_DMA_IRQHandler+0x3ba>
 8003376:	2302      	movs	r3, #2
 8003378:	e011      	b.n	800339e <HAL_DMA_IRQHandler+0x3ba>
 800337a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337e:	e00e      	b.n	800339e <HAL_DMA_IRQHandler+0x3ba>
 8003380:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003384:	e00b      	b.n	800339e <HAL_DMA_IRQHandler+0x3ba>
 8003386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800338a:	e008      	b.n	800339e <HAL_DMA_IRQHandler+0x3ba>
 800338c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003390:	e005      	b.n	800339e <HAL_DMA_IRQHandler+0x3ba>
 8003392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003396:	e002      	b.n	800339e <HAL_DMA_IRQHandler+0x3ba>
 8003398:	2320      	movs	r3, #32
 800339a:	e000      	b.n	800339e <HAL_DMA_IRQHandler+0x3ba>
 800339c:	2302      	movs	r3, #2
 800339e:	4a2e      	ldr	r2, [pc, #184]	; (8003458 <HAL_DMA_IRQHandler+0x474>)
 80033a0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d034      	beq.n	800341c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033ba:	e02f      	b.n	800341c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	2208      	movs	r2, #8
 80033c2:	409a      	lsls	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d028      	beq.n	800341e <HAL_DMA_IRQHandler+0x43a>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d023      	beq.n	800341e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 020e 	bic.w	r2, r2, #14
 80033e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	2b00      	cmp	r3, #0
 8003412:	d004      	beq.n	800341e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
    }
  }
  return;
 800341c:	bf00      	nop
 800341e:	bf00      	nop
}
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40020080 	.word	0x40020080
 800342c:	40020008 	.word	0x40020008
 8003430:	4002001c 	.word	0x4002001c
 8003434:	40020030 	.word	0x40020030
 8003438:	40020044 	.word	0x40020044
 800343c:	40020058 	.word	0x40020058
 8003440:	4002006c 	.word	0x4002006c
 8003444:	40020408 	.word	0x40020408
 8003448:	4002041c 	.word	0x4002041c
 800344c:	40020430 	.word	0x40020430
 8003450:	40020444 	.word	0x40020444
 8003454:	40020400 	.word	0x40020400
 8003458:	40020000 	.word	0x40020000

0800345c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	2101      	movs	r1, #1
 8003474:	fa01 f202 	lsl.w	r2, r1, r2
 8003478:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b10      	cmp	r3, #16
 8003488:	d108      	bne.n	800349c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800349a:	e007      	b.n	80034ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	60da      	str	r2, [r3, #12]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b08b      	sub	sp, #44	; 0x2c
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034c6:	2300      	movs	r3, #0
 80034c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ca:	e179      	b.n	80037c0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034cc:	2201      	movs	r2, #1
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	f040 8168 	bne.w	80037ba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4a96      	ldr	r2, [pc, #600]	; (8003748 <HAL_GPIO_Init+0x290>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d05e      	beq.n	80035b2 <HAL_GPIO_Init+0xfa>
 80034f4:	4a94      	ldr	r2, [pc, #592]	; (8003748 <HAL_GPIO_Init+0x290>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d875      	bhi.n	80035e6 <HAL_GPIO_Init+0x12e>
 80034fa:	4a94      	ldr	r2, [pc, #592]	; (800374c <HAL_GPIO_Init+0x294>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d058      	beq.n	80035b2 <HAL_GPIO_Init+0xfa>
 8003500:	4a92      	ldr	r2, [pc, #584]	; (800374c <HAL_GPIO_Init+0x294>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d86f      	bhi.n	80035e6 <HAL_GPIO_Init+0x12e>
 8003506:	4a92      	ldr	r2, [pc, #584]	; (8003750 <HAL_GPIO_Init+0x298>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d052      	beq.n	80035b2 <HAL_GPIO_Init+0xfa>
 800350c:	4a90      	ldr	r2, [pc, #576]	; (8003750 <HAL_GPIO_Init+0x298>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d869      	bhi.n	80035e6 <HAL_GPIO_Init+0x12e>
 8003512:	4a90      	ldr	r2, [pc, #576]	; (8003754 <HAL_GPIO_Init+0x29c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d04c      	beq.n	80035b2 <HAL_GPIO_Init+0xfa>
 8003518:	4a8e      	ldr	r2, [pc, #568]	; (8003754 <HAL_GPIO_Init+0x29c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d863      	bhi.n	80035e6 <HAL_GPIO_Init+0x12e>
 800351e:	4a8e      	ldr	r2, [pc, #568]	; (8003758 <HAL_GPIO_Init+0x2a0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d046      	beq.n	80035b2 <HAL_GPIO_Init+0xfa>
 8003524:	4a8c      	ldr	r2, [pc, #560]	; (8003758 <HAL_GPIO_Init+0x2a0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d85d      	bhi.n	80035e6 <HAL_GPIO_Init+0x12e>
 800352a:	2b12      	cmp	r3, #18
 800352c:	d82a      	bhi.n	8003584 <HAL_GPIO_Init+0xcc>
 800352e:	2b12      	cmp	r3, #18
 8003530:	d859      	bhi.n	80035e6 <HAL_GPIO_Init+0x12e>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <HAL_GPIO_Init+0x80>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	080035b3 	.word	0x080035b3
 800353c:	0800358d 	.word	0x0800358d
 8003540:	0800359f 	.word	0x0800359f
 8003544:	080035e1 	.word	0x080035e1
 8003548:	080035e7 	.word	0x080035e7
 800354c:	080035e7 	.word	0x080035e7
 8003550:	080035e7 	.word	0x080035e7
 8003554:	080035e7 	.word	0x080035e7
 8003558:	080035e7 	.word	0x080035e7
 800355c:	080035e7 	.word	0x080035e7
 8003560:	080035e7 	.word	0x080035e7
 8003564:	080035e7 	.word	0x080035e7
 8003568:	080035e7 	.word	0x080035e7
 800356c:	080035e7 	.word	0x080035e7
 8003570:	080035e7 	.word	0x080035e7
 8003574:	080035e7 	.word	0x080035e7
 8003578:	080035e7 	.word	0x080035e7
 800357c:	08003595 	.word	0x08003595
 8003580:	080035a9 	.word	0x080035a9
 8003584:	4a75      	ldr	r2, [pc, #468]	; (800375c <HAL_GPIO_Init+0x2a4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800358a:	e02c      	b.n	80035e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	623b      	str	r3, [r7, #32]
          break;
 8003592:	e029      	b.n	80035e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	3304      	adds	r3, #4
 800359a:	623b      	str	r3, [r7, #32]
          break;
 800359c:	e024      	b.n	80035e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	3308      	adds	r3, #8
 80035a4:	623b      	str	r3, [r7, #32]
          break;
 80035a6:	e01f      	b.n	80035e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	330c      	adds	r3, #12
 80035ae:	623b      	str	r3, [r7, #32]
          break;
 80035b0:	e01a      	b.n	80035e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035ba:	2304      	movs	r3, #4
 80035bc:	623b      	str	r3, [r7, #32]
          break;
 80035be:	e013      	b.n	80035e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035c8:	2308      	movs	r3, #8
 80035ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	611a      	str	r2, [r3, #16]
          break;
 80035d2:	e009      	b.n	80035e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035d4:	2308      	movs	r3, #8
 80035d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	615a      	str	r2, [r3, #20]
          break;
 80035de:	e003      	b.n	80035e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035e0:	2300      	movs	r3, #0
 80035e2:	623b      	str	r3, [r7, #32]
          break;
 80035e4:	e000      	b.n	80035e8 <HAL_GPIO_Init+0x130>
          break;
 80035e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2bff      	cmp	r3, #255	; 0xff
 80035ec:	d801      	bhi.n	80035f2 <HAL_GPIO_Init+0x13a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	e001      	b.n	80035f6 <HAL_GPIO_Init+0x13e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2bff      	cmp	r3, #255	; 0xff
 80035fc:	d802      	bhi.n	8003604 <HAL_GPIO_Init+0x14c>
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	e002      	b.n	800360a <HAL_GPIO_Init+0x152>
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	3b08      	subs	r3, #8
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	210f      	movs	r1, #15
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	401a      	ands	r2, r3
 800361c:	6a39      	ldr	r1, [r7, #32]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	431a      	orrs	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80c1 	beq.w	80037ba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003638:	4b49      	ldr	r3, [pc, #292]	; (8003760 <HAL_GPIO_Init+0x2a8>)
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	4a48      	ldr	r2, [pc, #288]	; (8003760 <HAL_GPIO_Init+0x2a8>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6193      	str	r3, [r2, #24]
 8003644:	4b46      	ldr	r3, [pc, #280]	; (8003760 <HAL_GPIO_Init+0x2a8>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003650:	4a44      	ldr	r2, [pc, #272]	; (8003764 <HAL_GPIO_Init+0x2ac>)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3302      	adds	r3, #2
 8003658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	220f      	movs	r2, #15
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4013      	ands	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a3c      	ldr	r2, [pc, #240]	; (8003768 <HAL_GPIO_Init+0x2b0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d01f      	beq.n	80036bc <HAL_GPIO_Init+0x204>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a3b      	ldr	r2, [pc, #236]	; (800376c <HAL_GPIO_Init+0x2b4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d019      	beq.n	80036b8 <HAL_GPIO_Init+0x200>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a3a      	ldr	r2, [pc, #232]	; (8003770 <HAL_GPIO_Init+0x2b8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d013      	beq.n	80036b4 <HAL_GPIO_Init+0x1fc>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a39      	ldr	r2, [pc, #228]	; (8003774 <HAL_GPIO_Init+0x2bc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00d      	beq.n	80036b0 <HAL_GPIO_Init+0x1f8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a38      	ldr	r2, [pc, #224]	; (8003778 <HAL_GPIO_Init+0x2c0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <HAL_GPIO_Init+0x1f4>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a37      	ldr	r2, [pc, #220]	; (800377c <HAL_GPIO_Init+0x2c4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_GPIO_Init+0x1f0>
 80036a4:	2305      	movs	r3, #5
 80036a6:	e00a      	b.n	80036be <HAL_GPIO_Init+0x206>
 80036a8:	2306      	movs	r3, #6
 80036aa:	e008      	b.n	80036be <HAL_GPIO_Init+0x206>
 80036ac:	2304      	movs	r3, #4
 80036ae:	e006      	b.n	80036be <HAL_GPIO_Init+0x206>
 80036b0:	2303      	movs	r3, #3
 80036b2:	e004      	b.n	80036be <HAL_GPIO_Init+0x206>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e002      	b.n	80036be <HAL_GPIO_Init+0x206>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <HAL_GPIO_Init+0x206>
 80036bc:	2300      	movs	r3, #0
 80036be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c0:	f002 0203 	and.w	r2, r2, #3
 80036c4:	0092      	lsls	r2, r2, #2
 80036c6:	4093      	lsls	r3, r2
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036ce:	4925      	ldr	r1, [pc, #148]	; (8003764 <HAL_GPIO_Init+0x2ac>)
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3302      	adds	r3, #2
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d006      	beq.n	80036f6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_GPIO_Init+0x2c8>)
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	4924      	ldr	r1, [pc, #144]	; (8003780 <HAL_GPIO_Init+0x2c8>)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]
 80036f4:	e006      	b.n	8003704 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036f6:	4b22      	ldr	r3, [pc, #136]	; (8003780 <HAL_GPIO_Init+0x2c8>)
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	4920      	ldr	r1, [pc, #128]	; (8003780 <HAL_GPIO_Init+0x2c8>)
 8003700:	4013      	ands	r3, r2
 8003702:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_GPIO_Init+0x2c8>)
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	491a      	ldr	r1, [pc, #104]	; (8003780 <HAL_GPIO_Init+0x2c8>)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	60cb      	str	r3, [r1, #12]
 800371c:	e006      	b.n	800372c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <HAL_GPIO_Init+0x2c8>)
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	43db      	mvns	r3, r3
 8003726:	4916      	ldr	r1, [pc, #88]	; (8003780 <HAL_GPIO_Init+0x2c8>)
 8003728:	4013      	ands	r3, r2
 800372a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d025      	beq.n	8003784 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_GPIO_Init+0x2c8>)
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	4910      	ldr	r1, [pc, #64]	; (8003780 <HAL_GPIO_Init+0x2c8>)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
 8003744:	e025      	b.n	8003792 <HAL_GPIO_Init+0x2da>
 8003746:	bf00      	nop
 8003748:	10320000 	.word	0x10320000
 800374c:	10310000 	.word	0x10310000
 8003750:	10220000 	.word	0x10220000
 8003754:	10210000 	.word	0x10210000
 8003758:	10120000 	.word	0x10120000
 800375c:	10110000 	.word	0x10110000
 8003760:	40021000 	.word	0x40021000
 8003764:	40010000 	.word	0x40010000
 8003768:	40010800 	.word	0x40010800
 800376c:	40010c00 	.word	0x40010c00
 8003770:	40011000 	.word	0x40011000
 8003774:	40011400 	.word	0x40011400
 8003778:	40011800 	.word	0x40011800
 800377c:	40011c00 	.word	0x40011c00
 8003780:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <HAL_GPIO_Init+0x324>)
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	43db      	mvns	r3, r3
 800378c:	4913      	ldr	r1, [pc, #76]	; (80037dc <HAL_GPIO_Init+0x324>)
 800378e:	4013      	ands	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d006      	beq.n	80037ac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <HAL_GPIO_Init+0x324>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	490e      	ldr	r1, [pc, #56]	; (80037dc <HAL_GPIO_Init+0x324>)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]
 80037aa:	e006      	b.n	80037ba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_GPIO_Init+0x324>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	4909      	ldr	r1, [pc, #36]	; (80037dc <HAL_GPIO_Init+0x324>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	3301      	adds	r3, #1
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f47f ae7e 	bne.w	80034cc <HAL_GPIO_Init+0x14>
  }
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	372c      	adds	r7, #44	; 0x2c
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr
 80037dc:	40010400 	.word	0x40010400

080037e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	887b      	ldrh	r3, [r7, #2]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e001      	b.n	8003802 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003802:	7bfb      	ldrb	r3, [r7, #15]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr

0800380e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	807b      	strh	r3, [r7, #2]
 800381a:	4613      	mov	r3, r2
 800381c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800381e:	787b      	ldrb	r3, [r7, #1]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003824:	887a      	ldrh	r2, [r7, #2]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800382a:	e003      	b.n	8003834 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800382c:	887b      	ldrh	r3, [r7, #2]
 800382e:	041a      	lsls	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	611a      	str	r2, [r3, #16]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
	...

08003840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e12b      	b.n	8003aaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fe fc7e 	bl	8002168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	; 0x24
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003892:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038a4:	f001 fbd6 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 80038a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4a81      	ldr	r2, [pc, #516]	; (8003ab4 <HAL_I2C_Init+0x274>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d807      	bhi.n	80038c4 <HAL_I2C_Init+0x84>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4a80      	ldr	r2, [pc, #512]	; (8003ab8 <HAL_I2C_Init+0x278>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	bf94      	ite	ls
 80038bc:	2301      	movls	r3, #1
 80038be:	2300      	movhi	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	e006      	b.n	80038d2 <HAL_I2C_Init+0x92>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4a7d      	ldr	r2, [pc, #500]	; (8003abc <HAL_I2C_Init+0x27c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	bf94      	ite	ls
 80038cc:	2301      	movls	r3, #1
 80038ce:	2300      	movhi	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0e7      	b.n	8003aaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a78      	ldr	r2, [pc, #480]	; (8003ac0 <HAL_I2C_Init+0x280>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	0c9b      	lsrs	r3, r3, #18
 80038e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a6a      	ldr	r2, [pc, #424]	; (8003ab4 <HAL_I2C_Init+0x274>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d802      	bhi.n	8003914 <HAL_I2C_Init+0xd4>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	3301      	adds	r3, #1
 8003912:	e009      	b.n	8003928 <HAL_I2C_Init+0xe8>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	4a69      	ldr	r2, [pc, #420]	; (8003ac4 <HAL_I2C_Init+0x284>)
 8003920:	fba2 2303 	umull	r2, r3, r2, r3
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	3301      	adds	r3, #1
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	430b      	orrs	r3, r1
 800392e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800393a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	495c      	ldr	r1, [pc, #368]	; (8003ab4 <HAL_I2C_Init+0x274>)
 8003944:	428b      	cmp	r3, r1
 8003946:	d819      	bhi.n	800397c <HAL_I2C_Init+0x13c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e59      	subs	r1, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	fbb1 f3f3 	udiv	r3, r1, r3
 8003956:	1c59      	adds	r1, r3, #1
 8003958:	f640 73fc 	movw	r3, #4092	; 0xffc
 800395c:	400b      	ands	r3, r1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_I2C_Init+0x138>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1e59      	subs	r1, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003970:	3301      	adds	r3, #1
 8003972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003976:	e051      	b.n	8003a1c <HAL_I2C_Init+0x1dc>
 8003978:	2304      	movs	r3, #4
 800397a:	e04f      	b.n	8003a1c <HAL_I2C_Init+0x1dc>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d111      	bne.n	80039a8 <HAL_I2C_Init+0x168>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1e58      	subs	r0, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	440b      	add	r3, r1
 8003992:	fbb0 f3f3 	udiv	r3, r0, r3
 8003996:	3301      	adds	r3, #1
 8003998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e012      	b.n	80039ce <HAL_I2C_Init+0x18e>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1e58      	subs	r0, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	0099      	lsls	r1, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80039be:	3301      	adds	r3, #1
 80039c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf0c      	ite	eq
 80039c8:	2301      	moveq	r3, #1
 80039ca:	2300      	movne	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_Init+0x196>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e022      	b.n	8003a1c <HAL_I2C_Init+0x1dc>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10e      	bne.n	80039fc <HAL_I2C_Init+0x1bc>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1e58      	subs	r0, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6859      	ldr	r1, [r3, #4]
 80039e6:	460b      	mov	r3, r1
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	440b      	add	r3, r1
 80039ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f0:	3301      	adds	r3, #1
 80039f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039fa:	e00f      	b.n	8003a1c <HAL_I2C_Init+0x1dc>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1e58      	subs	r0, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	0099      	lsls	r1, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	6809      	ldr	r1, [r1, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6911      	ldr	r1, [r2, #16]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68d2      	ldr	r2, [r2, #12]
 8003a56:	4311      	orrs	r1, r2
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	000186a0 	.word	0x000186a0
 8003ab8:	001e847f 	.word	0x001e847f
 8003abc:	003d08ff 	.word	0x003d08ff
 8003ac0:	431bde83 	.word	0x431bde83
 8003ac4:	10624dd3 	.word	0x10624dd3

08003ac8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	817b      	strh	r3, [r7, #10]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7fe fd96 	bl	800260c <HAL_GetTick>
 8003ae0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	f040 80e0 	bne.w	8003cb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2319      	movs	r3, #25
 8003af6:	2201      	movs	r2, #1
 8003af8:	4970      	ldr	r1, [pc, #448]	; (8003cbc <HAL_I2C_Master_Transmit+0x1f4>)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fc9e 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
 8003b08:	e0d3      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_I2C_Master_Transmit+0x50>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e0cc      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d007      	beq.n	8003b3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2221      	movs	r2, #33	; 0x21
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2210      	movs	r2, #16
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	893a      	ldrh	r2, [r7, #8]
 8003b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a50      	ldr	r2, [pc, #320]	; (8003cc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b80:	8979      	ldrh	r1, [r7, #10]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	6a3a      	ldr	r2, [r7, #32]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb08 	bl	800419c <I2C_MasterRequestWrite>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e08d      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bac:	e066      	b.n	8003c7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	6a39      	ldr	r1, [r7, #32]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fd5c 	bl	8004670 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00d      	beq.n	8003bda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d107      	bne.n	8003bd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06b      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d11b      	bne.n	8003c50 <HAL_I2C_Master_Transmit+0x188>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d017      	beq.n	8003c50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	6a39      	ldr	r1, [r7, #32]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fd53 	bl	8004700 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00d      	beq.n	8003c7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d107      	bne.n	8003c78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e01a      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d194      	bne.n	8003bae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	00100002 	.word	0x00100002
 8003cc0:	ffff0000 	.word	0xffff0000

08003cc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	; 0x30
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	817b      	strh	r3, [r7, #10]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cdc:	f7fe fc96 	bl	800260c <HAL_GetTick>
 8003ce0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	f040 824b 	bne.w	8004186 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2319      	movs	r3, #25
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	497f      	ldr	r1, [pc, #508]	; (8003ef8 <HAL_I2C_Master_Receive+0x234>)
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fb9e 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
 8003d08:	e23e      	b.n	8004188 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_I2C_Master_Receive+0x54>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e237      	b.n	8004188 <HAL_I2C_Master_Receive+0x4c4>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d007      	beq.n	8003d3e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2222      	movs	r2, #34	; 0x22
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	893a      	ldrh	r2, [r7, #8]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a5f      	ldr	r2, [pc, #380]	; (8003efc <HAL_I2C_Master_Receive+0x238>)
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d80:	8979      	ldrh	r1, [r7, #10]
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fa8a 	bl	80042a0 <I2C_MasterRequestRead>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e1f8      	b.n	8004188 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d113      	bne.n	8003dc6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e1cc      	b.n	8004160 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d11e      	bne.n	8003e0c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ddc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dde:	b672      	cpsid	i
}
 8003de0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e08:	b662      	cpsie	i
}
 8003e0a:	e035      	b.n	8003e78 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d11e      	bne.n	8003e52 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e24:	b672      	cpsid	i
}
 8003e26:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e4e:	b662      	cpsie	i
}
 8003e50:	e012      	b.n	8003e78 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e78:	e172      	b.n	8004160 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	f200 811f 	bhi.w	80040c2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d123      	bne.n	8003ed4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fc7d 	bl	8004790 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e173      	b.n	8004188 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ed2:	e145      	b.n	8004160 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d152      	bne.n	8003f82 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	4906      	ldr	r1, [pc, #24]	; (8003f00 <HAL_I2C_Master_Receive+0x23c>)
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 faa8 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e148      	b.n	8004188 <HAL_I2C_Master_Receive+0x4c4>
 8003ef6:	bf00      	nop
 8003ef8:	00100002 	.word	0x00100002
 8003efc:	ffff0000 	.word	0xffff0000
 8003f00:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f04:	b672      	cpsid	i
}
 8003f06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f4a:	b662      	cpsie	i
}
 8003f4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f80:	e0ee      	b.n	8004160 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4981      	ldr	r1, [pc, #516]	; (8004190 <HAL_I2C_Master_Receive+0x4cc>)
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa55 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0f5      	b.n	8004188 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003faa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fac:	b672      	cpsid	i
}
 8003fae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fe2:	4b6c      	ldr	r3, [pc, #432]	; (8004194 <HAL_I2C_Master_Receive+0x4d0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	08db      	lsrs	r3, r3, #3
 8003fe8:	4a6b      	ldr	r2, [pc, #428]	; (8004198 <HAL_I2C_Master_Receive+0x4d4>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	0a1a      	lsrs	r2, r3, #8
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	00da      	lsls	r2, r3, #3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d118      	bne.n	800403a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800402a:	b662      	cpsie	i
}
 800402c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e0a6      	b.n	8004188 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b04      	cmp	r3, #4
 8004046:	d1d9      	bne.n	8003ffc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800408a:	b662      	cpsie	i
}
 800408c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040c0:	e04e      	b.n	8004160 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 fb62 	bl	8004790 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e058      	b.n	8004188 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b04      	cmp	r3, #4
 8004114:	d124      	bne.n	8004160 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	2b03      	cmp	r3, #3
 800411c:	d107      	bne.n	800412e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	f47f ae88 	bne.w	8003e7a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
  }
}
 8004188:	4618      	mov	r0, r3
 800418a:	3728      	adds	r7, #40	; 0x28
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	00010004 	.word	0x00010004
 8004194:	20000004 	.word	0x20000004
 8004198:	14f8b589 	.word	0x14f8b589

0800419c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	460b      	mov	r3, r1
 80041aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d006      	beq.n	80041c6 <I2C_MasterRequestWrite+0x2a>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d003      	beq.n	80041c6 <I2C_MasterRequestWrite+0x2a>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c4:	d108      	bne.n	80041d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e00b      	b.n	80041f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	2b12      	cmp	r3, #18
 80041de:	d107      	bne.n	80041f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f91d 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00d      	beq.n	8004224 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004216:	d103      	bne.n	8004220 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800421e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e035      	b.n	8004290 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422c:	d108      	bne.n	8004240 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800422e:	897b      	ldrh	r3, [r7, #10]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800423c:	611a      	str	r2, [r3, #16]
 800423e:	e01b      	b.n	8004278 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004240:	897b      	ldrh	r3, [r7, #10]
 8004242:	11db      	asrs	r3, r3, #7
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 0306 	and.w	r3, r3, #6
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f063 030f 	orn	r3, r3, #15
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	490e      	ldr	r1, [pc, #56]	; (8004298 <I2C_MasterRequestWrite+0xfc>)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f966 	bl	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e010      	b.n	8004290 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4907      	ldr	r1, [pc, #28]	; (800429c <I2C_MasterRequestWrite+0x100>)
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f956 	bl	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	00010008 	.word	0x00010008
 800429c:	00010002 	.word	0x00010002

080042a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	460b      	mov	r3, r1
 80042ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d006      	beq.n	80042da <I2C_MasterRequestRead+0x3a>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d003      	beq.n	80042da <I2C_MasterRequestRead+0x3a>
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042d8:	d108      	bne.n	80042ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e00b      	b.n	8004304 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	2b11      	cmp	r3, #17
 80042f2:	d107      	bne.n	8004304 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004302:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f893 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00d      	beq.n	8004338 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432a:	d103      	bne.n	8004334 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004332:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e079      	b.n	800442c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004340:	d108      	bne.n	8004354 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004342:	897b      	ldrh	r3, [r7, #10]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	611a      	str	r2, [r3, #16]
 8004352:	e05f      	b.n	8004414 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004354:	897b      	ldrh	r3, [r7, #10]
 8004356:	11db      	asrs	r3, r3, #7
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0306 	and.w	r3, r3, #6
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f063 030f 	orn	r3, r3, #15
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4930      	ldr	r1, [pc, #192]	; (8004434 <I2C_MasterRequestRead+0x194>)
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f8dc 	bl	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e054      	b.n	800442c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004382:	897b      	ldrh	r3, [r7, #10]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4929      	ldr	r1, [pc, #164]	; (8004438 <I2C_MasterRequestRead+0x198>)
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f8cc 	bl	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e044      	b.n	800442c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f831 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ee:	d103      	bne.n	80043f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e017      	b.n	800442c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043fc:	897b      	ldrh	r3, [r7, #10]
 80043fe:	11db      	asrs	r3, r3, #7
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 0306 	and.w	r3, r3, #6
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f063 030e 	orn	r3, r3, #14
 800440c:	b2da      	uxtb	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	4907      	ldr	r1, [pc, #28]	; (8004438 <I2C_MasterRequestRead+0x198>)
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f888 	bl	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	00010008 	.word	0x00010008
 8004438:	00010002 	.word	0x00010002

0800443c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800444c:	e048      	b.n	80044e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d044      	beq.n	80044e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004456:	f7fe f8d9 	bl	800260c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d139      	bne.n	80044e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d10d      	bne.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	43da      	mvns	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4013      	ands	r3, r2
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	e00c      	b.n	80044ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	43da      	mvns	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d116      	bne.n	80044e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e023      	b.n	8004528 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d10d      	bne.n	8004506 <I2C_WaitOnFlagUntilTimeout+0xca>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	43da      	mvns	r2, r3
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4013      	ands	r3, r2
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	e00c      	b.n	8004520 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	43da      	mvns	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4013      	ands	r3, r2
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	429a      	cmp	r2, r3
 8004524:	d093      	beq.n	800444e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800453e:	e071      	b.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454e:	d123      	bne.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004568:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f043 0204 	orr.w	r2, r3, #4
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e067      	b.n	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d041      	beq.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a0:	f7fe f834 	bl	800260c <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d302      	bcc.n	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d136      	bne.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d10c      	bne.n	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	43da      	mvns	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4013      	ands	r3, r2
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bf14      	ite	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	2300      	moveq	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	e00b      	b.n	80045f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	43da      	mvns	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4013      	ands	r3, r2
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d016      	beq.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e021      	b.n	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10c      	bne.n	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	43da      	mvns	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	4013      	ands	r3, r2
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e00b      	b.n	8004660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	43da      	mvns	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4013      	ands	r3, r2
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf14      	ite	ne
 800465a:	2301      	movne	r3, #1
 800465c:	2300      	moveq	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	f47f af6d 	bne.w	8004540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800467c:	e034      	b.n	80046e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f8e3 	bl	800484a <I2C_IsAcknowledgeFailed>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e034      	b.n	80046f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d028      	beq.n	80046e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fd ffb9 	bl	800260c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d11d      	bne.n	80046e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b80      	cmp	r3, #128	; 0x80
 80046b8:	d016      	beq.n	80046e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e007      	b.n	80046f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b80      	cmp	r3, #128	; 0x80
 80046f4:	d1c3      	bne.n	800467e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800470c:	e034      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f89b 	bl	800484a <I2C_IsAcknowledgeFailed>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e034      	b.n	8004788 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d028      	beq.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004726:	f7fd ff71 	bl	800260c <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	429a      	cmp	r2, r3
 8004734:	d302      	bcc.n	800473c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d11d      	bne.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b04      	cmp	r3, #4
 8004748:	d016      	beq.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e007      	b.n	8004788 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b04      	cmp	r3, #4
 8004784:	d1c3      	bne.n	800470e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800479c:	e049      	b.n	8004832 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d119      	bne.n	80047e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0210 	mvn.w	r2, #16
 80047b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e030      	b.n	8004842 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e0:	f7fd ff14 	bl	800260c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d302      	bcc.n	80047f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d11d      	bne.n	8004832 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d016      	beq.n	8004832 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f043 0220 	orr.w	r2, r3, #32
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e007      	b.n	8004842 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d1ae      	bne.n	800479e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004860:	d11b      	bne.n	800489a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800486a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f043 0204 	orr.w	r2, r3, #4
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
	...

080048a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_PWR_EnableBkUpAccess+0x14>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	bf00      	nop
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	420e0020 	.word	0x420e0020

080048c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e272      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8087 	beq.w	80049ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048e0:	4b92      	ldr	r3, [pc, #584]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d00c      	beq.n	8004906 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048ec:	4b8f      	ldr	r3, [pc, #572]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 030c 	and.w	r3, r3, #12
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d112      	bne.n	800491e <HAL_RCC_OscConfig+0x5e>
 80048f8:	4b8c      	ldr	r3, [pc, #560]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004904:	d10b      	bne.n	800491e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004906:	4b89      	ldr	r3, [pc, #548]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d06c      	beq.n	80049ec <HAL_RCC_OscConfig+0x12c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d168      	bne.n	80049ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e24c      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x76>
 8004928:	4b80      	ldr	r3, [pc, #512]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a7f      	ldr	r2, [pc, #508]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 800492e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e02e      	b.n	8004994 <HAL_RCC_OscConfig+0xd4>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0x98>
 800493e:	4b7b      	ldr	r3, [pc, #492]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7a      	ldr	r2, [pc, #488]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b78      	ldr	r3, [pc, #480]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a77      	ldr	r2, [pc, #476]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e01d      	b.n	8004994 <HAL_RCC_OscConfig+0xd4>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004960:	d10c      	bne.n	800497c <HAL_RCC_OscConfig+0xbc>
 8004962:	4b72      	ldr	r3, [pc, #456]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a71      	ldr	r2, [pc, #452]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	4b6f      	ldr	r3, [pc, #444]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a6e      	ldr	r2, [pc, #440]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e00b      	b.n	8004994 <HAL_RCC_OscConfig+0xd4>
 800497c:	4b6b      	ldr	r3, [pc, #428]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a6a      	ldr	r2, [pc, #424]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	4b68      	ldr	r3, [pc, #416]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a67      	ldr	r2, [pc, #412]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 800498e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004992:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d013      	beq.n	80049c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fd fe36 	bl	800260c <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a4:	f7fd fe32 	bl	800260c <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	; 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e200      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b6:	4b5d      	ldr	r3, [pc, #372]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCC_OscConfig+0xe4>
 80049c2:	e014      	b.n	80049ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fd fe22 	bl	800260c <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fd fe1e 	bl	800260c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	; 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e1ec      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049de:	4b53      	ldr	r3, [pc, #332]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x10c>
 80049ea:	e000      	b.n	80049ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d063      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049fa:	4b4c      	ldr	r3, [pc, #304]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f003 030c 	and.w	r3, r3, #12
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00b      	beq.n	8004a1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a06:	4b49      	ldr	r3, [pc, #292]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d11c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x18c>
 8004a12:	4b46      	ldr	r3, [pc, #280]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d116      	bne.n	8004a4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1e:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <HAL_RCC_OscConfig+0x176>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d001      	beq.n	8004a36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e1c0      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a36:	4b3d      	ldr	r3, [pc, #244]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4939      	ldr	r1, [pc, #228]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4a:	e03a      	b.n	8004ac2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d020      	beq.n	8004a96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a54:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <HAL_RCC_OscConfig+0x270>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5a:	f7fd fdd7 	bl	800260c <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a62:	f7fd fdd3 	bl	800260c <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e1a1      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a74:	4b2d      	ldr	r3, [pc, #180]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a80:	4b2a      	ldr	r3, [pc, #168]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4927      	ldr	r1, [pc, #156]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]
 8004a94:	e015      	b.n	8004ac2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a96:	4b26      	ldr	r3, [pc, #152]	; (8004b30 <HAL_RCC_OscConfig+0x270>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9c:	f7fd fdb6 	bl	800260c <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa4:	f7fd fdb2 	bl	800260c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e180      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d03a      	beq.n	8004b44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d019      	beq.n	8004b0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ad6:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004adc:	f7fd fd96 	bl	800260c <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae4:	f7fd fd92 	bl	800260c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e160      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <HAL_RCC_OscConfig+0x26c>)
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b02:	2001      	movs	r0, #1
 8004b04:	f000 fafe 	bl	8005104 <RCC_Delay>
 8004b08:	e01c      	b.n	8004b44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b10:	f7fd fd7c 	bl	800260c <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b16:	e00f      	b.n	8004b38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b18:	f7fd fd78 	bl	800260c <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d908      	bls.n	8004b38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e146      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	42420000 	.word	0x42420000
 8004b34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b38:	4b92      	ldr	r3, [pc, #584]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e9      	bne.n	8004b18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80a6 	beq.w	8004c9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b52:	2300      	movs	r3, #0
 8004b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b56:	4b8b      	ldr	r3, [pc, #556]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10d      	bne.n	8004b7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b62:	4b88      	ldr	r3, [pc, #544]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	4a87      	ldr	r2, [pc, #540]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	61d3      	str	r3, [r2, #28]
 8004b6e:	4b85      	ldr	r3, [pc, #532]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7e:	4b82      	ldr	r3, [pc, #520]	; (8004d88 <HAL_RCC_OscConfig+0x4c8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d118      	bne.n	8004bbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b8a:	4b7f      	ldr	r3, [pc, #508]	; (8004d88 <HAL_RCC_OscConfig+0x4c8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a7e      	ldr	r2, [pc, #504]	; (8004d88 <HAL_RCC_OscConfig+0x4c8>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b96:	f7fd fd39 	bl	800260c <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b9e:	f7fd fd35 	bl	800260c <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b64      	cmp	r3, #100	; 0x64
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e103      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb0:	4b75      	ldr	r3, [pc, #468]	; (8004d88 <HAL_RCC_OscConfig+0x4c8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x312>
 8004bc4:	4b6f      	ldr	r3, [pc, #444]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	4a6e      	ldr	r2, [pc, #440]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6213      	str	r3, [r2, #32]
 8004bd0:	e02d      	b.n	8004c2e <HAL_RCC_OscConfig+0x36e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x334>
 8004bda:	4b6a      	ldr	r3, [pc, #424]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	4a69      	ldr	r2, [pc, #420]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	6213      	str	r3, [r2, #32]
 8004be6:	4b67      	ldr	r3, [pc, #412]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	4a66      	ldr	r2, [pc, #408]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004bec:	f023 0304 	bic.w	r3, r3, #4
 8004bf0:	6213      	str	r3, [r2, #32]
 8004bf2:	e01c      	b.n	8004c2e <HAL_RCC_OscConfig+0x36e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2b05      	cmp	r3, #5
 8004bfa:	d10c      	bne.n	8004c16 <HAL_RCC_OscConfig+0x356>
 8004bfc:	4b61      	ldr	r3, [pc, #388]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	4a60      	ldr	r2, [pc, #384]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004c02:	f043 0304 	orr.w	r3, r3, #4
 8004c06:	6213      	str	r3, [r2, #32]
 8004c08:	4b5e      	ldr	r3, [pc, #376]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	4a5d      	ldr	r2, [pc, #372]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	6213      	str	r3, [r2, #32]
 8004c14:	e00b      	b.n	8004c2e <HAL_RCC_OscConfig+0x36e>
 8004c16:	4b5b      	ldr	r3, [pc, #364]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	4a5a      	ldr	r2, [pc, #360]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	6213      	str	r3, [r2, #32]
 8004c22:	4b58      	ldr	r3, [pc, #352]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4a57      	ldr	r2, [pc, #348]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004c28:	f023 0304 	bic.w	r3, r3, #4
 8004c2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d015      	beq.n	8004c62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c36:	f7fd fce9 	bl	800260c <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fd fce5 	bl	800260c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e0b1      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c54:	4b4b      	ldr	r3, [pc, #300]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0ee      	beq.n	8004c3e <HAL_RCC_OscConfig+0x37e>
 8004c60:	e014      	b.n	8004c8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c62:	f7fd fcd3 	bl	800260c <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6a:	f7fd fccf 	bl	800260c <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e09b      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c80:	4b40      	ldr	r3, [pc, #256]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ee      	bne.n	8004c6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d105      	bne.n	8004c9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c92:	4b3c      	ldr	r3, [pc, #240]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4a3b      	ldr	r2, [pc, #236]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8087 	beq.w	8004db6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ca8:	4b36      	ldr	r3, [pc, #216]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 030c 	and.w	r3, r3, #12
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d061      	beq.n	8004d78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d146      	bne.n	8004d4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cbc:	4b33      	ldr	r3, [pc, #204]	; (8004d8c <HAL_RCC_OscConfig+0x4cc>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fd fca3 	bl	800260c <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fd fc9f 	bl	800260c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e06d      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cdc:	4b29      	ldr	r3, [pc, #164]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf0:	d108      	bne.n	8004d04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cf2:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	4921      	ldr	r1, [pc, #132]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d04:	4b1f      	ldr	r3, [pc, #124]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a19      	ldr	r1, [r3, #32]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	430b      	orrs	r3, r1
 8004d16:	491b      	ldr	r1, [pc, #108]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d1c:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <HAL_RCC_OscConfig+0x4cc>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d22:	f7fd fc73 	bl	800260c <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2a:	f7fd fc6f 	bl	800260c <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e03d      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x46a>
 8004d48:	e035      	b.n	8004db6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4a:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <HAL_RCC_OscConfig+0x4cc>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d50:	f7fd fc5c 	bl	800260c <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fd fc58 	bl	800260c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e026      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_OscConfig+0x4c4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x498>
 8004d76:	e01e      	b.n	8004db6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e019      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <HAL_RCC_OscConfig+0x500>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d106      	bne.n	8004db2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d001      	beq.n	8004db6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40021000 	.word	0x40021000

08004dc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0d0      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b6a      	ldr	r3, [pc, #424]	; (8004f84 <HAL_RCC_ClockConfig+0x1c0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d910      	bls.n	8004e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b67      	ldr	r3, [pc, #412]	; (8004f84 <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 0207 	bic.w	r2, r3, #7
 8004dee:	4965      	ldr	r1, [pc, #404]	; (8004f84 <HAL_RCC_ClockConfig+0x1c0>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b63      	ldr	r3, [pc, #396]	; (8004f84 <HAL_RCC_ClockConfig+0x1c0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0b8      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e20:	4b59      	ldr	r3, [pc, #356]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4a58      	ldr	r2, [pc, #352]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004e26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e38:	4b53      	ldr	r3, [pc, #332]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4a52      	ldr	r2, [pc, #328]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e44:	4b50      	ldr	r3, [pc, #320]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	494d      	ldr	r1, [pc, #308]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d040      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d107      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	4b47      	ldr	r3, [pc, #284]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d115      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e07f      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d107      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e82:	4b41      	ldr	r3, [pc, #260]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e073      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e92:	4b3d      	ldr	r3, [pc, #244]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e06b      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ea2:	4b39      	ldr	r3, [pc, #228]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f023 0203 	bic.w	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4936      	ldr	r1, [pc, #216]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eb4:	f7fd fbaa 	bl	800260c <HAL_GetTick>
 8004eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ebc:	f7fd fba6 	bl	800260c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e053      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	4b2d      	ldr	r3, [pc, #180]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f003 020c 	and.w	r2, r3, #12
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d1eb      	bne.n	8004ebc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d210      	bcs.n	8004f14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 0207 	bic.w	r2, r3, #7
 8004efa:	4922      	ldr	r1, [pc, #136]	; (8004f84 <HAL_RCC_ClockConfig+0x1c0>)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b20      	ldr	r3, [pc, #128]	; (8004f84 <HAL_RCC_ClockConfig+0x1c0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e032      	b.n	8004f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4916      	ldr	r1, [pc, #88]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f3e:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	490e      	ldr	r1, [pc, #56]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f52:	f000 f821 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8004f56:	4602      	mov	r2, r0
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	490a      	ldr	r1, [pc, #40]	; (8004f8c <HAL_RCC_ClockConfig+0x1c8>)
 8004f64:	5ccb      	ldrb	r3, [r1, r3]
 8004f66:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6a:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <HAL_RCC_ClockConfig+0x1cc>)
 8004f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_RCC_ClockConfig+0x1d0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fd fa58 	bl	8002428 <HAL_InitTick>

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40022000 	.word	0x40022000
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	0800bd24 	.word	0x0800bd24
 8004f90:	20000004 	.word	0x20000004
 8004f94:	20000008 	.word	0x20000008

08004f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	2300      	movs	r3, #0
 8004fac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004fb2:	4b1e      	ldr	r3, [pc, #120]	; (800502c <HAL_RCC_GetSysClockFreq+0x94>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 030c 	and.w	r3, r3, #12
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d002      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x30>
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d003      	beq.n	8004fce <HAL_RCC_GetSysClockFreq+0x36>
 8004fc6:	e027      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fc8:	4b19      	ldr	r3, [pc, #100]	; (8005030 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fca:	613b      	str	r3, [r7, #16]
      break;
 8004fcc:	e027      	b.n	800501e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	0c9b      	lsrs	r3, r3, #18
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	4a17      	ldr	r2, [pc, #92]	; (8005034 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fd8:	5cd3      	ldrb	r3, [r2, r3]
 8004fda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fe6:	4b11      	ldr	r3, [pc, #68]	; (800502c <HAL_RCC_GetSysClockFreq+0x94>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	0c5b      	lsrs	r3, r3, #17
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	4a11      	ldr	r2, [pc, #68]	; (8005038 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ff2:	5cd3      	ldrb	r3, [r2, r3]
 8004ff4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ffa:	fb03 f202 	mul.w	r2, r3, r2
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	e004      	b.n	8005012 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a0c      	ldr	r2, [pc, #48]	; (800503c <HAL_RCC_GetSysClockFreq+0xa4>)
 800500c:	fb02 f303 	mul.w	r3, r2, r3
 8005010:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	613b      	str	r3, [r7, #16]
      break;
 8005016:	e002      	b.n	800501e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_RCC_GetSysClockFreq+0x98>)
 800501a:	613b      	str	r3, [r7, #16]
      break;
 800501c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800501e:	693b      	ldr	r3, [r7, #16]
}
 8005020:	4618      	mov	r0, r3
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000
 8005030:	007a1200 	.word	0x007a1200
 8005034:	0800bd3c 	.word	0x0800bd3c
 8005038:	0800bd4c 	.word	0x0800bd4c
 800503c:	003d0900 	.word	0x003d0900

08005040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005044:	4b02      	ldr	r3, [pc, #8]	; (8005050 <HAL_RCC_GetHCLKFreq+0x10>)
 8005046:	681b      	ldr	r3, [r3, #0]
}
 8005048:	4618      	mov	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr
 8005050:	20000004 	.word	0x20000004

08005054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005058:	f7ff fff2 	bl	8005040 <HAL_RCC_GetHCLKFreq>
 800505c:	4602      	mov	r2, r0
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	4903      	ldr	r1, [pc, #12]	; (8005078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800506a:	5ccb      	ldrb	r3, [r1, r3]
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40021000 	.word	0x40021000
 8005078:	0800bd34 	.word	0x0800bd34

0800507c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005080:	f7ff ffde 	bl	8005040 <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	0adb      	lsrs	r3, r3, #11
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4903      	ldr	r1, [pc, #12]	; (80050a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40021000 	.word	0x40021000
 80050a0:	0800bd34 	.word	0x0800bd34

080050a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	220f      	movs	r2, #15
 80050b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050b4:	4b11      	ldr	r3, [pc, #68]	; (80050fc <HAL_RCC_GetClockConfig+0x58>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f003 0203 	and.w	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050c0:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <HAL_RCC_GetClockConfig+0x58>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_RCC_GetClockConfig+0x58>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80050d8:	4b08      	ldr	r3, [pc, #32]	; (80050fc <HAL_RCC_GetClockConfig+0x58>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	08db      	lsrs	r3, r3, #3
 80050de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050e6:	4b06      	ldr	r3, [pc, #24]	; (8005100 <HAL_RCC_GetClockConfig+0x5c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0207 	and.w	r2, r3, #7
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	40021000 	.word	0x40021000
 8005100:	40022000 	.word	0x40022000

08005104 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800510c:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <RCC_Delay+0x34>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0a      	ldr	r2, [pc, #40]	; (800513c <RCC_Delay+0x38>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	0a5b      	lsrs	r3, r3, #9
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005120:	bf00      	nop
  }
  while (Delay --);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1e5a      	subs	r2, r3, #1
 8005126:	60fa      	str	r2, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1f9      	bne.n	8005120 <RCC_Delay+0x1c>
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr
 8005138:	20000004 	.word	0x20000004
 800513c:	10624dd3 	.word	0x10624dd3

08005140 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d07d      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800515c:	2300      	movs	r3, #0
 800515e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005160:	4b4f      	ldr	r3, [pc, #316]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10d      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800516c:	4b4c      	ldr	r3, [pc, #304]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	4a4b      	ldr	r2, [pc, #300]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005176:	61d3      	str	r3, [r2, #28]
 8005178:	4b49      	ldr	r3, [pc, #292]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005184:	2301      	movs	r3, #1
 8005186:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005188:	4b46      	ldr	r3, [pc, #280]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d118      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005194:	4b43      	ldr	r3, [pc, #268]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a42      	ldr	r2, [pc, #264]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800519a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800519e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051a0:	f7fd fa34 	bl	800260c <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a6:	e008      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a8:	f7fd fa30 	bl	800260c <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b64      	cmp	r3, #100	; 0x64
 80051b4:	d901      	bls.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e06d      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ba:	4b3a      	ldr	r3, [pc, #232]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f0      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051c6:	4b36      	ldr	r3, [pc, #216]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d02e      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d027      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051e4:	4b2e      	ldr	r3, [pc, #184]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051ee:	4b2e      	ldr	r3, [pc, #184]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051f4:	4b2c      	ldr	r3, [pc, #176]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051fa:	4a29      	ldr	r2, [pc, #164]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d014      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520a:	f7fd f9ff 	bl	800260c <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005210:	e00a      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005212:	f7fd f9fb 	bl	800260c <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005220:	4293      	cmp	r3, r2
 8005222:	d901      	bls.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e036      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005228:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0ee      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005234:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4917      	ldr	r1, [pc, #92]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005242:	4313      	orrs	r3, r2
 8005244:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d105      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524c:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005256:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005264:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	490b      	ldr	r1, [pc, #44]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005272:	4313      	orrs	r3, r2
 8005274:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b00      	cmp	r3, #0
 8005280:	d008      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005282:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	4904      	ldr	r1, [pc, #16]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40007000 	.word	0x40007000
 80052a8:	42420440 	.word	0x42420440

080052ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	2300      	movs	r3, #0
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	2300      	movs	r3, #0
 80052be:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	2300      	movs	r3, #0
 80052c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	2b0f      	cmp	r3, #15
 80052ce:	f200 80af 	bhi.w	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80052d2:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80052d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d8:	080053af 	.word	0x080053af
 80052dc:	08005415 	.word	0x08005415
 80052e0:	08005431 	.word	0x08005431
 80052e4:	0800539f 	.word	0x0800539f
 80052e8:	08005431 	.word	0x08005431
 80052ec:	08005431 	.word	0x08005431
 80052f0:	08005431 	.word	0x08005431
 80052f4:	080053a7 	.word	0x080053a7
 80052f8:	08005431 	.word	0x08005431
 80052fc:	08005431 	.word	0x08005431
 8005300:	08005431 	.word	0x08005431
 8005304:	08005431 	.word	0x08005431
 8005308:	08005431 	.word	0x08005431
 800530c:	08005431 	.word	0x08005431
 8005310:	08005431 	.word	0x08005431
 8005314:	08005319 	.word	0x08005319
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005318:	4b4a      	ldr	r3, [pc, #296]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800531e:	4b49      	ldr	r3, [pc, #292]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 8084 	beq.w	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	0c9b      	lsrs	r3, r3, #18
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	4a44      	ldr	r2, [pc, #272]	; (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8005336:	5cd3      	ldrb	r3, [r2, r3]
 8005338:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d015      	beq.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005344:	4b3f      	ldr	r3, [pc, #252]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	0c5b      	lsrs	r3, r3, #17
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	4a3f      	ldr	r2, [pc, #252]	; (800544c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005350:	5cd3      	ldrb	r3, [r2, r3]
 8005352:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00d      	beq.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800535e:	4a3c      	ldr	r2, [pc, #240]	; (8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	fbb2 f2f3 	udiv	r2, r2, r3
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	fb02 f303 	mul.w	r3, r2, r3
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e004      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4a38      	ldr	r2, [pc, #224]	; (8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8005374:	fb02 f303 	mul.w	r3, r2, r3
 8005378:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800537a:	4b32      	ldr	r3, [pc, #200]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005386:	d102      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800538c:	e052      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	4a31      	ldr	r2, [pc, #196]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	61bb      	str	r3, [r7, #24]
      break;
 800539c:	e04a      	b.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800539e:	f7ff fdfb 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 80053a2:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80053a4:	e049      	b.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80053a6:	f7ff fdf7 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 80053aa:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80053ac:	e045      	b.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80053ae:	4b25      	ldr	r3, [pc, #148]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053be:	d108      	bne.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80053ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	e01f      	b.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053dc:	d109      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80053de:	4b19      	ldr	r3, [pc, #100]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80053ea:	f649 4340 	movw	r3, #40000	; 0x9c40
 80053ee:	61bb      	str	r3, [r7, #24]
 80053f0:	e00f      	b.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053fc:	d11c      	bne.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80053fe:	4b11      	ldr	r3, [pc, #68]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d016      	beq.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800540a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800540e:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005410:	e012      	b.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005412:	e011      	b.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005414:	f7ff fe32 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 8005418:	4602      	mov	r2, r0
 800541a:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	0b9b      	lsrs	r3, r3, #14
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	3301      	adds	r3, #1
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fbb2 f3f3 	udiv	r3, r2, r3
 800542c:	61bb      	str	r3, [r7, #24]
      break;
 800542e:	e004      	b.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8005430:	bf00      	nop
 8005432:	e002      	b.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8005434:	bf00      	nop
 8005436:	e000      	b.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8005438:	bf00      	nop
    }
  }
  return (frequency);
 800543a:	69bb      	ldr	r3, [r7, #24]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	0800bd50 	.word	0x0800bd50
 800544c:	0800bd60 	.word	0x0800bd60
 8005450:	007a1200 	.word	0x007a1200
 8005454:	003d0900 	.word	0x003d0900
 8005458:	aaaaaaab 	.word	0xaaaaaaab

0800545c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e07a      	b.n	8005568 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	7c5b      	ldrb	r3, [r3, #17]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d105      	bne.n	8005488 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fc fec0 	bl	8002208 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f9be 	bl	8005810 <HAL_RTC_WaitForSynchro>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2204      	movs	r2, #4
 800549e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e061      	b.n	8005568 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa77 	bl	8005998 <RTC_EnterInitMode>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d004      	beq.n	80054ba <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2204      	movs	r2, #4
 80054b4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e056      	b.n	8005568 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0207 	bic.w	r2, r2, #7
 80054c8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80054d2:	4b27      	ldr	r3, [pc, #156]	; (8005570 <HAL_RTC_Init+0x114>)
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	4a26      	ldr	r2, [pc, #152]	; (8005570 <HAL_RTC_Init+0x114>)
 80054d8:	f023 0301 	bic.w	r3, r3, #1
 80054dc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80054de:	4b24      	ldr	r3, [pc, #144]	; (8005570 <HAL_RTC_Init+0x114>)
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	4921      	ldr	r1, [pc, #132]	; (8005570 <HAL_RTC_Init+0x114>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d003      	beq.n	8005502 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	e00e      	b.n	8005520 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005502:	2001      	movs	r0, #1
 8005504:	f7ff fed2 	bl	80052ac <HAL_RCCEx_GetPeriphCLKFreq>
 8005508:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2204      	movs	r2, #4
 8005514:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e026      	b.n	8005568 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3b01      	subs	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	0c1a      	lsrs	r2, r3, #16
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f002 020f 	and.w	r2, r2, #15
 800552c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	b292      	uxth	r2, r2
 8005536:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fa55 	bl	80059e8 <RTC_ExitInitMode>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2204      	movs	r2, #4
 8005548:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e00c      	b.n	8005568 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005566:	2300      	movs	r3, #0
  }
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40006c00 	.word	0x40006c00

08005574 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_RTC_SetTime+0x20>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e080      	b.n	800569a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	7c1b      	ldrb	r3, [r3, #16]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_RTC_SetTime+0x30>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e07a      	b.n	800569a <HAL_RTC_SetTime+0x126>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2202      	movs	r2, #2
 80055ae:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d113      	bne.n	80055de <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80055c0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	4619      	mov	r1, r3
 80055ca:	460b      	mov	r3, r1
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	1a5b      	subs	r3, r3, r1
 80055d0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80055d2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80055d8:	4413      	add	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e01e      	b.n	800561c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fa28 	bl	8005a38 <RTC_Bcd2ToByte>
 80055e8:	4603      	mov	r3, r0
 80055ea:	461a      	mov	r2, r3
 80055ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80055f0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fa1d 	bl	8005a38 <RTC_Bcd2ToByte>
 80055fe:	4603      	mov	r3, r0
 8005600:	461a      	mov	r2, r3
 8005602:	4613      	mov	r3, r2
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800560a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	789b      	ldrb	r3, [r3, #2]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fa11 	bl	8005a38 <RTC_Bcd2ToByte>
 8005616:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005618:	4423      	add	r3, r4
 800561a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800561c:	6979      	ldr	r1, [r7, #20]
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f953 	bl	80058ca <RTC_WriteTimeCounter>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d007      	beq.n	800563a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2204      	movs	r2, #4
 800562e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e02f      	b.n	800569a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0205 	bic.w	r2, r2, #5
 8005648:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f964 	bl	8005918 <RTC_ReadAlarmCounter>
 8005650:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d018      	beq.n	800568c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	429a      	cmp	r2, r3
 8005660:	d214      	bcs.n	800568c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005668:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800566c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800566e:	6939      	ldr	r1, [r7, #16]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f96a 	bl	800594a <RTC_WriteAlarmCounter>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2204      	movs	r2, #4
 8005680:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e006      	b.n	800569a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005698:	2300      	movs	r3, #0
  }
}
 800569a:	4618      	mov	r0, r3
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd90      	pop	{r4, r7, pc}
	...

080056a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	2300      	movs	r3, #0
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <HAL_RTC_SetDate+0x24>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e097      	b.n	80057fc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	7c1b      	ldrb	r3, [r3, #16]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_RTC_SetDate+0x34>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e091      	b.n	80057fc <HAL_RTC_SetDate+0x158>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2202      	movs	r2, #2
 80056e2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10c      	bne.n	8005704 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	78da      	ldrb	r2, [r3, #3]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	785a      	ldrb	r2, [r3, #1]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	789a      	ldrb	r2, [r3, #2]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	739a      	strb	r2, [r3, #14]
 8005702:	e01a      	b.n	800573a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	78db      	ldrb	r3, [r3, #3]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f995 	bl	8005a38 <RTC_Bcd2ToByte>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f98c 	bl	8005a38 <RTC_Bcd2ToByte>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	789b      	ldrb	r3, [r3, #2]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f983 	bl	8005a38 <RTC_Bcd2ToByte>
 8005732:	4603      	mov	r3, r0
 8005734:	461a      	mov	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	7bdb      	ldrb	r3, [r3, #15]
 800573e:	4618      	mov	r0, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	7b59      	ldrb	r1, [r3, #13]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	7b9b      	ldrb	r3, [r3, #14]
 8005748:	461a      	mov	r2, r3
 800574a:	f000 f993 	bl	8005a74 <RTC_WeekDayNum>
 800574e:	4603      	mov	r3, r0
 8005750:	461a      	mov	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	7b1a      	ldrb	r2, [r3, #12]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f883 	bl	800586a <RTC_ReadTimeCounter>
 8005764:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4a26      	ldr	r2, [pc, #152]	; (8005804 <HAL_RTC_SetDate+0x160>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	0adb      	lsrs	r3, r3, #11
 8005770:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b18      	cmp	r3, #24
 8005776:	d93a      	bls.n	80057ee <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4a23      	ldr	r2, [pc, #140]	; (8005808 <HAL_RTC_SetDate+0x164>)
 800577c:	fba2 2303 	umull	r2, r3, r2, r3
 8005780:	091b      	lsrs	r3, r3, #4
 8005782:	4a22      	ldr	r2, [pc, #136]	; (800580c <HAL_RTC_SetDate+0x168>)
 8005784:	fb02 f303 	mul.w	r3, r2, r3
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800578e:	69f9      	ldr	r1, [r7, #28]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f89a 	bl	80058ca <RTC_WriteTimeCounter>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d007      	beq.n	80057ac <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2204      	movs	r2, #4
 80057a0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e027      	b.n	80057fc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f8b3 	bl	8005918 <RTC_ReadAlarmCounter>
 80057b2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	d018      	beq.n	80057ee <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d214      	bcs.n	80057ee <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80057ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80057ce:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80057d0:	69b9      	ldr	r1, [r7, #24]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f8b9 	bl	800594a <RTC_WriteAlarmCounter>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2204      	movs	r2, #4
 80057e2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e006      	b.n	80057fc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3720      	adds	r7, #32
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	91a2b3c5 	.word	0x91a2b3c5
 8005808:	aaaaaaab 	.word	0xaaaaaaab
 800580c:	00015180 	.word	0x00015180

08005810 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e01d      	b.n	8005862 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0208 	bic.w	r2, r2, #8
 8005834:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005836:	f7fc fee9 	bl	800260c <HAL_GetTick>
 800583a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800583c:	e009      	b.n	8005852 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800583e:	f7fc fee5 	bl	800260c <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800584c:	d901      	bls.n	8005852 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e007      	b.n	8005862 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ee      	beq.n	800583e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800586a:	b480      	push	{r7}
 800586c:	b087      	sub	sp, #28
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	827b      	strh	r3, [r7, #18]
 8005876:	2300      	movs	r3, #0
 8005878:	823b      	strh	r3, [r7, #16]
 800587a:	2300      	movs	r3, #0
 800587c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800589a:	8a7a      	ldrh	r2, [r7, #18]
 800589c:	8a3b      	ldrh	r3, [r7, #16]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d008      	beq.n	80058b4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80058a2:	8a3b      	ldrh	r3, [r7, #16]
 80058a4:	041a      	lsls	r2, r3, #16
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e004      	b.n	80058be <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80058b4:	8a7b      	ldrh	r3, [r7, #18]
 80058b6:	041a      	lsls	r2, r3, #16
 80058b8:	89fb      	ldrh	r3, [r7, #14]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80058be:	697b      	ldr	r3, [r7, #20]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr

080058ca <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f85d 	bl	8005998 <RTC_EnterInitMode>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
 80058e8:	e011      	b.n	800590e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	0c12      	lsrs	r2, r2, #16
 80058f2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	b292      	uxth	r2, r2
 80058fc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f872 	bl	80059e8 <RTC_ExitInitMode>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	81fb      	strh	r3, [r7, #14]
 8005924:	2300      	movs	r3, #0
 8005926:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005938:	89fb      	ldrh	r3, [r7, #14]
 800593a:	041a      	lsls	r2, r3, #16
 800593c:	89bb      	ldrh	r3, [r7, #12]
 800593e:	4313      	orrs	r3, r2
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	bc80      	pop	{r7}
 8005948:	4770      	bx	lr

0800594a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f81d 	bl	8005998 <RTC_EnterInitMode>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
 8005968:	e011      	b.n	800598e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	0c12      	lsrs	r2, r2, #16
 8005972:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	b292      	uxth	r2, r2
 800597c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f832 	bl	80059e8 <RTC_ExitInitMode>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800598e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80059a4:	f7fc fe32 	bl	800260c <HAL_GetTick>
 80059a8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80059aa:	e009      	b.n	80059c0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80059ac:	f7fc fe2e 	bl	800260c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ba:	d901      	bls.n	80059c0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e00f      	b.n	80059e0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0ee      	beq.n	80059ac <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0210 	orr.w	r2, r2, #16
 80059dc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0210 	bic.w	r2, r2, #16
 8005a02:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005a04:	f7fc fe02 	bl	800260c <HAL_GetTick>
 8005a08:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a0a:	e009      	b.n	8005a20 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a0c:	f7fc fdfe 	bl	800260c <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a1a:	d901      	bls.n	8005a20 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e007      	b.n	8005a30 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0ee      	beq.n	8005a0c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	091b      	lsrs	r3, r3, #4
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	4413      	add	r3, r2
 8005a66:	b2db      	uxtb	r3, r3
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr
	...

08005a74 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	70fb      	strb	r3, [r7, #3]
 8005a80:	4613      	mov	r3, r2
 8005a82:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60bb      	str	r3, [r7, #8]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005a92:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d82d      	bhi.n	8005af6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005a9a:	78fa      	ldrb	r2, [r7, #3]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	4413      	add	r3, r2
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	1a9b      	subs	r3, r3, r2
 8005aa6:	4a2c      	ldr	r2, [pc, #176]	; (8005b58 <RTC_WeekDayNum+0xe4>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	085a      	lsrs	r2, r3, #1
 8005aae:	78bb      	ldrb	r3, [r7, #2]
 8005ab0:	441a      	add	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	089b      	lsrs	r3, r3, #2
 8005abc:	441a      	add	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	4926      	ldr	r1, [pc, #152]	; (8005b5c <RTC_WeekDayNum+0xe8>)
 8005ac4:	fba1 1303 	umull	r1, r3, r1, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	4922      	ldr	r1, [pc, #136]	; (8005b5c <RTC_WeekDayNum+0xe8>)
 8005ad2:	fba1 1303 	umull	r1, r3, r1, r3
 8005ad6:	09db      	lsrs	r3, r3, #7
 8005ad8:	4413      	add	r3, r2
 8005ada:	1d1a      	adds	r2, r3, #4
 8005adc:	4b20      	ldr	r3, [pc, #128]	; (8005b60 <RTC_WeekDayNum+0xec>)
 8005ade:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae2:	1ad1      	subs	r1, r2, r3
 8005ae4:	0849      	lsrs	r1, r1, #1
 8005ae6:	440b      	add	r3, r1
 8005ae8:	0899      	lsrs	r1, r3, #2
 8005aea:	460b      	mov	r3, r1
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	1a5b      	subs	r3, r3, r1
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	e029      	b.n	8005b4a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005af6:	78fa      	ldrb	r2, [r7, #3]
 8005af8:	4613      	mov	r3, r2
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	4413      	add	r3, r2
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <RTC_WeekDayNum+0xe4>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	085a      	lsrs	r2, r3, #1
 8005b0a:	78bb      	ldrb	r3, [r7, #2]
 8005b0c:	441a      	add	r2, r3
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	441a      	add	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	089b      	lsrs	r3, r3, #2
 8005b16:	441a      	add	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4910      	ldr	r1, [pc, #64]	; (8005b5c <RTC_WeekDayNum+0xe8>)
 8005b1c:	fba1 1303 	umull	r1, r3, r1, r3
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	1ad2      	subs	r2, r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	490d      	ldr	r1, [pc, #52]	; (8005b5c <RTC_WeekDayNum+0xe8>)
 8005b28:	fba1 1303 	umull	r1, r3, r1, r3
 8005b2c:	09db      	lsrs	r3, r3, #7
 8005b2e:	4413      	add	r3, r2
 8005b30:	1c9a      	adds	r2, r3, #2
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <RTC_WeekDayNum+0xec>)
 8005b34:	fba3 1302 	umull	r1, r3, r3, r2
 8005b38:	1ad1      	subs	r1, r2, r3
 8005b3a:	0849      	lsrs	r1, r1, #1
 8005b3c:	440b      	add	r3, r1
 8005b3e:	0899      	lsrs	r1, r3, #2
 8005b40:	460b      	mov	r3, r1
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	1a5b      	subs	r3, r3, r1
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	b2db      	uxtb	r3, r3
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr
 8005b58:	38e38e39 	.word	0x38e38e39
 8005b5c:	51eb851f 	.word	0x51eb851f
 8005b60:	24924925 	.word	0x24924925

08005b64 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d027      	beq.n	8005bca <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d020      	beq.n	8005bca <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f824 	bl	8005be4 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0204 	mvn.w	r2, #4
 8005ba4:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	745a      	strb	r2, [r3, #17]
 8005bac:	e005      	b.n	8005bba <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f80f 	bl	8005bd2 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0201 	bic.w	r2, r2, #1
 8005bc8:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e076      	b.n	8005cf6 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d108      	bne.n	8005c22 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c18:	d009      	beq.n	8005c2e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	61da      	str	r2, [r3, #28]
 8005c20:	e005      	b.n	8005c2e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fc fb09 	bl	8002260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2202      	movs	r2, #2
 8005c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb2:	ea42 0103 	orr.w	r1, r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	0c1a      	lsrs	r2, r3, #16
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f002 0204 	and.w	r2, r2, #4
 8005cd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d002      	beq.n	8005d24 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d22:	e0a2      	b.n	8005e6a <HAL_SPI_Receive_DMA+0x16a>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d110      	bne.n	8005d4e <HAL_SPI_Receive_DMA+0x4e>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d34:	d10b      	bne.n	8005d4e <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2204      	movs	r2, #4
 8005d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f89f 	bl	8005e88 <HAL_SPI_TransmitReceive_DMA>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	e092      	b.n	8005e74 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_SPI_Receive_DMA+0x5c>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e08b      	b.n	8005e74 <HAL_SPI_Receive_DMA+0x174>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_SPI_Receive_DMA+0x70>
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d74:	e079      	b.n	8005e6a <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2204      	movs	r2, #4
 8005d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	88fa      	ldrh	r2, [r7, #6]
 8005d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db6:	d10f      	bne.n	8005dd8 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ddc:	4a27      	ldr	r2, [pc, #156]	; (8005e7c <HAL_SPI_Receive_DMA+0x17c>)
 8005dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de4:	4a26      	ldr	r2, [pc, #152]	; (8005e80 <HAL_SPI_Receive_DMA+0x180>)
 8005de6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dec:	4a25      	ldr	r2, [pc, #148]	; (8005e84 <HAL_SPI_Receive_DMA+0x184>)
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df4:	2200      	movs	r2, #0
 8005df6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	330c      	adds	r3, #12
 8005e02:	4619      	mov	r1, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005e10:	f7fc ff80 	bl	8002d14 <HAL_DMA_Start_IT>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d008      	beq.n	8005e2c <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1e:	f043 0210 	orr.w	r2, r3, #16
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005e2a:	e01e      	b.n	8005e6a <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d007      	beq.n	8005e4a <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e48:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0220 	orr.w	r2, r2, #32
 8005e58:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0201 	orr.w	r2, r2, #1
 8005e68:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	080061f9 	.word	0x080061f9
 8005e80:	080060c5 	.word	0x080060c5
 8005e84:	08006231 	.word	0x08006231

08005e88 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e0db      	b.n	8006060 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eb6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005ebe:	7dbb      	ldrb	r3, [r7, #22]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d00d      	beq.n	8005ee0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eca:	d106      	bne.n	8005eda <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <HAL_SPI_TransmitReceive_DMA+0x52>
 8005ed4:	7dbb      	ldrb	r3, [r7, #22]
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d002      	beq.n	8005ee0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005eda:	2302      	movs	r3, #2
 8005edc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ede:	e0ba      	b.n	8006056 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005eec:	887b      	ldrh	r3, [r7, #2]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ef6:	e0ae      	b.n	8006056 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d003      	beq.n	8005f0c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2205      	movs	r2, #5
 8005f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	887a      	ldrh	r2, [r7, #2]
 8005f1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	887a      	ldrh	r2, [r7, #2]
 8005f22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	887a      	ldrh	r2, [r7, #2]
 8005f2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	887a      	ldrh	r2, [r7, #2]
 8005f34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d108      	bne.n	8005f60 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f52:	4a45      	ldr	r2, [pc, #276]	; (8006068 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8005f54:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5a:	4a44      	ldr	r2, [pc, #272]	; (800606c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005f5c:	629a      	str	r2, [r3, #40]	; 0x28
 8005f5e:	e007      	b.n	8005f70 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f64:	4a42      	ldr	r2, [pc, #264]	; (8006070 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005f66:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6c:	4a41      	ldr	r2, [pc, #260]	; (8006074 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005f6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f74:	4a40      	ldr	r2, [pc, #256]	; (8006078 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f96:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005f98:	f7fc febc 	bl	8002d14 <HAL_DMA_Start_IT>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	f043 0210 	orr.w	r2, r3, #16
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	75fb      	strb	r3, [r7, #23]

    goto error;
 8005fb2:	e050      	b.n	8006056 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc8:	2200      	movs	r2, #0
 8005fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fec:	4619      	mov	r1, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ffa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ffc:	f7fc fe8a 	bl	8002d14 <HAL_DMA_Start_IT>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600a:	f043 0210 	orr.w	r2, r3, #16
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	75fb      	strb	r3, [r7, #23]

    goto error;
 8006016:	e01e      	b.n	8006056 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d007      	beq.n	8006036 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006034:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0220 	orr.w	r2, r2, #32
 8006044:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0202 	orr.w	r2, r2, #2
 8006054:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	080061f9 	.word	0x080061f9
 800606c:	080060c5 	.word	0x080060c5
 8006070:	08006215 	.word	0x08006215
 8006074:	0800616b 	.word	0x0800616b
 8006078:	08006231 	.word	0x08006231

0800607c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr

0800608e <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr

080060a0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr

080060b2 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060d2:	f7fc fa9b 	bl	800260c <HAL_GetTick>
 80060d6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d03b      	beq.n	800615e <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0220 	bic.w	r2, r2, #32
 80060f4:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10d      	bne.n	800611a <SPI_DMAReceiveCplt+0x56>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006106:	d108      	bne.n	800611a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0203 	bic.w	r2, r2, #3
 8006116:	605a      	str	r2, [r3, #4]
 8006118:	e007      	b.n	800612a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	2164      	movs	r1, #100	; 0x64
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 f926 	bl	8006380 <SPI_EndRxTransaction>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f7ff ffab 	bl	80060b2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800615c:	e002      	b.n	8006164 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7fa f92c 	bl	80003bc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006178:	f7fc fa48 	bl	800260c <HAL_GetTick>
 800617c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b20      	cmp	r3, #32
 800618a:	d02f      	beq.n	80061ec <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0220 	bic.w	r2, r2, #32
 800619a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	2164      	movs	r1, #100	; 0x64
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f93f 	bl	8006424 <SPI_EndRxTxTransaction>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0203 	bic.w	r2, r2, #3
 80061c6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff ff64 	bl	80060b2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80061ea:	e002      	b.n	80061f2 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff ff45 	bl	800607c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f7ff ff41 	bl	800608e <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff ff3c 	bl	80060a0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0203 	bic.w	r2, r2, #3
 800624c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006252:	f043 0210 	orr.w	r2, r3, #16
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff ff25 	bl	80060b2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006280:	f7fc f9c4 	bl	800260c <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	4413      	add	r3, r2
 800628e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006290:	f7fc f9bc 	bl	800260c <HAL_GetTick>
 8006294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006296:	4b39      	ldr	r3, [pc, #228]	; (800637c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	015b      	lsls	r3, r3, #5
 800629c:	0d1b      	lsrs	r3, r3, #20
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	fb02 f303 	mul.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062a6:	e054      	b.n	8006352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d050      	beq.n	8006352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062b0:	f7fc f9ac 	bl	800260c <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d902      	bls.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d13d      	bne.n	8006342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062de:	d111      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e8:	d004      	beq.n	80062f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f2:	d107      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630c:	d10f      	bne.n	800632e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800632c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e017      	b.n	8006372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	3b01      	subs	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4013      	ands	r3, r2
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	429a      	cmp	r2, r3
 8006360:	bf0c      	ite	eq
 8006362:	2301      	moveq	r3, #1
 8006364:	2300      	movne	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	429a      	cmp	r2, r3
 800636e:	d19b      	bne.n	80062a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3720      	adds	r7, #32
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000004 	.word	0x20000004

08006380 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006394:	d111      	bne.n	80063ba <SPI_EndRxTransaction+0x3a>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639e:	d004      	beq.n	80063aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a8:	d107      	bne.n	80063ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063c2:	d117      	bne.n	80063f4 <SPI_EndRxTransaction+0x74>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063cc:	d112      	bne.n	80063f4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2200      	movs	r2, #0
 80063d6:	2101      	movs	r1, #1
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f7ff ff49 	bl	8006270 <SPI_WaitFlagStateUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01a      	beq.n	800641a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e8:	f043 0220 	orr.w	r2, r3, #32
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e013      	b.n	800641c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2200      	movs	r2, #0
 80063fc:	2180      	movs	r1, #128	; 0x80
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f7ff ff36 	bl	8006270 <SPI_WaitFlagStateUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640e:	f043 0220 	orr.w	r2, r3, #32
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e000      	b.n	800641c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af02      	add	r7, sp, #8
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2200      	movs	r2, #0
 8006438:	2180      	movs	r1, #128	; 0x80
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f7ff ff18 	bl	8006270 <SPI_WaitFlagStateUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d007      	beq.n	8006456 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	f043 0220 	orr.w	r2, r3, #32
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e000      	b.n	8006458 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e041      	b.n	80064f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fb ff36 	bl	80022f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f000 fab0 	bl	8006a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d001      	beq.n	8006518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e044      	b.n	80065a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1d      	ldr	r2, [pc, #116]	; (80065ac <HAL_TIM_Base_Start_IT+0xac>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d018      	beq.n	800656c <HAL_TIM_Base_Start_IT+0x6c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1c      	ldr	r2, [pc, #112]	; (80065b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d013      	beq.n	800656c <HAL_TIM_Base_Start_IT+0x6c>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654c:	d00e      	beq.n	800656c <HAL_TIM_Base_Start_IT+0x6c>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <HAL_TIM_Base_Start_IT+0xb4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d009      	beq.n	800656c <HAL_TIM_Base_Start_IT+0x6c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a16      	ldr	r2, [pc, #88]	; (80065b8 <HAL_TIM_Base_Start_IT+0xb8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d004      	beq.n	800656c <HAL_TIM_Base_Start_IT+0x6c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a15      	ldr	r2, [pc, #84]	; (80065bc <HAL_TIM_Base_Start_IT+0xbc>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d111      	bne.n	8006590 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b06      	cmp	r3, #6
 800657c:	d010      	beq.n	80065a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0201 	orr.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658e:	e007      	b.n	80065a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40013400 	.word	0x40013400
 80065b4:	40000400 	.word	0x40000400
 80065b8:	40000800 	.word	0x40000800
 80065bc:	40000c00 	.word	0x40000c00

080065c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6a1a      	ldr	r2, [r3, #32]
 80065de:	f241 1311 	movw	r3, #4369	; 0x1111
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10f      	bne.n	8006608 <HAL_TIM_Base_Stop_IT+0x48>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6a1a      	ldr	r2, [r3, #32]
 80065ee:	f240 4344 	movw	r3, #1092	; 0x444
 80065f2:	4013      	ands	r3, r2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d107      	bne.n	8006608 <HAL_TIM_Base_Stop_IT+0x48>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0201 	bic.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr

0800661c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b02      	cmp	r3, #2
 8006630:	d122      	bne.n	8006678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b02      	cmp	r3, #2
 800663e:	d11b      	bne.n	8006678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0202 	mvn.w	r2, #2
 8006648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f9b4 	bl	80069cc <HAL_TIM_IC_CaptureCallback>
 8006664:	e005      	b.n	8006672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f9a7 	bl	80069ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f9b6 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	2b04      	cmp	r3, #4
 8006684:	d122      	bne.n	80066cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b04      	cmp	r3, #4
 8006692:	d11b      	bne.n	80066cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0204 	mvn.w	r2, #4
 800669c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2202      	movs	r2, #2
 80066a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f98a 	bl	80069cc <HAL_TIM_IC_CaptureCallback>
 80066b8:	e005      	b.n	80066c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f97d 	bl	80069ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f98c 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0308 	and.w	r3, r3, #8
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d122      	bne.n	8006720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d11b      	bne.n	8006720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0208 	mvn.w	r2, #8
 80066f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2204      	movs	r2, #4
 80066f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f003 0303 	and.w	r3, r3, #3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f960 	bl	80069cc <HAL_TIM_IC_CaptureCallback>
 800670c:	e005      	b.n	800671a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f953 	bl	80069ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f962 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b10      	cmp	r3, #16
 800672c:	d122      	bne.n	8006774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	2b10      	cmp	r3, #16
 800673a:	d11b      	bne.n	8006774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f06f 0210 	mvn.w	r2, #16
 8006744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2208      	movs	r2, #8
 800674a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f936 	bl	80069cc <HAL_TIM_IC_CaptureCallback>
 8006760:	e005      	b.n	800676e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f929 	bl	80069ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f938 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b01      	cmp	r3, #1
 8006780:	d10e      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b01      	cmp	r3, #1
 800678e:	d107      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f06f 0201 	mvn.w	r2, #1
 8006798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fb fb02 	bl	8001da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067aa:	2b80      	cmp	r3, #128	; 0x80
 80067ac:	d10e      	bne.n	80067cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b8:	2b80      	cmp	r3, #128	; 0x80
 80067ba:	d107      	bne.n	80067cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 faa1 	bl	8006d0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d6:	2b40      	cmp	r3, #64	; 0x40
 80067d8:	d10e      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e4:	2b40      	cmp	r3, #64	; 0x40
 80067e6:	d107      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f8fc 	bl	80069f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b20      	cmp	r3, #32
 8006804:	d10e      	bne.n	8006824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b20      	cmp	r3, #32
 8006812:	d107      	bne.n	8006824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0220 	mvn.w	r2, #32
 800681c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa6c 	bl	8006cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_TIM_ConfigClockSource+0x1c>
 8006844:	2302      	movs	r3, #2
 8006846:	e0b4      	b.n	80069b2 <HAL_TIM_ConfigClockSource+0x186>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800686e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006880:	d03e      	beq.n	8006900 <HAL_TIM_ConfigClockSource+0xd4>
 8006882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006886:	f200 8087 	bhi.w	8006998 <HAL_TIM_ConfigClockSource+0x16c>
 800688a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688e:	f000 8086 	beq.w	800699e <HAL_TIM_ConfigClockSource+0x172>
 8006892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006896:	d87f      	bhi.n	8006998 <HAL_TIM_ConfigClockSource+0x16c>
 8006898:	2b70      	cmp	r3, #112	; 0x70
 800689a:	d01a      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0xa6>
 800689c:	2b70      	cmp	r3, #112	; 0x70
 800689e:	d87b      	bhi.n	8006998 <HAL_TIM_ConfigClockSource+0x16c>
 80068a0:	2b60      	cmp	r3, #96	; 0x60
 80068a2:	d050      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x11a>
 80068a4:	2b60      	cmp	r3, #96	; 0x60
 80068a6:	d877      	bhi.n	8006998 <HAL_TIM_ConfigClockSource+0x16c>
 80068a8:	2b50      	cmp	r3, #80	; 0x50
 80068aa:	d03c      	beq.n	8006926 <HAL_TIM_ConfigClockSource+0xfa>
 80068ac:	2b50      	cmp	r3, #80	; 0x50
 80068ae:	d873      	bhi.n	8006998 <HAL_TIM_ConfigClockSource+0x16c>
 80068b0:	2b40      	cmp	r3, #64	; 0x40
 80068b2:	d058      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x13a>
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d86f      	bhi.n	8006998 <HAL_TIM_ConfigClockSource+0x16c>
 80068b8:	2b30      	cmp	r3, #48	; 0x30
 80068ba:	d064      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x15a>
 80068bc:	2b30      	cmp	r3, #48	; 0x30
 80068be:	d86b      	bhi.n	8006998 <HAL_TIM_ConfigClockSource+0x16c>
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d060      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x15a>
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d867      	bhi.n	8006998 <HAL_TIM_ConfigClockSource+0x16c>
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d05c      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x15a>
 80068cc:	2b10      	cmp	r3, #16
 80068ce:	d05a      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x15a>
 80068d0:	e062      	b.n	8006998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068e2:	f000 f980 	bl	8006be6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	609a      	str	r2, [r3, #8]
      break;
 80068fe:	e04f      	b.n	80069a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006910:	f000 f969 	bl	8006be6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006922:	609a      	str	r2, [r3, #8]
      break;
 8006924:	e03c      	b.n	80069a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006932:	461a      	mov	r2, r3
 8006934:	f000 f8e0 	bl	8006af8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2150      	movs	r1, #80	; 0x50
 800693e:	4618      	mov	r0, r3
 8006940:	f000 f937 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 8006944:	e02c      	b.n	80069a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006952:	461a      	mov	r2, r3
 8006954:	f000 f8fe 	bl	8006b54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2160      	movs	r1, #96	; 0x60
 800695e:	4618      	mov	r0, r3
 8006960:	f000 f927 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 8006964:	e01c      	b.n	80069a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006972:	461a      	mov	r2, r3
 8006974:	f000 f8c0 	bl	8006af8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2140      	movs	r1, #64	; 0x40
 800697e:	4618      	mov	r0, r3
 8006980:	f000 f917 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 8006984:	e00c      	b.n	80069a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4619      	mov	r1, r3
 8006990:	4610      	mov	r0, r2
 8006992:	f000 f90e 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 8006996:	e003      	b.n	80069a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	73fb      	strb	r3, [r7, #15]
      break;
 800699c:	e000      	b.n	80069a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800699e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr

080069cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr

080069de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr
	...

08006a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a33      	ldr	r2, [pc, #204]	; (8006ae4 <TIM_Base_SetConfig+0xe0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <TIM_Base_SetConfig+0x40>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a32      	ldr	r2, [pc, #200]	; (8006ae8 <TIM_Base_SetConfig+0xe4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00f      	beq.n	8006a44 <TIM_Base_SetConfig+0x40>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2a:	d00b      	beq.n	8006a44 <TIM_Base_SetConfig+0x40>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a2f      	ldr	r2, [pc, #188]	; (8006aec <TIM_Base_SetConfig+0xe8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d007      	beq.n	8006a44 <TIM_Base_SetConfig+0x40>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a2e      	ldr	r2, [pc, #184]	; (8006af0 <TIM_Base_SetConfig+0xec>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_Base_SetConfig+0x40>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a2d      	ldr	r2, [pc, #180]	; (8006af4 <TIM_Base_SetConfig+0xf0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d108      	bne.n	8006a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a22      	ldr	r2, [pc, #136]	; (8006ae4 <TIM_Base_SetConfig+0xe0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d013      	beq.n	8006a86 <TIM_Base_SetConfig+0x82>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <TIM_Base_SetConfig+0xe4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00f      	beq.n	8006a86 <TIM_Base_SetConfig+0x82>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6c:	d00b      	beq.n	8006a86 <TIM_Base_SetConfig+0x82>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a1e      	ldr	r2, [pc, #120]	; (8006aec <TIM_Base_SetConfig+0xe8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d007      	beq.n	8006a86 <TIM_Base_SetConfig+0x82>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a1d      	ldr	r2, [pc, #116]	; (8006af0 <TIM_Base_SetConfig+0xec>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d003      	beq.n	8006a86 <TIM_Base_SetConfig+0x82>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a1c      	ldr	r2, [pc, #112]	; (8006af4 <TIM_Base_SetConfig+0xf0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d108      	bne.n	8006a98 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a09      	ldr	r2, [pc, #36]	; (8006ae4 <TIM_Base_SetConfig+0xe0>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_Base_SetConfig+0xc8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <TIM_Base_SetConfig+0xe4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d103      	bne.n	8006ad4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	615a      	str	r2, [r3, #20]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr
 8006ae4:	40012c00 	.word	0x40012c00
 8006ae8:	40013400 	.word	0x40013400
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00

08006af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	f023 0201 	bic.w	r2, r3, #1
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f023 030a 	bic.w	r3, r3, #10
 8006b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f023 0210 	bic.w	r2, r3, #16
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	031b      	lsls	r3, r3, #12
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f043 0307 	orr.w	r3, r3, #7
 8006bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	609a      	str	r2, [r3, #8]
}
 8006bdc:	bf00      	nop
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr

08006be6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b087      	sub	sp, #28
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
 8006bf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	021a      	lsls	r2, r3, #8
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	609a      	str	r2, [r3, #8]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr

08006c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e050      	b.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a1b      	ldr	r2, [pc, #108]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d018      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a19      	ldr	r2, [pc, #100]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d013      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c92:	d00e      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a15      	ldr	r2, [pc, #84]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d009      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a14      	ldr	r2, [pc, #80]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d004      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a12      	ldr	r2, [pc, #72]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d10c      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40013400 	.word	0x40013400
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00

08006cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr

08006d0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bc80      	pop	{r7}
 8006d1e:	4770      	bx	lr

08006d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e042      	b.n	8006db8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d106      	bne.n	8006d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fb fb22 	bl	8002390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2224      	movs	r2, #36	; 0x24
 8006d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f991 	bl	800708c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	695a      	ldr	r2, [r3, #20]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	d121      	bne.n	8006e1e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_UART_Transmit_IT+0x26>
 8006de0:	88fb      	ldrh	r3, [r7, #6]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e01a      	b.n	8006e20 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	88fa      	ldrh	r2, [r7, #6]
 8006df4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	88fa      	ldrh	r2, [r7, #6]
 8006dfa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2221      	movs	r2, #33	; 0x21
 8006e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68da      	ldr	r2, [r3, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e18:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e000      	b.n	8006e20 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006e1e:	2302      	movs	r3, #2
  }
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr

08006e2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	4613      	mov	r3, r2
 8006e36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d112      	bne.n	8006e6a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_UART_Receive_IT+0x26>
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e00b      	b.n	8006e6c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e5a:	88fb      	ldrh	r3, [r7, #6]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f8c2 	bl	8006fea <UART_Start_Receive_IT>
 8006e66:	4603      	mov	r3, r0
 8006e68:	e000      	b.n	8006e6c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e6a:	2302      	movs	r3, #2
  }
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b09a      	sub	sp, #104	; 0x68
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	330c      	adds	r3, #12
 8006e82:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e92:	667b      	str	r3, [r7, #100]	; 0x64
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	330c      	adds	r3, #12
 8006e9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e9c:	657a      	str	r2, [r7, #84]	; 0x54
 8006e9e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ea2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e5      	bne.n	8006e7c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3314      	adds	r3, #20
 8006eb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	f023 0301 	bic.w	r3, r3, #1
 8006ec6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3314      	adds	r3, #20
 8006ece:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ed0:	643a      	str	r2, [r7, #64]	; 0x40
 8006ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e5      	bne.n	8006eb0 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d119      	bne.n	8006f20 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	f023 0310 	bic.w	r3, r3, #16
 8006f02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e5      	bne.n	8006eec <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d03f      	beq.n	8006fae <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3314      	adds	r3, #20
 8006f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3314      	adds	r3, #20
 8006f4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f4e:	61ba      	str	r2, [r7, #24]
 8006f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6979      	ldr	r1, [r7, #20]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e5      	bne.n	8006f2e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d013      	beq.n	8006f92 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <HAL_UART_AbortReceive_IT+0x160>)
 8006f70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fb ff2c 	bl	8002dd4 <HAL_DMA_Abort_IT>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d022      	beq.n	8006fc8 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4798      	blx	r3
 8006f90:	e01a      	b.n	8006fc8 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f816 	bl	8006fd8 <HAL_UART_AbortReceiveCpltCallback>
 8006fac:	e00c      	b.n	8006fc8 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f808 	bl	8006fd8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3768      	adds	r7, #104	; 0x68
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	0800705d 	.word	0x0800705d

08006fd8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr

08006fea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	88fa      	ldrh	r2, [r7, #6]
 8007002:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2222      	movs	r2, #34	; 0x22
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800702e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0201 	orr.w	r2, r2, #1
 800703e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0220 	orr.w	r2, r2, #32
 800704e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	bc80      	pop	{r7}
 800705a:	4770      	bx	lr

0800705c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f7ff ffaa 	bl	8006fd8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80070c6:	f023 030c 	bic.w	r3, r3, #12
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6812      	ldr	r2, [r2, #0]
 80070ce:	68b9      	ldr	r1, [r7, #8]
 80070d0:	430b      	orrs	r3, r1
 80070d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a2c      	ldr	r2, [pc, #176]	; (80071a0 <UART_SetConfig+0x114>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d103      	bne.n	80070fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80070f4:	f7fd ffc2 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	e002      	b.n	8007102 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80070fc:	f7fd ffaa 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 8007100:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009a      	lsls	r2, r3, #2
 800710c:	441a      	add	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	fbb2 f3f3 	udiv	r3, r2, r3
 8007118:	4a22      	ldr	r2, [pc, #136]	; (80071a4 <UART_SetConfig+0x118>)
 800711a:	fba2 2303 	umull	r2, r3, r2, r3
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	0119      	lsls	r1, r3, #4
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4613      	mov	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	009a      	lsls	r2, r3, #2
 800712c:	441a      	add	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	fbb2 f2f3 	udiv	r2, r2, r3
 8007138:	4b1a      	ldr	r3, [pc, #104]	; (80071a4 <UART_SetConfig+0x118>)
 800713a:	fba3 0302 	umull	r0, r3, r3, r2
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	2064      	movs	r0, #100	; 0x64
 8007142:	fb00 f303 	mul.w	r3, r0, r3
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	3332      	adds	r3, #50	; 0x32
 800714c:	4a15      	ldr	r2, [pc, #84]	; (80071a4 <UART_SetConfig+0x118>)
 800714e:	fba2 2303 	umull	r2, r3, r2, r3
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007158:	4419      	add	r1, r3
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009a      	lsls	r2, r3, #2
 8007164:	441a      	add	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007170:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <UART_SetConfig+0x118>)
 8007172:	fba3 0302 	umull	r0, r3, r3, r2
 8007176:	095b      	lsrs	r3, r3, #5
 8007178:	2064      	movs	r0, #100	; 0x64
 800717a:	fb00 f303 	mul.w	r3, r0, r3
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	3332      	adds	r3, #50	; 0x32
 8007184:	4a07      	ldr	r2, [pc, #28]	; (80071a4 <UART_SetConfig+0x118>)
 8007186:	fba2 2303 	umull	r2, r3, r2, r3
 800718a:	095b      	lsrs	r3, r3, #5
 800718c:	f003 020f 	and.w	r2, r3, #15
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	440a      	add	r2, r1
 8007196:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	40013800 	.word	0x40013800
 80071a4:	51eb851f 	.word	0x51eb851f

080071a8 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	4603      	mov	r3, r0
 80071b2:	71fb      	strb	r3, [r7, #7]
 80071b4:	460b      	mov	r3, r1
 80071b6:	71bb      	strb	r3, [r7, #6]
 80071b8:	4613      	mov	r3, r2
 80071ba:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80071c0:	79bb      	ldrb	r3, [r7, #6]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <eMBInit+0x2a>
 80071c6:	79bb      	ldrb	r3, [r7, #6]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80071cc:	79bb      	ldrb	r3, [r7, #6]
 80071ce:	2bf7      	cmp	r3, #247	; 0xf7
 80071d0:	d902      	bls.n	80071d8 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 80071d2:	2302      	movs	r3, #2
 80071d4:	73fb      	strb	r3, [r7, #15]
 80071d6:	e03b      	b.n	8007250 <eMBInit+0xa8>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80071d8:	4a20      	ldr	r2, [pc, #128]	; (800725c <eMBInit+0xb4>)
 80071da:	79bb      	ldrb	r3, [r7, #6]
 80071dc:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d121      	bne.n	8007228 <eMBInit+0x80>
        {
#if MB_SLAVE_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 80071e4:	4b1e      	ldr	r3, [pc, #120]	; (8007260 <eMBInit+0xb8>)
 80071e6:	4a1f      	ldr	r2, [pc, #124]	; (8007264 <eMBInit+0xbc>)
 80071e8:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 80071ea:	4b1f      	ldr	r3, [pc, #124]	; (8007268 <eMBInit+0xc0>)
 80071ec:	4a1f      	ldr	r2, [pc, #124]	; (800726c <eMBInit+0xc4>)
 80071ee:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 80071f0:	4b1f      	ldr	r3, [pc, #124]	; (8007270 <eMBInit+0xc8>)
 80071f2:	4a20      	ldr	r2, [pc, #128]	; (8007274 <eMBInit+0xcc>)
 80071f4:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 80071f6:	4b20      	ldr	r3, [pc, #128]	; (8007278 <eMBInit+0xd0>)
 80071f8:	4a20      	ldr	r2, [pc, #128]	; (800727c <eMBInit+0xd4>)
 80071fa:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 80071fc:	4b20      	ldr	r3, [pc, #128]	; (8007280 <eMBInit+0xd8>)
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8007202:	4b20      	ldr	r3, [pc, #128]	; (8007284 <eMBInit+0xdc>)
 8007204:	4a20      	ldr	r2, [pc, #128]	; (8007288 <eMBInit+0xe0>)
 8007206:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8007208:	4b20      	ldr	r3, [pc, #128]	; (800728c <eMBInit+0xe4>)
 800720a:	4a21      	ldr	r2, [pc, #132]	; (8007290 <eMBInit+0xe8>)
 800720c:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 800720e:	4b21      	ldr	r3, [pc, #132]	; (8007294 <eMBInit+0xec>)
 8007210:	4a21      	ldr	r2, [pc, #132]	; (8007298 <eMBInit+0xf0>)
 8007212:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <eMBInit+0xb4>)
 8007216:	7818      	ldrb	r0, [r3, #0]
 8007218:	7e3b      	ldrb	r3, [r7, #24]
 800721a:	7979      	ldrb	r1, [r7, #5]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	f000 fd47 	bl	8007cb0 <eMBRTUInit>
 8007222:	4603      	mov	r3, r0
 8007224:	73fb      	strb	r3, [r7, #15]
            break;
 8007226:	e002      	b.n	800722e <eMBInit+0x86>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8007228:	2302      	movs	r3, #2
 800722a:	73fb      	strb	r3, [r7, #15]
            break;
 800722c:	bf00      	nop
        }

        if( eStatus == MB_ENOERR )
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10d      	bne.n	8007250 <eMBInit+0xa8>
        {
            if( !xMBPortEventInit(  ) )
 8007234:	f000 ffb2 	bl	800819c <xMBPortEventInit>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d102      	bne.n	8007244 <eMBInit+0x9c>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 800723e:	2303      	movs	r3, #3
 8007240:	73fb      	strb	r3, [r7, #15]
 8007242:	e005      	b.n	8007250 <eMBInit+0xa8>
            }
            else
            {
                eMBCurrentMode = eMode;
 8007244:	4a15      	ldr	r2, [pc, #84]	; (800729c <eMBInit+0xf4>)
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 800724a:	4b15      	ldr	r3, [pc, #84]	; (80072a0 <eMBInit+0xf8>)
 800724c:	2201      	movs	r2, #1
 800724e:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 8007250:	7bfb      	ldrb	r3, [r7, #15]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	200016a8 	.word	0x200016a8
 8007260:	200016b0 	.word	0x200016b0
 8007264:	08007d0d 	.word	0x08007d0d
 8007268:	200016b4 	.word	0x200016b4
 800726c:	08007d35 	.word	0x08007d35
 8007270:	200016ac 	.word	0x200016ac
 8007274:	08007dc1 	.word	0x08007dc1
 8007278:	200016b8 	.word	0x200016b8
 800727c:	08007d51 	.word	0x08007d51
 8007280:	200016bc 	.word	0x200016bc
 8007284:	200016c0 	.word	0x200016c0
 8007288:	08007e89 	.word	0x08007e89
 800728c:	200016c4 	.word	0x200016c4
 8007290:	08007f35 	.word	0x08007f35
 8007294:	200016c8 	.word	0x200016c8
 8007298:	08007fbd 	.word	0x08007fbd
 800729c:	200016a9 	.word	0x200016a9
 80072a0:	2000000c 	.word	0x2000000c

080072a4 <eMBEnable>:
}


eMBErrorCode
eMBEnable( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80072aa:	2300      	movs	r3, #0
 80072ac:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 80072ae:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <eMBEnable+0x30>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d106      	bne.n	80072c4 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80072b6:	4b08      	ldr	r3, [pc, #32]	; (80072d8 <eMBEnable+0x34>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <eMBEnable+0x30>)
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	e001      	b.n	80072c8 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80072c4:	2306      	movs	r3, #6
 80072c6:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 80072c8:	79fb      	ldrb	r3, [r7, #7]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	2000000c 	.word	0x2000000c
 80072d8:	200016b0 	.word	0x200016b0

080072dc <eMBPoll>:
    }
    return eStatus;
}

eMBErrorCode eMBPoll( void )
{
 80072dc:	b590      	push	{r4, r7, lr}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 80072e2:	2300      	movs	r3, #0
 80072e4:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80072e6:	4b55      	ldr	r3, [pc, #340]	; (800743c <eMBPoll+0x160>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 80072ee:	2306      	movs	r3, #6
 80072f0:	e09f      	b.n	8007432 <eMBPoll+0x156>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80072f2:	1cbb      	adds	r3, r7, #2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 ffb1 	bl	800825c <xMBPortEventGet>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	f040 8097 	bne.w	8007430 <eMBPoll+0x154>
    {
        switch ( eEvent )
 8007302:	78bb      	ldrb	r3, [r7, #2]
 8007304:	3b01      	subs	r3, #1
 8007306:	2b07      	cmp	r3, #7
 8007308:	f200 8092 	bhi.w	8007430 <eMBPoll+0x154>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <eMBPoll+0x38>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007431 	.word	0x08007431
 8007318:	08007335 	.word	0x08007335
 800731c:	08007431 	.word	0x08007431
 8007320:	08007367 	.word	0x08007367
 8007324:	08007431 	.word	0x08007431
 8007328:	08007431 	.word	0x08007431
 800732c:	08007431 	.word	0x08007431
 8007330:	08007431 	.word	0x08007431
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8007334:	4b42      	ldr	r3, [pc, #264]	; (8007440 <eMBPoll+0x164>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a42      	ldr	r2, [pc, #264]	; (8007444 <eMBPoll+0x168>)
 800733a:	4943      	ldr	r1, [pc, #268]	; (8007448 <eMBPoll+0x16c>)
 800733c:	4843      	ldr	r0, [pc, #268]	; (800744c <eMBPoll+0x170>)
 800733e:	4798      	blx	r3
 8007340:	4603      	mov	r3, r0
 8007342:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d16f      	bne.n	800742a <eMBPoll+0x14e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800734a:	4b40      	ldr	r3, [pc, #256]	; (800744c <eMBPoll+0x170>)
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	4b40      	ldr	r3, [pc, #256]	; (8007450 <eMBPoll+0x174>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d003      	beq.n	800735e <eMBPoll+0x82>
 8007356:	4b3d      	ldr	r3, [pc, #244]	; (800744c <eMBPoll+0x170>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d165      	bne.n	800742a <eMBPoll+0x14e>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 800735e:	2004      	movs	r0, #4
 8007360:	f000 ff2a 	bl	80081b8 <xMBPortEventPost>
                }
            }
            break;
 8007364:	e061      	b.n	800742a <eMBPoll+0x14e>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8007366:	4b38      	ldr	r3, [pc, #224]	; (8007448 <eMBPoll+0x16c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	781a      	ldrb	r2, [r3, #0]
 800736c:	4b39      	ldr	r3, [pc, #228]	; (8007454 <eMBPoll+0x178>)
 800736e:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8007370:	4b39      	ldr	r3, [pc, #228]	; (8007458 <eMBPoll+0x17c>)
 8007372:	2201      	movs	r2, #1
 8007374:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8007376:	2300      	movs	r3, #0
 8007378:	607b      	str	r3, [r7, #4]
 800737a:	e01f      	b.n	80073bc <eMBPoll+0xe0>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 800737c:	4a37      	ldr	r2, [pc, #220]	; (800745c <eMBPoll+0x180>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01d      	beq.n	80073c4 <eMBPoll+0xe8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8007388:	4a34      	ldr	r2, [pc, #208]	; (800745c <eMBPoll+0x180>)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8007390:	4b30      	ldr	r3, [pc, #192]	; (8007454 <eMBPoll+0x178>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d10e      	bne.n	80073b6 <eMBPoll+0xda>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8007398:	4a30      	ldr	r2, [pc, #192]	; (800745c <eMBPoll+0x180>)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	4413      	add	r3, r2
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	4a29      	ldr	r2, [pc, #164]	; (8007448 <eMBPoll+0x16c>)
 80073a4:	6812      	ldr	r2, [r2, #0]
 80073a6:	4927      	ldr	r1, [pc, #156]	; (8007444 <eMBPoll+0x168>)
 80073a8:	4610      	mov	r0, r2
 80073aa:	4798      	blx	r3
 80073ac:	4603      	mov	r3, r0
 80073ae:	461a      	mov	r2, r3
 80073b0:	4b29      	ldr	r3, [pc, #164]	; (8007458 <eMBPoll+0x17c>)
 80073b2:	701a      	strb	r2, [r3, #0]
                    break;
 80073b4:	e007      	b.n	80073c6 <eMBPoll+0xea>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3301      	adds	r3, #1
 80073ba:	607b      	str	r3, [r7, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b0f      	cmp	r3, #15
 80073c0:	dddc      	ble.n	800737c <eMBPoll+0xa0>
 80073c2:	e000      	b.n	80073c6 <eMBPoll+0xea>
                    break;
 80073c4:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80073c6:	4b21      	ldr	r3, [pc, #132]	; (800744c <eMBPoll+0x170>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d02f      	beq.n	800742e <eMBPoll+0x152>
            {
                if( eException != MB_EX_NONE )
 80073ce:	4b22      	ldr	r3, [pc, #136]	; (8007458 <eMBPoll+0x17c>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01d      	beq.n	8007412 <eMBPoll+0x136>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 80073d6:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <eMBPoll+0x168>)
 80073d8:	2200      	movs	r2, #0
 80073da:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80073dc:	4b1d      	ldr	r3, [pc, #116]	; (8007454 <eMBPoll+0x178>)
 80073de:	781a      	ldrb	r2, [r3, #0]
 80073e0:	4b19      	ldr	r3, [pc, #100]	; (8007448 <eMBPoll+0x16c>)
 80073e2:	6819      	ldr	r1, [r3, #0]
 80073e4:	4b17      	ldr	r3, [pc, #92]	; (8007444 <eMBPoll+0x168>)
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	1c58      	adds	r0, r3, #1
 80073ea:	b284      	uxth	r4, r0
 80073ec:	4815      	ldr	r0, [pc, #84]	; (8007444 <eMBPoll+0x168>)
 80073ee:	8004      	strh	r4, [r0, #0]
 80073f0:	440b      	add	r3, r1
 80073f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 80073fa:	4b13      	ldr	r3, [pc, #76]	; (8007448 <eMBPoll+0x16c>)
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4b11      	ldr	r3, [pc, #68]	; (8007444 <eMBPoll+0x168>)
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	1c59      	adds	r1, r3, #1
 8007404:	b288      	uxth	r0, r1
 8007406:	490f      	ldr	r1, [pc, #60]	; (8007444 <eMBPoll+0x168>)
 8007408:	8008      	strh	r0, [r1, #0]
 800740a:	4413      	add	r3, r2
 800740c:	4a12      	ldr	r2, [pc, #72]	; (8007458 <eMBPoll+0x17c>)
 800740e:	7812      	ldrb	r2, [r2, #0]
 8007410:	701a      	strb	r2, [r3, #0]
                }
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8007412:	4b13      	ldr	r3, [pc, #76]	; (8007460 <eMBPoll+0x184>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a0e      	ldr	r2, [pc, #56]	; (8007450 <eMBPoll+0x174>)
 8007418:	7810      	ldrb	r0, [r2, #0]
 800741a:	4a0b      	ldr	r2, [pc, #44]	; (8007448 <eMBPoll+0x16c>)
 800741c:	6811      	ldr	r1, [r2, #0]
 800741e:	4a09      	ldr	r2, [pc, #36]	; (8007444 <eMBPoll+0x168>)
 8007420:	8812      	ldrh	r2, [r2, #0]
 8007422:	4798      	blx	r3
 8007424:	4603      	mov	r3, r0
 8007426:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8007428:	e001      	b.n	800742e <eMBPoll+0x152>
            break;
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <eMBPoll+0x154>
            break;
 800742e:	bf00      	nop

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	bd90      	pop	{r4, r7, pc}
 800743a:	bf00      	nop
 800743c:	2000000c 	.word	0x2000000c
 8007440:	200016b8 	.word	0x200016b8
 8007444:	200016d4 	.word	0x200016d4
 8007448:	200016d0 	.word	0x200016d0
 800744c:	200016cc 	.word	0x200016cc
 8007450:	200016a8 	.word	0x200016a8
 8007454:	200016d6 	.word	0x200016d6
 8007458:	200016d7 	.word	0x200016d7
 800745c:	20000010 	.word	0x20000010
 8007460:	200016ac 	.word	0x200016ac

08007464 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8007470:	23ff      	movs	r3, #255	; 0xff
 8007472:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8007474:	23ff      	movs	r3, #255	; 0xff
 8007476:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8007478:	e013      	b.n	80074a2 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	4053      	eors	r3, r2
 8007486:	b2db      	uxtb	r3, r3
 8007488:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800748a:	4a0f      	ldr	r2, [pc, #60]	; (80074c8 <usMBCRC16+0x64>)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4413      	add	r3, r2
 8007490:	781a      	ldrb	r2, [r3, #0]
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	4053      	eors	r3, r2
 8007496:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8007498:	4a0c      	ldr	r2, [pc, #48]	; (80074cc <usMBCRC16+0x68>)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 80074a2:	887b      	ldrh	r3, [r7, #2]
 80074a4:	1e5a      	subs	r2, r3, #1
 80074a6:	807a      	strh	r2, [r7, #2]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e6      	bne.n	800747a <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	021b      	lsls	r3, r3, #8
 80074b0:	b21a      	sxth	r2, r3
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	b21b      	sxth	r3, r3
 80074b6:	4313      	orrs	r3, r2
 80074b8:	b21b      	sxth	r3, r3
 80074ba:	b29b      	uxth	r3, r3
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bc80      	pop	{r7}
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	0800bd64 	.word	0x0800bd64
 80074cc:	0800be64 	.word	0x0800be64

080074d0 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80074da:	2300      	movs	r3, #0
 80074dc:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	2b05      	cmp	r3, #5
 80074e4:	d16c      	bne.n	80075c0 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3301      	adds	r3, #1
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3302      	adds	r3, #2
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	8abb      	ldrh	r3, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007500:	8abb      	ldrh	r3, [r7, #20]
 8007502:	3301      	adds	r3, #1
 8007504:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3303      	adds	r3, #3
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3304      	adds	r3, #4
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	b29a      	uxth	r2, r3
 800751a:	8a7b      	ldrh	r3, [r7, #18]
 800751c:	4313      	orrs	r3, r2
 800751e:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usCoilCount >= 1 ) &&
 8007520:	8a7b      	ldrh	r3, [r7, #18]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d049      	beq.n	80075ba <eMBFuncReadCoils+0xea>
 8007526:	8a7b      	ldrh	r3, [r7, #18]
 8007528:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800752c:	d245      	bcs.n	80075ba <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2200      	movs	r2, #0
 8007536:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	60fa      	str	r2, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 800754e:	8a7b      	ldrh	r3, [r7, #18]
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	2b00      	cmp	r3, #0
 8007556:	d006      	beq.n	8007566 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8007558:	8a7b      	ldrh	r3, [r7, #18]
 800755a:	08db      	lsrs	r3, r3, #3
 800755c:	b29b      	uxth	r3, r3
 800755e:	b2db      	uxtb	r3, r3
 8007560:	3301      	adds	r3, #1
 8007562:	75fb      	strb	r3, [r7, #23]
 8007564:	e003      	b.n	800756e <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8007566:	8a7b      	ldrh	r3, [r7, #18]
 8007568:	08db      	lsrs	r3, r3, #3
 800756a:	b29b      	uxth	r3, r3
 800756c:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	60fa      	str	r2, [r7, #12]
 8007574:	7dfa      	ldrb	r2, [r7, #23]
 8007576:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	3301      	adds	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8007584:	8a7a      	ldrh	r2, [r7, #18]
 8007586:	8ab9      	ldrh	r1, [r7, #20]
 8007588:	2300      	movs	r3, #0
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f001 f840 	bl	8008610 <eMBRegCoilsCB>
 8007590:	4603      	mov	r3, r0
 8007592:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d006      	beq.n	80075a8 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800759a:	7afb      	ldrb	r3, [r7, #11]
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fdd0 	bl	8008142 <prveMBError2Exception>
 80075a2:	4603      	mov	r3, r0
 80075a4:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80075a6:	e00d      	b.n	80075c4 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	881a      	ldrh	r2, [r3, #0]
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	4413      	add	r3, r2
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80075b8:	e004      	b.n	80075c4 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80075ba:	2303      	movs	r3, #3
 80075bc:	75bb      	strb	r3, [r7, #22]
 80075be:	e001      	b.n	80075c4 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80075c0:	2303      	movs	r3, #3
 80075c2:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80075c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <eMBFuncWriteCoil>:
#endif

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80075d8:	2300      	movs	r3, #0
 80075da:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	2b05      	cmp	r3, #5
 80075e2:	d140      	bne.n	8007666 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3301      	adds	r3, #1
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3302      	adds	r3, #2
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	89bb      	ldrh	r3, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80075fe:	89bb      	ldrh	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3304      	adds	r3, #4
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d128      	bne.n	8007660 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3303      	adds	r3, #3
 8007612:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8007614:	2bff      	cmp	r3, #255	; 0xff
 8007616:	d004      	beq.n	8007622 <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3303      	adds	r3, #3
 800761c:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800761e:	2b00      	cmp	r3, #0
 8007620:	d11e      	bne.n	8007660 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3303      	adds	r3, #3
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2bff      	cmp	r3, #255	; 0xff
 800762e:	d102      	bne.n	8007636 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8007630:	2301      	movs	r3, #1
 8007632:	723b      	strb	r3, [r7, #8]
 8007634:	e001      	b.n	800763a <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 800763a:	89b9      	ldrh	r1, [r7, #12]
 800763c:	f107 0008 	add.w	r0, r7, #8
 8007640:	2301      	movs	r3, #1
 8007642:	2201      	movs	r2, #1
 8007644:	f000 ffe4 	bl	8008610 <eMBRegCoilsCB>
 8007648:	4603      	mov	r3, r0
 800764a:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00b      	beq.n	800766a <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fd74 	bl	8008142 <prveMBError2Exception>
 800765a:	4603      	mov	r3, r0
 800765c:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800765e:	e004      	b.n	800766a <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007660:	2303      	movs	r3, #3
 8007662:	73fb      	strb	r3, [r7, #15]
 8007664:	e001      	b.n	800766a <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007666:	2303      	movs	r3, #3
 8007668:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 800767e:	2300      	movs	r3, #0
 8007680:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	2b05      	cmp	r3, #5
 8007688:	d954      	bls.n	8007734 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3301      	adds	r3, #1
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	b29b      	uxth	r3, r3
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3302      	adds	r3, #2
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b29a      	uxth	r2, r3
 800769e:	89bb      	ldrh	r3, [r7, #12]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80076a4:	89bb      	ldrh	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3303      	adds	r3, #3
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3304      	adds	r3, #4
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	b29a      	uxth	r2, r3
 80076be:	897b      	ldrh	r3, [r7, #10]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	795b      	ldrb	r3, [r3, #5]
 80076c8:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80076ca:	897b      	ldrh	r3, [r7, #10]
 80076cc:	f003 0307 	and.w	r3, r3, #7
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d006      	beq.n	80076e2 <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80076d4:	897b      	ldrh	r3, [r7, #10]
 80076d6:	08db      	lsrs	r3, r3, #3
 80076d8:	b29b      	uxth	r3, r3
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	3301      	adds	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
 80076e0:	e003      	b.n	80076ea <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80076e2:	897b      	ldrh	r3, [r7, #10]
 80076e4:	08db      	lsrs	r3, r3, #3
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 80076ea:	897b      	ldrh	r3, [r7, #10]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01e      	beq.n	800772e <eMBFuncWriteMultipleCoils+0xba>
 80076f0:	897b      	ldrh	r3, [r7, #10]
 80076f2:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80076f6:	d81a      	bhi.n	800772e <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80076f8:	7bfa      	ldrb	r2, [r7, #15]
 80076fa:	7a7b      	ldrb	r3, [r7, #9]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d116      	bne.n	800772e <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	1d98      	adds	r0, r3, #6
 8007704:	897a      	ldrh	r2, [r7, #10]
 8007706:	89b9      	ldrh	r1, [r7, #12]
 8007708:	2301      	movs	r3, #1
 800770a:	f000 ff81 	bl	8008610 <eMBRegCoilsCB>
 800770e:	4603      	mov	r3, r0
 8007710:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007712:	7a3b      	ldrb	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d006      	beq.n	8007726 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007718:	7a3b      	ldrb	r3, [r7, #8]
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fd11 	bl	8008142 <prveMBError2Exception>
 8007720:	4603      	mov	r3, r0
 8007722:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8007724:	e008      	b.n	8007738 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2205      	movs	r2, #5
 800772a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800772c:	e004      	b.n	8007738 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800772e:	2303      	movs	r3, #3
 8007730:	73bb      	strb	r3, [r7, #14]
 8007732:	e001      	b.n	8007738 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007734:	2303      	movs	r3, #3
 8007736:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8007738:	7bbb      	ldrb	r3, [r7, #14]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_DISCRETE_INPUTS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b086      	sub	sp, #24
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800774c:	2300      	movs	r3, #0
 800774e:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	2b05      	cmp	r3, #5
 8007756:	d16c      	bne.n	8007832 <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3301      	adds	r3, #1
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3302      	adds	r3, #2
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	b29a      	uxth	r2, r3
 800776c:	8abb      	ldrh	r3, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007772:	8abb      	ldrh	r3, [r7, #20]
 8007774:	3301      	adds	r3, #1
 8007776:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3303      	adds	r3, #3
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3304      	adds	r3, #4
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	b29a      	uxth	r2, r3
 800778c:	8a7b      	ldrh	r3, [r7, #18]
 800778e:	4313      	orrs	r3, r2
 8007790:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8007792:	8a7b      	ldrh	r3, [r7, #18]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d049      	beq.n	800782c <eMBFuncReadDiscreteInputs+0xea>
 8007798:	8a7b      	ldrh	r3, [r7, #18]
 800779a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800779e:	d245      	bcs.n	800782c <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2200      	movs	r2, #0
 80077a8:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	60fa      	str	r2, [r7, #12]
 80077b0:	2202      	movs	r2, #2
 80077b2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	3301      	adds	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80077c0:	8a7b      	ldrh	r3, [r7, #18]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d006      	beq.n	80077d8 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80077ca:	8a7b      	ldrh	r3, [r7, #18]
 80077cc:	08db      	lsrs	r3, r3, #3
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	3301      	adds	r3, #1
 80077d4:	75fb      	strb	r3, [r7, #23]
 80077d6:	e003      	b.n	80077e0 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80077d8:	8a7b      	ldrh	r3, [r7, #18]
 80077da:	08db      	lsrs	r3, r3, #3
 80077dc:	b29b      	uxth	r3, r3
 80077de:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	60fa      	str	r2, [r7, #12]
 80077e6:	7dfa      	ldrb	r2, [r7, #23]
 80077e8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	3301      	adds	r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80077f6:	8a7a      	ldrh	r2, [r7, #18]
 80077f8:	8abb      	ldrh	r3, [r7, #20]
 80077fa:	4619      	mov	r1, r3
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 ffb9 	bl	8008774 <eMBRegDiscreteCB>
 8007802:	4603      	mov	r3, r0
 8007804:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d006      	beq.n	800781a <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800780c:	7afb      	ldrb	r3, [r7, #11]
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fc97 	bl	8008142 <prveMBError2Exception>
 8007814:	4603      	mov	r3, r0
 8007816:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8007818:	e00d      	b.n	8007836 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	881a      	ldrh	r2, [r3, #0]
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	b29b      	uxth	r3, r3
 8007822:	4413      	add	r3, r2
 8007824:	b29a      	uxth	r2, r3
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800782a:	e004      	b.n	8007836 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800782c:	2303      	movs	r3, #3
 800782e:	75bb      	strb	r3, [r7, #22]
 8007830:	e001      	b.n	8007836 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007832:	2303      	movs	r3, #3
 8007834:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8007836:	7dbb      	ldrb	r3, [r7, #22]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	2b05      	cmp	r3, #5
 8007854:	d122      	bne.n	800789c <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	3301      	adds	r3, #1
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3302      	adds	r3, #2
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	b29a      	uxth	r2, r3
 800786a:	89bb      	ldrh	r3, [r7, #12]
 800786c:	4313      	orrs	r3, r2
 800786e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8007870:	89bb      	ldrh	r3, [r7, #12]
 8007872:	3301      	adds	r3, #1
 8007874:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	1cd8      	adds	r0, r3, #3
 800787a:	89b9      	ldrh	r1, [r7, #12]
 800787c:	2301      	movs	r3, #1
 800787e:	2201      	movs	r2, #1
 8007880:	f000 fe4e 	bl	8008520 <eMBRegHoldingCB>
 8007884:	4603      	mov	r3, r0
 8007886:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d008      	beq.n	80078a0 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	4618      	mov	r0, r3
 8007892:	f000 fc56 	bl	8008142 <prveMBError2Exception>
 8007896:	4603      	mov	r3, r0
 8007898:	73fb      	strb	r3, [r7, #15]
 800789a:	e001      	b.n	80078a0 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800789c:	2303      	movs	r3, #3
 800789e:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	2b05      	cmp	r3, #5
 80078be:	d946      	bls.n	800794e <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3301      	adds	r3, #1
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	021b      	lsls	r3, r3, #8
 80078ca:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3302      	adds	r3, #2
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	89bb      	ldrh	r3, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80078da:	89bb      	ldrh	r3, [r7, #12]
 80078dc:	3301      	adds	r3, #1
 80078de:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3303      	adds	r3, #3
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3304      	adds	r3, #4
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	897b      	ldrh	r3, [r7, #10]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	795b      	ldrb	r3, [r3, #5]
 80078fe:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8007900:	897b      	ldrh	r3, [r7, #10]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d020      	beq.n	8007948 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8007906:	897b      	ldrh	r3, [r7, #10]
 8007908:	2b78      	cmp	r3, #120	; 0x78
 800790a:	d81d      	bhi.n	8007948 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 800790c:	897b      	ldrh	r3, [r7, #10]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8007914:	7a7a      	ldrb	r2, [r7, #9]
 8007916:	429a      	cmp	r2, r3
 8007918:	d116      	bne.n	8007948 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	1d98      	adds	r0, r3, #6
 800791e:	897a      	ldrh	r2, [r7, #10]
 8007920:	89b9      	ldrh	r1, [r7, #12]
 8007922:	2301      	movs	r3, #1
 8007924:	f000 fdfc 	bl	8008520 <eMBRegHoldingCB>
 8007928:	4603      	mov	r3, r0
 800792a:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800792c:	7a3b      	ldrb	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d006      	beq.n	8007940 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007932:	7a3b      	ldrb	r3, [r7, #8]
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fc04 	bl	8008142 <prveMBError2Exception>
 800793a:	4603      	mov	r3, r0
 800793c:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800793e:	e008      	b.n	8007952 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2205      	movs	r2, #5
 8007944:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007946:	e004      	b.n	8007952 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007948:	2303      	movs	r3, #3
 800794a:	73fb      	strb	r3, [r7, #15]
 800794c:	e001      	b.n	8007952 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800794e:	2303      	movs	r3, #3
 8007950:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	2b05      	cmp	r3, #5
 8007970:	d15f      	bne.n	8007a32 <eMBFuncReadHoldingRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3301      	adds	r3, #1
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3302      	adds	r3, #2
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	b29a      	uxth	r2, r3
 8007986:	8abb      	ldrh	r3, [r7, #20]
 8007988:	4313      	orrs	r3, r2
 800798a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800798c:	8abb      	ldrh	r3, [r7, #20]
 800798e:	3301      	adds	r3, #1
 8007990:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3303      	adds	r3, #3
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	021b      	lsls	r3, r3, #8
 800799c:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3304      	adds	r3, #4
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	8a7b      	ldrh	r3, [r7, #18]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80079ac:	8a7b      	ldrh	r3, [r7, #18]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d03c      	beq.n	8007a2c <eMBFuncReadHoldingRegister+0xd0>
 80079b2:	8a7b      	ldrh	r3, [r7, #18]
 80079b4:	2b7d      	cmp	r3, #125	; 0x7d
 80079b6:	d839      	bhi.n	8007a2c <eMBFuncReadHoldingRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2200      	movs	r2, #0
 80079c0:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	60fa      	str	r2, [r7, #12]
 80079c8:	2203      	movs	r2, #3
 80079ca:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	3301      	adds	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80079d8:	8a7b      	ldrh	r3, [r7, #18]
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	1c59      	adds	r1, r3, #1
 80079e0:	60f9      	str	r1, [r7, #12]
 80079e2:	0052      	lsls	r2, r2, #1
 80079e4:	b2d2      	uxtb	r2, r2
 80079e6:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	3301      	adds	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80079f4:	8a7a      	ldrh	r2, [r7, #18]
 80079f6:	8ab9      	ldrh	r1, [r7, #20]
 80079f8:	2300      	movs	r3, #0
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fd90 	bl	8008520 <eMBRegHoldingCB>
 8007a00:	4603      	mov	r3, r0
 8007a02:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d006      	beq.n	8007a18 <eMBFuncReadHoldingRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007a0a:	7afb      	ldrb	r3, [r7, #11]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fb98 	bl	8008142 <prveMBError2Exception>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8007a16:	e00e      	b.n	8007a36 <eMBFuncReadHoldingRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	881a      	ldrh	r2, [r3, #0]
 8007a1c:	8a7b      	ldrh	r3, [r7, #18]
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007a2a:	e004      	b.n	8007a36 <eMBFuncReadHoldingRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	75fb      	strb	r3, [r7, #23]
 8007a30:	e001      	b.n	8007a36 <eMBFuncReadHoldingRegister+0xda>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007a32:	2303      	movs	r3, #3
 8007a34:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	2b09      	cmp	r3, #9
 8007a54:	f240 8099 	bls.w	8007b8a <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3302      	adds	r3, #2
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	8abb      	ldrh	r3, [r7, #20]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8007a72:	8abb      	ldrh	r3, [r7, #20]
 8007a74:	3301      	adds	r3, #1
 8007a76:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3303      	adds	r3, #3
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	021b      	lsls	r3, r3, #8
 8007a82:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3304      	adds	r3, #4
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	8a7b      	ldrh	r3, [r7, #18]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	3305      	adds	r3, #5
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3306      	adds	r3, #6
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	8a3b      	ldrh	r3, [r7, #16]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8007aac:	8a3b      	ldrh	r3, [r7, #16]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3307      	adds	r3, #7
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	89fb      	ldrh	r3, [r7, #14]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	7a5b      	ldrb	r3, [r3, #9]
 8007ad0:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8007ad2:	8a7b      	ldrh	r3, [r7, #18]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d056      	beq.n	8007b86 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8007ad8:	8a7b      	ldrh	r3, [r7, #18]
 8007ada:	2b7d      	cmp	r3, #125	; 0x7d
 8007adc:	d853      	bhi.n	8007b86 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8007ade:	89fb      	ldrh	r3, [r7, #14]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d050      	beq.n	8007b86 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8007ae4:	89fb      	ldrh	r3, [r7, #14]
 8007ae6:	2b79      	cmp	r3, #121	; 0x79
 8007ae8:	d84d      	bhi.n	8007b86 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8007aea:	89fb      	ldrh	r3, [r7, #14]
 8007aec:	005a      	lsls	r2, r3, #1
 8007aee:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d148      	bne.n	8007b86 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f103 000a 	add.w	r0, r3, #10
 8007afa:	89fa      	ldrh	r2, [r7, #14]
 8007afc:	8a39      	ldrh	r1, [r7, #16]
 8007afe:	2301      	movs	r3, #1
 8007b00:	f000 fd0e 	bl	8008520 <eMBRegHoldingCB>
 8007b04:	4603      	mov	r3, r0
 8007b06:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8007b08:	7dbb      	ldrb	r3, [r7, #22]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d131      	bne.n	8007b72 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2200      	movs	r2, #0
 8007b16:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	60ba      	str	r2, [r7, #8]
 8007b1e:	2217      	movs	r2, #23
 8007b20:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	3301      	adds	r3, #1
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8007b2e:	8a7b      	ldrh	r3, [r7, #18]
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	1c59      	adds	r1, r3, #1
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	0052      	lsls	r2, r2, #1
 8007b3a:	b2d2      	uxtb	r2, r2
 8007b3c:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8007b4a:	8a7a      	ldrh	r2, [r7, #18]
 8007b4c:	8ab9      	ldrh	r1, [r7, #20]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	68b8      	ldr	r0, [r7, #8]
 8007b52:	f000 fce5 	bl	8008520 <eMBRegHoldingCB>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8007b5a:	7dbb      	ldrb	r3, [r7, #22]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d108      	bne.n	8007b72 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	881a      	ldrh	r2, [r3, #0]
 8007b64:	8a7b      	ldrh	r3, [r7, #18]
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	4413      	add	r3, r2
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8007b72:	7dbb      	ldrb	r3, [r7, #22]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d008      	beq.n	8007b8a <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007b78:	7dbb      	ldrb	r3, [r7, #22]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 fae1 	bl	8008142 <prveMBError2Exception>
 8007b80:	4603      	mov	r3, r0
 8007b82:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8007b84:	e001      	b.n	8007b8a <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007b86:	2303      	movs	r3, #3
 8007b88:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	2b05      	cmp	r3, #5
 8007ba8:	d15f      	bne.n	8007c6a <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3301      	adds	r3, #1
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3302      	adds	r3, #2
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	8abb      	ldrh	r3, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007bc4:	8abb      	ldrh	r3, [r7, #20]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3303      	adds	r3, #3
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	8a7b      	ldrh	r3, [r7, #18]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 )
 8007be4:	8a7b      	ldrh	r3, [r7, #18]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d03c      	beq.n	8007c64 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8007bea:	8a7b      	ldrh	r3, [r7, #18]
 8007bec:	2b7c      	cmp	r3, #124	; 0x7c
 8007bee:	d839      	bhi.n	8007c64 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	60fa      	str	r2, [r7, #12]
 8007c00:	2204      	movs	r2, #4
 8007c02:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8007c10:	8a7b      	ldrh	r3, [r7, #18]
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	1c59      	adds	r1, r3, #1
 8007c18:	60f9      	str	r1, [r7, #12]
 8007c1a:	0052      	lsls	r2, r2, #1
 8007c1c:	b2d2      	uxtb	r2, r2
 8007c1e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	3301      	adds	r3, #1
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8007c2c:	8a7a      	ldrh	r2, [r7, #18]
 8007c2e:	8abb      	ldrh	r3, [r7, #20]
 8007c30:	4619      	mov	r1, r3
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fc22 	bl	800847c <eMBRegInputCB>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d006      	beq.n	8007c50 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007c42:	7afb      	ldrb	r3, [r7, #11]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fa7c 	bl	8008142 <prveMBError2Exception>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8007c4e:	e00e      	b.n	8007c6e <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	881a      	ldrh	r2, [r3, #0]
 8007c54:	8a7b      	ldrh	r3, [r7, #18]
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	4413      	add	r3, r2
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8007c62:	e004      	b.n	8007c6e <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007c64:	2303      	movs	r3, #3
 8007c66:	75fb      	strb	r3, [r7, #23]
 8007c68:	e001      	b.n	8007c6e <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3301      	adds	r3, #1
 8007c86:	4a08      	ldr	r2, [pc, #32]	; (8007ca8 <eMBFuncReportSlaveID+0x30>)
 8007c88:	8812      	ldrh	r2, [r2, #0]
 8007c8a:	4908      	ldr	r1, [pc, #32]	; (8007cac <eMBFuncReportSlaveID+0x34>)
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f003 feb9 	bl	800ba04 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8007c92:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <eMBFuncReportSlaveID+0x30>)
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	3301      	adds	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	200016f8 	.word	0x200016f8
 8007cac:	200016d8 	.word	0x200016d8

08007cb0 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	603a      	str	r2, [r7, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	71fb      	strb	r3, [r7, #7]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	71bb      	strb	r3, [r7, #6]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8007cca:	f000 fa5b 	bl	8008184 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8007cce:	797b      	ldrb	r3, [r7, #5]
 8007cd0:	79b8      	ldrb	r0, [r7, #6]
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	f000 fb17 	bl	8008308 <xMBPortSerialInit>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d002      	beq.n	8007ce6 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	73fb      	strb	r3, [r7, #15]
 8007ce4:	e00b      	b.n	8007cfe <eMBRTUInit+0x4e>
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
       // if( ulBaudRate > 19200 )
      //  {
            usTimerT35_50us = 35;       /* 1800us. */
 8007ce6:	2323      	movs	r3, #35	; 0x23
 8007ce8:	60bb      	str	r3, [r7, #8]
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
          //  usTimerT35_50us = (19607 ) / ( ulBaudRate/11 );
      //  }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 fbaa 	bl	8008448 <xMBPortTimersInit>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d001      	beq.n	8007cfe <eMBRTUInit+0x4e>
        {
            eStatus = MB_EPORTERR;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8007cfe:	f000 fa47 	bl	8008190 <ExitCriticalSection>

    return eStatus;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8007d10:	f000 fa38 	bl	8008184 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8007d14:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <eMBRTUStart+0x24>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	f000 fb33 	bl	8008388 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8007d22:	f000 fb9f 	bl	8008464 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 8007d26:	f000 fa33 	bl	8008190 <ExitCriticalSection>
}
 8007d2a:	bf00      	nop
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	200016fb 	.word	0x200016fb

08007d34 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8007d38:	f000 fa24 	bl	8008184 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f000 fb22 	bl	8008388 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8007d44:	f000 fb94 	bl	8008470 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8007d48:	f000 fa22 	bl	8008190 <ExitCriticalSection>
}
 8007d4c:	bf00      	nop
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 8007d60:	f000 fa10 	bl	8008184 <EnterCriticalSection>
//    assert_param( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8007d64:	4b13      	ldr	r3, [pc, #76]	; (8007db4 <eMBRTUReceive+0x64>)
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d919      	bls.n	8007da2 <eMBRTUReceive+0x52>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8007d6e:	4b11      	ldr	r3, [pc, #68]	; (8007db4 <eMBRTUReceive+0x64>)
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4619      	mov	r1, r3
 8007d76:	4810      	ldr	r0, [pc, #64]	; (8007db8 <eMBRTUReceive+0x68>)
 8007d78:	f7ff fb74 	bl	8007464 <usMBCRC16>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10f      	bne.n	8007da2 <eMBRTUReceive+0x52>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8007d82:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <eMBRTUReceive+0x68>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8007d8c:	4b09      	ldr	r3, [pc, #36]	; (8007db4 <eMBRTUReceive+0x64>)
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	3b03      	subs	r3, #3
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4a07      	ldr	r2, [pc, #28]	; (8007dbc <eMBRTUReceive+0x6c>)
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	e001      	b.n	8007da6 <eMBRTUReceive+0x56>
    }
    else
    {
        eStatus = MB_EIO;
 8007da2:	2305      	movs	r3, #5
 8007da4:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8007da6:	f000 f9f3 	bl	8008190 <ExitCriticalSection>
    return eStatus;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20001802 	.word	0x20001802
 8007db8:	200016fc 	.word	0x200016fc
 8007dbc:	200016fd 	.word	0x200016fd

08007dc0 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	71fb      	strb	r3, [r7, #7]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 8007dd4:	f000 f9d6 	bl	8008184 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8007dd8:	4b26      	ldr	r3, [pc, #152]	; (8007e74 <eMBRTUSend+0xb4>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d13f      	bne.n	8007e62 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	4a24      	ldr	r2, [pc, #144]	; (8007e78 <eMBRTUSend+0xb8>)
 8007de8:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 8007dea:	4b24      	ldr	r3, [pc, #144]	; (8007e7c <eMBRTUSend+0xbc>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8007df0:	4b21      	ldr	r3, [pc, #132]	; (8007e78 <eMBRTUSend+0xb8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	79fa      	ldrb	r2, [r7, #7]
 8007df6:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8007df8:	4b20      	ldr	r3, [pc, #128]	; (8007e7c <eMBRTUSend+0xbc>)
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	88bb      	ldrh	r3, [r7, #4]
 8007e00:	4413      	add	r3, r2
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	4b1d      	ldr	r3, [pc, #116]	; (8007e7c <eMBRTUSend+0xbc>)
 8007e06:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8007e08:	4b1b      	ldr	r3, [pc, #108]	; (8007e78 <eMBRTUSend+0xb8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1b      	ldr	r2, [pc, #108]	; (8007e7c <eMBRTUSend+0xbc>)
 8007e0e:	8812      	ldrh	r2, [r2, #0]
 8007e10:	b292      	uxth	r2, r2
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff fb25 	bl	8007464 <usMBCRC16>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8007e1e:	4b17      	ldr	r3, [pc, #92]	; (8007e7c <eMBRTUSend+0xbc>)
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	b291      	uxth	r1, r2
 8007e28:	4a14      	ldr	r2, [pc, #80]	; (8007e7c <eMBRTUSend+0xbc>)
 8007e2a:	8011      	strh	r1, [r2, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	89bb      	ldrh	r3, [r7, #12]
 8007e30:	b2d9      	uxtb	r1, r3
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <eMBRTUSend+0xc0>)
 8007e34:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8007e36:	89bb      	ldrh	r3, [r7, #12]
 8007e38:	0a1b      	lsrs	r3, r3, #8
 8007e3a:	b299      	uxth	r1, r3
 8007e3c:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <eMBRTUSend+0xbc>)
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	b290      	uxth	r0, r2
 8007e46:	4a0d      	ldr	r2, [pc, #52]	; (8007e7c <eMBRTUSend+0xbc>)
 8007e48:	8010      	strh	r0, [r2, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	b2c9      	uxtb	r1, r1
 8007e4e:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <eMBRTUSend+0xc0>)
 8007e50:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8007e52:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <eMBRTUSend+0xc4>)
 8007e54:	2201      	movs	r2, #1
 8007e56:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8007e58:	2101      	movs	r1, #1
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	f000 fa94 	bl	8008388 <vMBPortSerialEnable>
 8007e60:	e001      	b.n	8007e66 <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 8007e62:	2305      	movs	r3, #5
 8007e64:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 8007e66:	f000 f993 	bl	8008190 <ExitCriticalSection>
    return eStatus;
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	200016fb 	.word	0x200016fb
 8007e78:	200017fc 	.word	0x200017fc
 8007e7c:	20001800 	.word	0x20001800
 8007e80:	200016fc 	.word	0x200016fc
 8007e84:	200016fa 	.word	0x200016fa

08007e88 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

  //  assert_param( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8007e92:	1dbb      	adds	r3, r7, #6
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fac7 	bl	8008428 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8007e9a:	4b23      	ldr	r3, [pc, #140]	; (8007f28 <xMBRTUReceiveFSM+0xa0>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d83c      	bhi.n	8007f1e <xMBRTUReceiveFSM+0x96>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <xMBRTUReceiveFSM+0x24>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007ebd 	.word	0x08007ebd
 8007eb0:	08007ec9 	.word	0x08007ec9
 8007eb4:	08007ef1 	.word	0x08007ef1
 8007eb8:	08007ec3 	.word	0x08007ec3
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable( );
 8007ebc:	f000 fad2 	bl	8008464 <vMBPortTimersEnable>
        break;
 8007ec0:	e02d      	b.n	8007f1e <xMBRTUReceiveFSM+0x96>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable( );
 8007ec2:	f000 facf 	bl	8008464 <vMBPortTimersEnable>
        break;
 8007ec6:	e02a      	b.n	8007f1e <xMBRTUReceiveFSM+0x96>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8007ec8:	4b18      	ldr	r3, [pc, #96]	; (8007f2c <xMBRTUReceiveFSM+0xa4>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8007ece:	4b17      	ldr	r3, [pc, #92]	; (8007f2c <xMBRTUReceiveFSM+0xa4>)
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	b291      	uxth	r1, r2
 8007ed8:	4a14      	ldr	r2, [pc, #80]	; (8007f2c <xMBRTUReceiveFSM+0xa4>)
 8007eda:	8011      	strh	r1, [r2, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	79b9      	ldrb	r1, [r7, #6]
 8007ee0:	4b13      	ldr	r3, [pc, #76]	; (8007f30 <xMBRTUReceiveFSM+0xa8>)
 8007ee2:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 8007ee4:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <xMBRTUReceiveFSM+0xa0>)
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable( );
 8007eea:	f000 fabb 	bl	8008464 <vMBPortTimersEnable>
        break;
 8007eee:	e016      	b.n	8007f1e <xMBRTUReceiveFSM+0x96>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8007ef0:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <xMBRTUReceiveFSM+0xa4>)
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2bff      	cmp	r3, #255	; 0xff
 8007ef8:	d80b      	bhi.n	8007f12 <xMBRTUReceiveFSM+0x8a>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8007efa:	4b0c      	ldr	r3, [pc, #48]	; (8007f2c <xMBRTUReceiveFSM+0xa4>)
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	b291      	uxth	r1, r2
 8007f04:	4a09      	ldr	r2, [pc, #36]	; (8007f2c <xMBRTUReceiveFSM+0xa4>)
 8007f06:	8011      	strh	r1, [r2, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	79b9      	ldrb	r1, [r7, #6]
 8007f0c:	4b08      	ldr	r3, [pc, #32]	; (8007f30 <xMBRTUReceiveFSM+0xa8>)
 8007f0e:	5499      	strb	r1, [r3, r2]
 8007f10:	e002      	b.n	8007f18 <xMBRTUReceiveFSM+0x90>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8007f12:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <xMBRTUReceiveFSM+0xa0>)
 8007f14:	2203      	movs	r2, #3
 8007f16:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable();
 8007f18:	f000 faa4 	bl	8008464 <vMBPortTimersEnable>
        break;
 8007f1c:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8007f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	200016fb 	.word	0x200016fb
 8007f2c:	20001802 	.word	0x20001802
 8007f30:	200016fc 	.word	0x200016fc

08007f34 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	71fb      	strb	r3, [r7, #7]

   // assert_param( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
 8007f3e:	4b1c      	ldr	r3, [pc, #112]	; (8007fb0 <xMBRTUTransmitFSM+0x7c>)
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <xMBRTUTransmitFSM+0x1a>
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d005      	beq.n	8007f58 <xMBRTUTransmitFSM+0x24>
 8007f4c:	e02a      	b.n	8007fa4 <xMBRTUTransmitFSM+0x70>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8007f4e:	2100      	movs	r1, #0
 8007f50:	2001      	movs	r0, #1
 8007f52:	f000 fa19 	bl	8008388 <vMBPortSerialEnable>
        break;
 8007f56:	e025      	b.n	8007fa4 <xMBRTUTransmitFSM+0x70>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8007f58:	4b16      	ldr	r3, [pc, #88]	; (8007fb4 <xMBRTUTransmitFSM+0x80>)
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d013      	beq.n	8007f8a <xMBRTUTransmitFSM+0x56>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8007f62:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <xMBRTUTransmitFSM+0x84>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fa42 	bl	80083f4 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8007f70:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <xMBRTUTransmitFSM+0x84>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	4a10      	ldr	r2, [pc, #64]	; (8007fb8 <xMBRTUTransmitFSM+0x84>)
 8007f78:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 8007f7a:	4b0e      	ldr	r3, [pc, #56]	; (8007fb4 <xMBRTUTransmitFSM+0x80>)
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <xMBRTUTransmitFSM+0x80>)
 8007f86:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 8007f88:	e00b      	b.n	8007fa2 <xMBRTUTransmitFSM+0x6e>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8007f8a:	2008      	movs	r0, #8
 8007f8c:	f000 f914 	bl	80081b8 <xMBPortEventPost>
 8007f90:	4603      	mov	r3, r0
 8007f92:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 8007f94:	2100      	movs	r1, #0
 8007f96:	2001      	movs	r0, #1
 8007f98:	f000 f9f6 	bl	8008388 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8007f9c:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <xMBRTUTransmitFSM+0x7c>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	701a      	strb	r2, [r3, #0]
        break;
 8007fa2:	bf00      	nop
    }

    return xNeedPoll;
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	200016fa 	.word	0x200016fa
 8007fb4:	20001800 	.word	0x20001800
 8007fb8:	200017fc 	.word	0x200017fc

08007fbc <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8007fc6:	4b12      	ldr	r3, [pc, #72]	; (8008010 <xMBRTUTimerT35Expired+0x54>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d012      	beq.n	8007ff6 <xMBRTUTimerT35Expired+0x3a>
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	dc12      	bgt.n	8007ffa <xMBRTUTimerT35Expired+0x3e>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <xMBRTUTimerT35Expired+0x22>
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d006      	beq.n	8007fea <xMBRTUTimerT35Expired+0x2e>

        /* Function called in an illegal state. */
    default:
    //    assert_param( ( eRcvState == STATE_RX_INIT ) ||
    //            ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
         break;
 8007fdc:	e00d      	b.n	8007ffa <xMBRTUTimerT35Expired+0x3e>
        xNeedPoll = xMBPortEventPost( EV_READY );
 8007fde:	2001      	movs	r0, #1
 8007fe0:	f000 f8ea 	bl	80081b8 <xMBPortEventPost>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	71fb      	strb	r3, [r7, #7]
        break;
 8007fe8:	e008      	b.n	8007ffc <xMBRTUTimerT35Expired+0x40>
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8007fea:	2002      	movs	r0, #2
 8007fec:	f000 f8e4 	bl	80081b8 <xMBPortEventPost>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	71fb      	strb	r3, [r7, #7]
        break;
 8007ff4:	e002      	b.n	8007ffc <xMBRTUTimerT35Expired+0x40>
        break;
 8007ff6:	bf00      	nop
 8007ff8:	e000      	b.n	8007ffc <xMBRTUTimerT35Expired+0x40>
         break;
 8007ffa:	bf00      	nop
    }

    vMBPortTimersDisable(  );
 8007ffc:	f000 fa38 	bl	8008470 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8008000:	4b03      	ldr	r3, [pc, #12]	; (8008010 <xMBRTUTimerT35Expired+0x54>)
 8008002:	2201      	movs	r2, #1
 8008004:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8008006:	79fb      	ldrb	r3, [r7, #7]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	200016fb 	.word	0x200016fb

08008014 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	4608      	mov	r0, r1
 800801e:	4611      	mov	r1, r2
 8008020:	461a      	mov	r2, r3
 8008022:	4603      	mov	r3, r0
 8008024:	807b      	strh	r3, [r7, #2]
 8008026:	460b      	mov	r3, r1
 8008028:	707b      	strb	r3, [r7, #1]
 800802a:	4613      	mov	r3, r2
 800802c:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 800802e:	783b      	ldrb	r3, [r7, #0]
 8008030:	82fb      	strh	r3, [r7, #22]
  //  assert_param( ucNBits <= 8 );
  //  assert_param( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8008032:	887b      	ldrh	r3, [r7, #2]
 8008034:	08db      	lsrs	r3, r3, #3
 8008036:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8008038:	8abb      	ldrh	r3, [r7, #20]
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	b29b      	uxth	r3, r3
 800803e:	887a      	ldrh	r2, [r7, #2]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8008044:	8afa      	ldrh	r2, [r7, #22]
 8008046:	8a7b      	ldrh	r3, [r7, #18]
 8008048:	fa02 f303 	lsl.w	r3, r2, r3
 800804c:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 800804e:	787b      	ldrb	r3, [r7, #1]
 8008050:	2201      	movs	r2, #1
 8008052:	fa02 f303 	lsl.w	r3, r2, r3
 8008056:	b29b      	uxth	r3, r3
 8008058:	3b01      	subs	r3, #1
 800805a:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 800805c:	8a3a      	ldrh	r2, [r7, #16]
 800805e:	8879      	ldrh	r1, [r7, #2]
 8008060:	8abb      	ldrh	r3, [r7, #20]
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	1acb      	subs	r3, r1, r3
 8008066:	fa02 f303 	lsl.w	r3, r2, r3
 800806a:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 800806c:	8abb      	ldrh	r3, [r7, #20]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	4413      	add	r3, r2
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8008076:	8abb      	ldrh	r3, [r7, #20]
 8008078:	3301      	adds	r3, #1
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	4413      	add	r3, r2
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	b21a      	sxth	r2, r3
 8008084:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008088:	4313      	orrs	r3, r2
 800808a:	b21b      	sxth	r3, r3
 800808c:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 800808e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008092:	43db      	mvns	r3, r3
 8008094:	b21a      	sxth	r2, r3
 8008096:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800809a:	4013      	ands	r3, r2
 800809c:	b21a      	sxth	r2, r3
 800809e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	b21b      	sxth	r3, r3
 80080a6:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 80080a8:	8abb      	ldrh	r3, [r7, #20]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	4413      	add	r3, r2
 80080ae:	89fa      	ldrh	r2, [r7, #14]
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 80080b4:	89fb      	ldrh	r3, [r7, #14]
 80080b6:	0a1b      	lsrs	r3, r3, #8
 80080b8:	b299      	uxth	r1, r3
 80080ba:	8abb      	ldrh	r3, [r7, #20]
 80080bc:	3301      	adds	r3, #1
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	4413      	add	r3, r2
 80080c2:	b2ca      	uxtb	r2, r1
 80080c4:	701a      	strb	r2, [r3, #0]
}
 80080c6:	bf00      	nop
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bc80      	pop	{r7}
 80080ce:	4770      	bx	lr

080080d0 <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	807b      	strh	r3, [r7, #2]
 80080dc:	4613      	mov	r3, r2
 80080de:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80080e0:	887b      	ldrh	r3, [r7, #2]
 80080e2:	08db      	lsrs	r3, r3, #3
 80080e4:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 80080e6:	89fb      	ldrh	r3, [r7, #14]
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	887a      	ldrh	r2, [r7, #2]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80080f2:	787b      	ldrb	r3, [r7, #1]
 80080f4:	2201      	movs	r2, #1
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	3b01      	subs	r3, #1
 80080fe:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8008100:	89fb      	ldrh	r3, [r7, #14]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	4413      	add	r3, r2
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800810a:	89fb      	ldrh	r3, [r7, #14]
 800810c:	3301      	adds	r3, #1
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	4413      	add	r3, r2
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	b21a      	sxth	r2, r3
 8008118:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800811c:	4313      	orrs	r3, r2
 800811e:	b21b      	sxth	r3, r3
 8008120:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8008122:	893a      	ldrh	r2, [r7, #8]
 8008124:	89bb      	ldrh	r3, [r7, #12]
 8008126:	fa42 f303 	asr.w	r3, r2, r3
 800812a:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 800812c:	893a      	ldrh	r2, [r7, #8]
 800812e:	897b      	ldrh	r3, [r7, #10]
 8008130:	4013      	ands	r3, r2
 8008132:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 8008134:	893b      	ldrh	r3, [r7, #8]
 8008136:	b2db      	uxtb	r3, r3
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	bc80      	pop	{r7}
 8008140:	4770      	bx	lr

08008142 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	4603      	mov	r3, r0
 800814a:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	2b07      	cmp	r3, #7
 8008150:	d00c      	beq.n	800816c <prveMBError2Exception+0x2a>
 8008152:	2b07      	cmp	r3, #7
 8008154:	dc0d      	bgt.n	8008172 <prveMBError2Exception+0x30>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <prveMBError2Exception+0x1e>
 800815a:	2b01      	cmp	r3, #1
 800815c:	d003      	beq.n	8008166 <prveMBError2Exception+0x24>
 800815e:	e008      	b.n	8008172 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]
            break;
 8008164:	e008      	b.n	8008178 <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8008166:	2302      	movs	r3, #2
 8008168:	73fb      	strb	r3, [r7, #15]
            break;
 800816a:	e005      	b.n	8008178 <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800816c:	2306      	movs	r3, #6
 800816e:	73fb      	strb	r3, [r7, #15]
            break;
 8008170:	e002      	b.n	8008178 <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8008172:	2304      	movs	r3, #4
 8008174:	73fb      	strb	r3, [r7, #15]
            break;
 8008176:	bf00      	nop
    }

    return eStatus;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	bc80      	pop	{r7}
 8008182:	4770      	bx	lr

08008184 <EnterCriticalSection>:
#include "../Inc/port.h"
/* ----------------------- Variables ----------------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
  //  rt_enter_critical();
}
 8008188:	bf00      	nop
 800818a:	46bd      	mov	sp, r7
 800818c:	bc80      	pop	{r7}
 800818e:	4770      	bx	lr

08008190 <ExitCriticalSection>:

void ExitCriticalSection(void)
{
 8008190:	b480      	push	{r7}
 8008192:	af00      	add	r7, sp, #0
   // rt_exit_critical();
}
 8008194:	bf00      	nop
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr

0800819c <xMBPortEventInit>:



BOOL
xMBPortEventInit( void )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
	xSlaveOsEventGroupHandle = xGetOSEvent();
 80081a0:	f7f9 f9c0 	bl	8001524 <xGetOSEvent>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	4b02      	ldr	r3, [pc, #8]	; (80081b4 <xMBPortEventInit+0x18>)
 80081aa:	601a      	str	r2, [r3, #0]

   // rt_event_init(&xSlaveOsEvent,"slave event",RT_IPC_FLAG_PRIO);
    return TRUE;
 80081ac:	2301      	movs	r3, #1
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20001804 	.word	0x20001804

080081b8 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	71fb      	strb	r3, [r7, #7]
	BaseType_t xHigherPriorityTaskWoken, xResult;
	  switch (eEvent)
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d023      	beq.n	8008210 <xMBPortEventPost+0x58>
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	dc3e      	bgt.n	800824a <xMBPortEventPost+0x92>
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	dc02      	bgt.n	80081d6 <xMBPortEventPost+0x1e>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dc03      	bgt.n	80081dc <xMBPortEventPost+0x24>
 80081d4:	e039      	b.n	800824a <xMBPortEventPost+0x92>
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d01a      	beq.n	8008210 <xMBPortEventPost+0x58>
 80081da:	e036      	b.n	800824a <xMBPortEventPost+0x92>
	    {
	    case EV_READY:
	    case EV_FRAME_RECEIVED:

	    		/* xHigherPriorityTaskWoken must be initialised to pdFALSE. */
	    		xHigherPriorityTaskWoken = pdFALSE;
 80081dc:	2300      	movs	r3, #0
 80081de:	60bb      	str	r3, [r7, #8]

	    		 /* Set bit 0 and bit 4 in xEventGroup. */
	    		 xResult = xEventGroupSetBitsFromISR(
 80081e0:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <xMBPortEventPost+0x9c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	79f9      	ldrb	r1, [r7, #7]
 80081e6:	f107 0208 	add.w	r2, r7, #8
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 ff0a 	bl	8009004 <xEventGroupSetBitsFromISR>
 80081f0:	60f8      	str	r0, [r7, #12]
	    				 	 	 	 	 	 	 xSlaveOsEventGroupHandle,   /* The event group being updated. */
												 eEvent , /* The bits being set. */
	    		                              &xHigherPriorityTaskWoken );

	    		  /* Was the message posted successfully? */
	    		  if( xResult != pdFAIL )
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d025      	beq.n	8008244 <xMBPortEventPost+0x8c>
	    		  {
	    		      /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
	    		      switch should be requested.  The macro used is port specific and will
	    		      be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
	    		      the documentation page for the port being used. */
	    		      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d022      	beq.n	8008244 <xMBPortEventPost+0x8c>
 80081fe:	4b16      	ldr	r3, [pc, #88]	; (8008258 <xMBPortEventPost+0xa0>)
 8008200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	f3bf 8f6f 	isb	sy
	    		  }

	        break;
 800820e:	e019      	b.n	8008244 <xMBPortEventPost+0x8c>
	    case EV_EXECUTE:

	    case EV_FRAME_SENT:
	    	xHigherPriorityTaskWoken = pdFALSE;
 8008210:	2300      	movs	r3, #0
 8008212:	60bb      	str	r3, [r7, #8]
	    	xResult =xEventGroupSetBitsFromISR(
 8008214:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <xMBPortEventPost+0x9c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	79f9      	ldrb	r1, [r7, #7]
 800821a:	f107 0208 	add.w	r2, r7, #8
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fef0 	bl	8009004 <xEventGroupSetBitsFromISR>
 8008224:	60f8      	str	r0, [r7, #12]
 	 	 	 	 	 xSlaveOsEventGroupHandle,   /* The event group being updated. */
					 eEvent , /* The bits being set. */
                 &xHigherPriorityTaskWoken );
	    	 if( xResult != pdFAIL )
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00d      	beq.n	8008248 <xMBPortEventPost+0x90>
	    		    		  {
	    		    		      /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context
	    		    		      switch should be requested.  The macro used is port specific and will
	    		    		      be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
	    		    		      the documentation page for the port being used. */
	    		    		      portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <xMBPortEventPost+0x90>
 8008232:	4b09      	ldr	r3, [pc, #36]	; (8008258 <xMBPortEventPost+0xa0>)
 8008234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	f3bf 8f6f 	isb	sy
	    		    		  }
	    		//	xEventGroupSetBits(xSlaveOsEventGroupHandle,eEvent);
	        break;
 8008242:	e001      	b.n	8008248 <xMBPortEventPost+0x90>
	        break;
 8008244:	bf00      	nop
 8008246:	e000      	b.n	800824a <xMBPortEventPost+0x92>
	        break;
 8008248:	bf00      	nop
	    }



   // rt_event_send(&xSlaveOsEvent, eEvent);
    return TRUE;
 800824a:	2301      	movs	r3, #1
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20001804 	.word	0x20001804
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af02      	add	r7, sp, #8
 8008262:	6078      	str	r0, [r7, #4]
   // rt_uint32_t recvedEvent;
    /* waiting forever OS event */
	 EventBits_t recvedEvent;
	 recvedEvent = xEventGroupWaitBits(xSlaveOsEventGroupHandle,    EV_READY | EV_FRAME_RECEIVED | EV_EXECUTE | EV_FRAME_SENT,   pdTRUE, pdFALSE, portMAX_DELAY );
 8008264:	4b1b      	ldr	r3, [pc, #108]	; (80082d4 <xMBPortEventGet+0x78>)
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	f04f 33ff 	mov.w	r3, #4294967295
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	2300      	movs	r3, #0
 8008270:	2201      	movs	r2, #1
 8008272:	210f      	movs	r1, #15
 8008274:	f000 fd06 	bl	8008c84 <xEventGroupWaitBits>
 8008278:	60f8      	str	r0, [r7, #12]
   // rt_event_recv(&xSlaveOsEvent,
   //         EV_READY | EV_FRAME_RECEIVED | EV_EXECUTE | EV_FRAME_SENT,
   //         RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, RT_WAITING_FOREVER,
   //         &recvedEvent);
    switch (recvedEvent)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3b01      	subs	r3, #1
 800827e:	2b07      	cmp	r3, #7
 8008280:	d822      	bhi.n	80082c8 <xMBPortEventGet+0x6c>
 8008282:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <xMBPortEventGet+0x2c>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080082a9 	.word	0x080082a9
 800828c:	080082b1 	.word	0x080082b1
 8008290:	080082c9 	.word	0x080082c9
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082c9 	.word	0x080082c9
 800829c:	080082c9 	.word	0x080082c9
 80082a0:	080082c9 	.word	0x080082c9
 80082a4:	080082c1 	.word	0x080082c1
    {
    case EV_READY:
        *eEvent = EV_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	701a      	strb	r2, [r3, #0]
        break;
 80082ae:	e00b      	b.n	80082c8 <xMBPortEventGet+0x6c>
    case EV_FRAME_RECEIVED:
        *eEvent = EV_FRAME_RECEIVED;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	701a      	strb	r2, [r3, #0]
        break;
 80082b6:	e007      	b.n	80082c8 <xMBPortEventGet+0x6c>
    case EV_EXECUTE:
        *eEvent = EV_EXECUTE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2204      	movs	r2, #4
 80082bc:	701a      	strb	r2, [r3, #0]
        break;
 80082be:	e003      	b.n	80082c8 <xMBPortEventGet+0x6c>
    case EV_FRAME_SENT:
        *eEvent = EV_FRAME_SENT;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2208      	movs	r2, #8
 80082c4:	701a      	strb	r2, [r3, #0]
        break;
 80082c6:	bf00      	nop
    }
    return TRUE;
 80082c8:	2301      	movs	r3, #1
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20001804 	.word	0x20001804

080082d8 <vReviceEnable>:
//static void prvvUARTRxISR(void);
//static rt_err_t serial_rx_ind(rt_device_t dev, rt_size_t size);
//static void serial_soft_trans_irq(void* parameter);

static void vReviceEnable()
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN485_GPIO_Port,EN485_Pin,GPIO_PIN_RESET);
 80082dc:	2200      	movs	r2, #0
 80082de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082e2:	4802      	ldr	r0, [pc, #8]	; (80082ec <vReviceEnable+0x14>)
 80082e4:	f7fb fa93 	bl	800380e <HAL_GPIO_WritePin>

}
 80082e8:	bf00      	nop
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40010800 	.word	0x40010800

080082f0 <vTransmitEnable>:
static void vTransmitEnable()
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN485_GPIO_Port,EN485_Pin,GPIO_PIN_SET);
 80082f4:	2201      	movs	r2, #1
 80082f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082fa:	4802      	ldr	r0, [pc, #8]	; (8008304 <vTransmitEnable+0x14>)
 80082fc:	f7fb fa87 	bl	800380e <HAL_GPIO_WritePin>
}
 8008300:	bf00      	nop
 8008302:	bd80      	pop	{r7, pc}
 8008304:	40010800 	.word	0x40010800

08008308 <xMBPortSerialInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6039      	str	r1, [r7, #0]
 8008310:	4611      	mov	r1, r2
 8008312:	461a      	mov	r2, r3
 8008314:	4603      	mov	r3, r0
 8008316:	71fb      	strb	r3, [r7, #7]
 8008318:	460b      	mov	r3, r1
 800831a:	71bb      	strb	r3, [r7, #6]
 800831c:	4613      	mov	r3, r2
 800831e:	717b      	strb	r3, [r7, #5]
     * @note MODBUS_SLAVE_RT_CONTROL_PIN_INDEX need be defined by user
     */
  //  rt_pin_mode(MODBUS_SLAVE_RT_CONTROL_PIN_INDEX, PIN_MODE_OUTPUT);

    /* set serial configure parameter */
     huart1.Init.BaudRate = ulBaudRate;
 8008320:	4a18      	ldr	r2, [pc, #96]	; (8008384 <xMBPortSerialInit+0x7c>)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	6053      	str	r3, [r2, #4]
     huart1.Init.StopBits = UART_STOPBITS_1;
 8008326:	4b17      	ldr	r3, [pc, #92]	; (8008384 <xMBPortSerialInit+0x7c>)
 8008328:	2200      	movs	r2, #0
 800832a:	60da      	str	r2, [r3, #12]

    switch(eParity)
 800832c:	797b      	ldrb	r3, [r7, #5]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d016      	beq.n	8008360 <xMBPortSerialInit+0x58>
 8008332:	2b02      	cmp	r3, #2
 8008334:	dc1d      	bgt.n	8008372 <xMBPortSerialInit+0x6a>
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <xMBPortSerialInit+0x38>
 800833a:	2b01      	cmp	r3, #1
 800833c:	d007      	beq.n	800834e <xMBPortSerialInit+0x46>
 800833e:	e018      	b.n	8008372 <xMBPortSerialInit+0x6a>
    {
    	case MB_PAR_NONE:
    		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008340:	4b10      	ldr	r3, [pc, #64]	; (8008384 <xMBPortSerialInit+0x7c>)
 8008342:	2200      	movs	r2, #0
 8008344:	609a      	str	r2, [r3, #8]
    		huart1.Init.Parity = UART_PARITY_NONE;
 8008346:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <xMBPortSerialInit+0x7c>)
 8008348:	2200      	movs	r2, #0
 800834a:	611a      	str	r2, [r3, #16]
    		break;
 800834c:	e011      	b.n	8008372 <xMBPortSerialInit+0x6a>
    	case MB_PAR_ODD:
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800834e:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <xMBPortSerialInit+0x7c>)
 8008350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008354:	609a      	str	r2, [r3, #8]
    	  	huart1.Init.Parity = UART_PARITY_ODD;
 8008356:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <xMBPortSerialInit+0x7c>)
 8008358:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800835c:	611a      	str	r2, [r3, #16]
    	  	break;
 800835e:	e008      	b.n	8008372 <xMBPortSerialInit+0x6a>
    	case MB_PAR_EVEN:
    		huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8008360:	4b08      	ldr	r3, [pc, #32]	; (8008384 <xMBPortSerialInit+0x7c>)
 8008362:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008366:	609a      	str	r2, [r3, #8]
    		huart1.Init.Parity = UART_PARITY_EVEN;
 8008368:	4b06      	ldr	r3, [pc, #24]	; (8008384 <xMBPortSerialInit+0x7c>)
 800836a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800836e:	611a      	str	r2, [r3, #16]
    		break;
 8008370:	bf00      	nop
    }
    /* set serial configure */

    HAL_UART_Init(&huart1);
 8008372:	4804      	ldr	r0, [pc, #16]	; (8008384 <xMBPortSerialInit+0x7c>)
 8008374:	f7fe fcd4 	bl	8006d20 <HAL_UART_Init>
         //          serial_soft_trans_irq_stack,
          //         sizeof(serial_soft_trans_irq_stack),
           //        10, 5);
    //rt_thread_startup(&thread_serial_soft_trans_irq);

    return TRUE;
 8008378:	2301      	movs	r3, #1
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000468 	.word	0x20000468

08008388 <vMBPortSerialEnable>:

void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af02      	add	r7, sp, #8
 800838e:	4603      	mov	r3, r0
 8008390:	460a      	mov	r2, r1
 8008392:	71fb      	strb	r3, [r7, #7]
 8008394:	4613      	mov	r3, r2
 8008396:	71bb      	strb	r3, [r7, #6]
//    rt_uint32_t recved_event;
    if (xRxEnable)
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <vMBPortSerialEnable+0x26>
    {

    	HAL_UART_Receive_IT(&huart1,&rx_data_buf,1);
 800839e:	2201      	movs	r2, #1
 80083a0:	4911      	ldr	r1, [pc, #68]	; (80083e8 <vMBPortSerialEnable+0x60>)
 80083a2:	4812      	ldr	r0, [pc, #72]	; (80083ec <vMBPortSerialEnable+0x64>)
 80083a4:	f7fe fd41 	bl	8006e2a <HAL_UART_Receive_IT>
    	//HAL_HalfDuplex_EnableReceiver(&huart1);
        /* enable RX interrupt */
  //      serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_RX);
        /* switch 485 to receive mode */
    	vReviceEnable();
 80083a8:	f7ff ff96 	bl	80082d8 <vReviceEnable>
 80083ac:	e004      	b.n	80083b8 <vMBPortSerialEnable+0x30>

    }
    else
    {
        /* switch 485 to transmit mode */
    	vTransmitEnable();
 80083ae:	f7ff ff9f 	bl	80082f0 <vTransmitEnable>
        /* disable RX interrupt */
    	HAL_UART_AbortReceive_IT(&huart1);
 80083b2:	480e      	ldr	r0, [pc, #56]	; (80083ec <vMBPortSerialEnable+0x64>)
 80083b4:	f7fe fd5e 	bl	8006e74 <HAL_UART_AbortReceive_IT>
     //   serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *)RT_DEVICE_FLAG_INT_RX);
    }
    if (xTxEnable)
 80083b8:	79bb      	ldrb	r3, [r7, #6]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d006      	beq.n	80083cc <vMBPortSerialEnable+0x44>
    {
    	//HAL_HalfDuplex_EnableTransmitter(&huart1);

    	xEventGroupSetBits(xSerialEventGroupHandle,EVENT_SERIAL_TRANS_START);
 80083be:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <vMBPortSerialEnable+0x68>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2101      	movs	r1, #1
 80083c4:	4618      	mov	r0, r3
 80083c6:	f000 fd63 	bl	8008e90 <xEventGroupSetBits>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
        //rt_event_recv(&event_serial, EVENT_SERIAL_TRANS_START,
        //        RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, 0,
         //       &recved_event);
    }
}
 80083ca:	e008      	b.n	80083de <vMBPortSerialEnable+0x56>
    	xEventGroupWaitBits( xSerialEventGroupHandle,  EVENT_SERIAL_TRANS_START,  pdTRUE, pdFALSE, 0 );
 80083cc:	4b08      	ldr	r3, [pc, #32]	; (80083f0 <vMBPortSerialEnable+0x68>)
 80083ce:	6818      	ldr	r0, [r3, #0]
 80083d0:	2300      	movs	r3, #0
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	2300      	movs	r3, #0
 80083d6:	2201      	movs	r2, #1
 80083d8:	2101      	movs	r1, #1
 80083da:	f000 fc53 	bl	8008c84 <xEventGroupWaitBits>
}
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	2000180c 	.word	0x2000180c
 80083ec:	20000468 	.word	0x20000468
 80083f0:	20001808 	.word	0x20001808

080083f4 <xMBPortSerialPutByte>:
    //serial->parent.close(&(serial->parent));
}

BOOL xMBPortSerialPutByte(CHAR ucByte)

{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EN485_GPIO_Port,EN485_Pin,GPIO_PIN_SET);
 80083fe:	2201      	movs	r2, #1
 8008400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008404:	4806      	ldr	r0, [pc, #24]	; (8008420 <xMBPortSerialPutByte+0x2c>)
 8008406:	f7fb fa02 	bl	800380e <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(&huart1,(uint8_t *) &ucByte, 1);
 800840a:	1dfb      	adds	r3, r7, #7
 800840c:	2201      	movs	r2, #1
 800840e:	4619      	mov	r1, r3
 8008410:	4804      	ldr	r0, [pc, #16]	; (8008424 <xMBPortSerialPutByte+0x30>)
 8008412:	f7fe fcd5 	bl	8006dc0 <HAL_UART_Transmit_IT>
    //serial->parent.write(&(serial->parent), 0, ;
    return TRUE;
 8008416:	2301      	movs	r3, #1
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	40010800 	.word	0x40010800
 8008424:	20000468 	.word	0x20000468

08008428 <xMBPortSerialGetByte>:

BOOL xMBPortSerialGetByte(CHAR * pucByte)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
	* pucByte = rx_data;
 8008430:	4b04      	ldr	r3, [pc, #16]	; (8008444 <xMBPortSerialGetByte+0x1c>)
 8008432:	781a      	ldrb	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	701a      	strb	r2, [r3, #0]
    //serial->parent.read(&(serial->parent), 0, pucByte, 1);
    return TRUE;
 8008438:	2301      	movs	r3, #1
}
 800843a:	4618      	mov	r0, r3
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr
 8008444:	2000180d 	.word	0x2000180d

08008448 <xMBPortTimersInit>:



/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortTimersInit(USHORT usTim1Timerout50us)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	4603      	mov	r3, r0
 8008450:	80fb      	strh	r3, [r7, #6]

   vTimerInit(usTim1Timerout50us);
 8008452:	88fb      	ldrh	r3, [r7, #6]
 8008454:	4618      	mov	r0, r3
 8008456:	f7f9 f879 	bl	800154c <vTimerInit>
  //  rt_timer_init(&timer, "slave timer",
   //                timer_timeout_ind, /* bind timeout callback function */
    //               RT_NULL,
     //              (50 * usTim1Timerout50us) / (1000 * 1000 / RT_TICK_PER_SECOND) + 1,
      //             RT_TIMER_FLAG_ONE_SHOT); /* one shot */
    return TRUE;
 800845a:	2301      	movs	r3, #1
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <vMBPortTimersEnable>:

void vMBPortTimersEnable()
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
	vStartTimer();
 8008468:	f7f9 f886 	bl	8001578 <vStartTimer>
}
 800846c:	bf00      	nop
 800846e:	bd80      	pop	{r7, pc}

08008470 <vMBPortTimersDisable>:


void vMBPortTimersDisable()
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
	vStopTimer();
 8008474:	f7f9 f890 	bl	8001598 <vStopTimer>
}
 8008478:	bf00      	nop
 800847a:	bd80      	pop	{r7, pc}

0800847c <eMBRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	807b      	strh	r3, [r7, #2]
 8008488:	4613      	mov	r3, r2
 800848a:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800848c:	2300      	movs	r3, #0
 800848e:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usSRegInBuf;
 8008490:	4b21      	ldr	r3, [pc, #132]	; (8008518 <eMBRegInputCB+0x9c>)
 8008492:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = S_REG_INPUT_START;
 8008494:	2305      	movs	r3, #5
 8008496:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
 8008498:	2308      	movs	r3, #8
 800849a:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usSRegInStart;
 800849c:	4b1f      	ldr	r3, [pc, #124]	; (800851c <eMBRegInputCB+0xa0>)
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 80084a2:	887b      	ldrh	r3, [r7, #2]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 80084a8:	887a      	ldrh	r2, [r7, #2]
 80084aa:	89fb      	ldrh	r3, [r7, #14]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d32b      	bcc.n	8008508 <eMBRegInputCB+0x8c>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 80084b0:	887a      	ldrh	r2, [r7, #2]
 80084b2:	883b      	ldrh	r3, [r7, #0]
 80084b4:	441a      	add	r2, r3
 80084b6:	89f9      	ldrh	r1, [r7, #14]
 80084b8:	89bb      	ldrh	r3, [r7, #12]
 80084ba:	440b      	add	r3, r1
 80084bc:	429a      	cmp	r2, r3
 80084be:	dc23      	bgt.n	8008508 <eMBRegInputCB+0x8c>
    {
        iRegIndex = usAddress - usRegInStart;
 80084c0:	887a      	ldrh	r2, [r7, #2]
 80084c2:	897b      	ldrh	r3, [r7, #10]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 80084c8:	e01a      	b.n	8008500 <eMBRegInputCB+0x84>
        {

            *pucRegBuffer++ = (UCHAR) ( usGetRegInput(iRegIndex) >> 8);
 80084ca:	8abb      	ldrh	r3, [r7, #20]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7f9 fc7f 	bl	8001dd0 <usGetRegInput>
 80084d2:	4603      	mov	r3, r0
 80084d4:	1219      	asrs	r1, r3, #8
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	b2ca      	uxtb	r2, r1
 80084de:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = (UCHAR) ( usGetRegInput(iRegIndex) & 0xFF);
 80084e0:	8abb      	ldrh	r3, [r7, #20]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7f9 fc74 	bl	8001dd0 <usGetRegInput>
 80084e8:	4601      	mov	r1, r0
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	b2ca      	uxtb	r2, r1
 80084f2:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 80084f4:	8abb      	ldrh	r3, [r7, #20]
 80084f6:	3301      	adds	r3, #1
 80084f8:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 80084fa:	883b      	ldrh	r3, [r7, #0]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 8008500:	883b      	ldrh	r3, [r7, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e1      	bne.n	80084ca <eMBRegInputCB+0x4e>
    if ((usAddress >= REG_INPUT_START)
 8008506:	e001      	b.n	800850c <eMBRegInputCB+0x90>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8008508:	2301      	movs	r3, #1
 800850a:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 800850c:	7dfb      	ldrb	r3, [r7, #23]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20001818 	.word	0x20001818
 800851c:	20000092 	.word	0x20000092

08008520 <eMBRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	4608      	mov	r0, r1
 800852a:	4611      	mov	r1, r2
 800852c:	461a      	mov	r2, r3
 800852e:	4603      	mov	r3, r0
 8008530:	817b      	strh	r3, [r7, #10]
 8008532:	460b      	mov	r3, r1
 8008534:	813b      	strh	r3, [r7, #8]
 8008536:	4613      	mov	r3, r2
 8008538:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 800853a:	2300      	movs	r3, #0
 800853c:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usSRegHoldBuf;
 800853e:	4b32      	ldr	r3, [pc, #200]	; (8008608 <eMBRegHoldingCB+0xe8>)
 8008540:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = S_REG_HOLDING_START;
 8008542:	230d      	movs	r3, #13
 8008544:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
 8008546:	230a      	movs	r3, #10
 8008548:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usSRegHoldStart;
 800854a:	4b30      	ldr	r3, [pc, #192]	; (800860c <eMBRegHoldingCB+0xec>)
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	827b      	strh	r3, [r7, #18]

    /* it already plus one in modbus function method. */
    usAddress--;
 8008550:	897b      	ldrh	r3, [r7, #10]
 8008552:	3b01      	subs	r3, #1
 8008554:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 8008556:	897a      	ldrh	r2, [r7, #10]
 8008558:	8afb      	ldrh	r3, [r7, #22]
 800855a:	429a      	cmp	r2, r3
 800855c:	d34c      	bcc.n	80085f8 <eMBRegHoldingCB+0xd8>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 800855e:	897a      	ldrh	r2, [r7, #10]
 8008560:	893b      	ldrh	r3, [r7, #8]
 8008562:	441a      	add	r2, r3
 8008564:	8af9      	ldrh	r1, [r7, #22]
 8008566:	8abb      	ldrh	r3, [r7, #20]
 8008568:	440b      	add	r3, r1
 800856a:	429a      	cmp	r2, r3
 800856c:	dc44      	bgt.n	80085f8 <eMBRegHoldingCB+0xd8>
    {
        iRegIndex = usAddress - usRegHoldStart;
 800856e:	897a      	ldrh	r2, [r7, #10]
 8008570:	8a7b      	ldrh	r3, [r7, #18]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01d      	beq.n	80085b8 <eMBRegHoldingCB+0x98>
 800857c:	2b01      	cmp	r3, #1
 800857e:	d036      	beq.n	80085ee <eMBRegHoldingCB+0xce>
 8008580:	e03c      	b.n	80085fc <eMBRegHoldingCB+0xdc>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (usGetReg(iRegIndex) >> 8);
 8008582:	8bbb      	ldrh	r3, [r7, #28]
 8008584:	4618      	mov	r0, r3
 8008586:	f7f9 fc55 	bl	8001e34 <usGetReg>
 800858a:	4603      	mov	r3, r0
 800858c:	1219      	asrs	r1, r3, #8
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	60fa      	str	r2, [r7, #12]
 8008594:	b2ca      	uxtb	r2, r1
 8008596:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (usGetReg(iRegIndex) & 0xFF);
 8008598:	8bbb      	ldrh	r3, [r7, #28]
 800859a:	4618      	mov	r0, r3
 800859c:	f7f9 fc4a 	bl	8001e34 <usGetReg>
 80085a0:	4601      	mov	r1, r0
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	60fa      	str	r2, [r7, #12]
 80085a8:	b2ca      	uxtb	r2, r1
 80085aa:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 80085ac:	8bbb      	ldrh	r3, [r7, #28]
 80085ae:	3301      	adds	r3, #1
 80085b0:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 80085b2:	893b      	ldrh	r3, [r7, #8]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 80085b8:	893b      	ldrh	r3, [r7, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e1      	bne.n	8008582 <eMBRegHoldingCB+0x62>
            }
            break;
 80085be:	e01a      	b.n	80085f6 <eMBRegHoldingCB+0xd6>

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
            	vSetReg(iRegIndex, (*pucRegBuffer)<<8 | *(pucRegBuffer + 1) );
 80085c0:	8bb8      	ldrh	r0, [r7, #28]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	3201      	adds	r2, #1
 80085cc:	7812      	ldrb	r2, [r2, #0]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	4619      	mov	r1, r3
 80085d2:	f7f9 fc19 	bl	8001e08 <vSetReg>
            	pucRegBuffer++;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3301      	adds	r3, #1
 80085da:	60fb      	str	r3, [r7, #12]
				pucRegBuffer++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]
                //pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
                //pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
                iRegIndex++;
 80085e2:	8bbb      	ldrh	r3, [r7, #28]
 80085e4:	3301      	adds	r3, #1
 80085e6:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 80085e8:	893b      	ldrh	r3, [r7, #8]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 80085ee:	893b      	ldrh	r3, [r7, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e5      	bne.n	80085c0 <eMBRegHoldingCB+0xa0>
            }
            break;
 80085f4:	bf00      	nop
        switch (eMode)
 80085f6:	e001      	b.n	80085fc <eMBRegHoldingCB+0xdc>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80085f8:	2301      	movs	r3, #1
 80085fa:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 80085fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3720      	adds	r7, #32
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20001828 	.word	0x20001828
 800860c:	20000094 	.word	0x20000094

08008610 <eMBRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 8008610:	b590      	push	{r4, r7, lr}
 8008612:	b08b      	sub	sp, #44	; 0x2c
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	461a      	mov	r2, r3
 800861e:	4603      	mov	r3, r0
 8008620:	817b      	strh	r3, [r7, #10]
 8008622:	460b      	mov	r3, r1
 8008624:	813b      	strh	r3, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 800862a:	2300      	movs	r3, #0
 800862c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 8008630:	893b      	ldrh	r3, [r7, #8]
 8008632:	08db      	lsrs	r3, r3, #3
 8008634:	b29b      	uxth	r3, r3
 8008636:	3301      	adds	r3, #1
 8008638:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucSCoilBuf;
 800863a:	4b4c      	ldr	r3, [pc, #304]	; (800876c <eMBRegCoilsCB+0x15c>)
 800863c:	61fb      	str	r3, [r7, #28]
    COIL_START = S_COIL_START;
 800863e:	2301      	movs	r3, #1
 8008640:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = S_COIL_NCOILS;
 8008642:	2304      	movs	r3, #4
 8008644:	833b      	strh	r3, [r7, #24]
    usCoilStart = usSCoilStart;
 8008646:	4b4a      	ldr	r3, [pc, #296]	; (8008770 <eMBRegCoilsCB+0x160>)
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	82fb      	strh	r3, [r7, #22]

    /* it already plus one in modbus function method. */
    usAddress--;
 800864c:	897b      	ldrh	r3, [r7, #10]
 800864e:	3b01      	subs	r3, #1
 8008650:	817b      	strh	r3, [r7, #10]

    if( ( usAddress >= COIL_START ) &&
 8008652:	897a      	ldrh	r2, [r7, #10]
 8008654:	8b7b      	ldrh	r3, [r7, #26]
 8008656:	429a      	cmp	r2, r3
 8008658:	d37f      	bcc.n	800875a <eMBRegCoilsCB+0x14a>
        ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 800865a:	897a      	ldrh	r2, [r7, #10]
 800865c:	893b      	ldrh	r3, [r7, #8]
 800865e:	441a      	add	r2, r3
 8008660:	8b79      	ldrh	r1, [r7, #26]
 8008662:	8b3b      	ldrh	r3, [r7, #24]
 8008664:	440b      	add	r3, r1
    if( ( usAddress >= COIL_START ) &&
 8008666:	429a      	cmp	r2, r3
 8008668:	dc77      	bgt.n	800875a <eMBRegCoilsCB+0x14a>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 800866a:	897a      	ldrh	r2, [r7, #10]
 800866c:	8afb      	ldrh	r3, [r7, #22]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	b29b      	uxth	r3, r3
 8008672:	08db      	lsrs	r3, r3, #3
 8008674:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8008676:	897a      	ldrh	r2, [r7, #10]
 8008678:	8afb      	ldrh	r3, [r7, #22]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	b29b      	uxth	r3, r3
 800867e:	f003 0307 	and.w	r3, r3, #7
 8008682:	82bb      	strh	r3, [r7, #20]
        switch ( eMode )
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <eMBRegCoilsCB+0x80>
 800868a:	2b01      	cmp	r3, #1
 800868c:	d049      	beq.n	8008722 <eMBRegCoilsCB+0x112>
 800868e:	e067      	b.n	8008760 <eMBRegCoilsCB+0x150>
        {
        /* read current coil values from the protocol stack. */
        case MB_REG_READ:
        	vUPDATECoils(0);
 8008690:	2000      	movs	r0, #0
 8008692:	f7f9 fbaf 	bl	8001df4 <vUPDATECoils>
            while (iNReg > 0)
 8008696:	e012      	b.n	80086be <eMBRegCoilsCB+0xae>
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 8008698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	84ba      	strh	r2, [r7, #36]	; 0x24
 800869e:	461a      	mov	r2, r3
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	1898      	adds	r0, r3, r2
 80086a4:	68fc      	ldr	r4, [r7, #12]
 80086a6:	1c63      	adds	r3, r4, #1
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	8abb      	ldrh	r3, [r7, #20]
 80086ac:	2208      	movs	r2, #8
 80086ae:	4619      	mov	r1, r3
 80086b0:	f7ff fd0e 	bl	80080d0 <xMBUtilGetBits>
 80086b4:	4603      	mov	r3, r0
 80086b6:	7023      	strb	r3, [r4, #0]
                        iRegBitIndex, 8);
                iNReg--;
 80086b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086ba:	3b01      	subs	r3, #1
 80086bc:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 80086be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e9      	bne.n	8008698 <eMBRegCoilsCB+0x88>
            }
            pucRegBuffer--;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 80086ca:	893b      	ldrh	r3, [r7, #8]
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	893b      	ldrh	r3, [r7, #8]
 80086da:	f1c3 0308 	rsb	r3, r3, #8
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	461a      	mov	r2, r3
 80086ee:	893b      	ldrh	r3, [r7, #8]
 80086f0:	f1c3 0308 	rsb	r3, r3, #8
 80086f4:	fa42 f303 	asr.w	r3, r2, r3
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	701a      	strb	r2, [r3, #0]

            break;
 80086fe:	e02b      	b.n	8008758 <eMBRegCoilsCB+0x148>

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8008700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	84ba      	strh	r2, [r7, #36]	; 0x24
 8008706:	461a      	mov	r2, r3
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	8ab9      	ldrh	r1, [r7, #20]
 8008716:	2208      	movs	r2, #8
 8008718:	f7ff fc7c 	bl	8008014 <xMBUtilSetBits>
                iNReg--;
 800871c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800871e:	3b01      	subs	r3, #1
 8008720:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 8008722:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008724:	2b01      	cmp	r3, #1
 8008726:	d8eb      	bhi.n	8008700 <eMBRegCoilsCB+0xf0>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 8008728:	893b      	ldrh	r3, [r7, #8]
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8008730:	893b      	ldrh	r3, [r7, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00f      	beq.n	8008756 <eMBRegCoilsCB+0x146>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8008736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	84ba      	strh	r2, [r7, #36]	; 0x24
 800873c:	461a      	mov	r2, r3
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	1898      	adds	r0, r3, r2
 8008742:	893b      	ldrh	r3, [r7, #8]
 8008744:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	8ab9      	ldrh	r1, [r7, #20]
 8008750:	4622      	mov	r2, r4
 8008752:	f7ff fc5f 	bl	8008014 <xMBUtilSetBits>
            }

            break;
 8008756:	bf00      	nop
        switch ( eMode )
 8008758:	e002      	b.n	8008760 <eMBRegCoilsCB+0x150>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800875a:	2301      	movs	r3, #1
 800875c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 8008760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008764:	4618      	mov	r0, r3
 8008766:	372c      	adds	r7, #44	; 0x2c
 8008768:	46bd      	mov	sp, r7
 800876a:	bd90      	pop	{r4, r7, pc}
 800876c:	20001814 	.word	0x20001814
 8008770:	20000090 	.word	0x20000090

08008774 <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8008774:	b590      	push	{r4, r7, lr}
 8008776:	b089      	sub	sp, #36	; 0x24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	807b      	strh	r3, [r7, #2]
 8008780:	4613      	mov	r3, r2
 8008782:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8008784:	2300      	movs	r3, #0
 8008786:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8008788:	883b      	ldrh	r3, [r7, #0]
 800878a:	08db      	lsrs	r3, r3, #3
 800878c:	b29b      	uxth	r3, r3
 800878e:	3301      	adds	r3, #1
 8008790:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucSDiscInBuf;
 8008792:	4b30      	ldr	r3, [pc, #192]	; (8008854 <eMBRegDiscreteCB+0xe0>)
 8008794:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
 8008796:	2300      	movs	r3, #0
 8008798:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
 800879a:	2301      	movs	r3, #1
 800879c:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usSDiscInStart;
 800879e:	4b2e      	ldr	r3, [pc, #184]	; (8008858 <eMBRegDiscreteCB+0xe4>)
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 80087a4:	887b      	ldrh	r3, [r7, #2]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 80087aa:	887a      	ldrh	r2, [r7, #2]
 80087ac:	8a7b      	ldrh	r3, [r7, #18]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d349      	bcc.n	8008846 <eMBRegDiscreteCB+0xd2>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 80087b2:	887a      	ldrh	r2, [r7, #2]
 80087b4:	883b      	ldrh	r3, [r7, #0]
 80087b6:	441a      	add	r2, r3
 80087b8:	8a79      	ldrh	r1, [r7, #18]
 80087ba:	8a3b      	ldrh	r3, [r7, #16]
 80087bc:	440b      	add	r3, r1
 80087be:	429a      	cmp	r2, r3
 80087c0:	dc41      	bgt.n	8008846 <eMBRegDiscreteCB+0xd2>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 80087c2:	887a      	ldrh	r2, [r7, #2]
 80087c4:	89fb      	ldrh	r3, [r7, #14]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	08db      	lsrs	r3, r3, #3
 80087cc:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 80087ce:	887a      	ldrh	r2, [r7, #2]
 80087d0:	89fb      	ldrh	r3, [r7, #14]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	81bb      	strh	r3, [r7, #12]

        while (iNReg > 0)
 80087dc:	e012      	b.n	8008804 <eMBRegDiscreteCB+0x90>
        {
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 80087de:	8bbb      	ldrh	r3, [r7, #28]
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	83ba      	strh	r2, [r7, #28]
 80087e4:	461a      	mov	r2, r3
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	1898      	adds	r0, r3, r2
 80087ea:	687c      	ldr	r4, [r7, #4]
 80087ec:	1c63      	adds	r3, r4, #1
 80087ee:	607b      	str	r3, [r7, #4]
 80087f0:	89bb      	ldrh	r3, [r7, #12]
 80087f2:	2208      	movs	r2, #8
 80087f4:	4619      	mov	r1, r3
 80087f6:	f7ff fc6b 	bl	80080d0 <xMBUtilGetBits>
 80087fa:	4603      	mov	r3, r0
 80087fc:	7023      	strb	r3, [r4, #0]
                    iRegBitIndex, 8);
            iNReg--;
 80087fe:	8b7b      	ldrh	r3, [r7, #26]
 8008800:	3b01      	subs	r3, #1
 8008802:	837b      	strh	r3, [r7, #26]
        while (iNReg > 0)
 8008804:	8b7b      	ldrh	r3, [r7, #26]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e9      	bne.n	80087de <eMBRegDiscreteCB+0x6a>
        }
        pucRegBuffer--;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3b01      	subs	r3, #1
 800880e:	607b      	str	r3, [r7, #4]
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 8008810:	883b      	ldrh	r3, [r7, #0]
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	803b      	strh	r3, [r7, #0]
        /* filling zero to high bit */
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	883b      	ldrh	r3, [r7, #0]
 8008820:	f1c3 0308 	rsb	r3, r3, #8
 8008824:	fa02 f303 	lsl.w	r3, r2, r3
 8008828:	b2da      	uxtb	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	701a      	strb	r2, [r3, #0]
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	883b      	ldrh	r3, [r7, #0]
 8008836:	f1c3 0308 	rsb	r3, r3, #8
 800883a:	fa42 f303 	asr.w	r3, r2, r3
 800883e:	b2da      	uxtb	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	701a      	strb	r2, [r3, #0]
 8008844:	e001      	b.n	800884a <eMBRegDiscreteCB+0xd6>
    }
    else
    {
        eStatus = MB_ENOREG;
 8008846:	2301      	movs	r3, #1
 8008848:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 800884a:	7ffb      	ldrb	r3, [r7, #31]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3724      	adds	r7, #36	; 0x24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd90      	pop	{r4, r7, pc}
 8008854:	20001810 	.word	0x20001810
 8008858:	2000180e 	.word	0x2000180e

0800885c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008862:	f3ef 8305 	mrs	r3, IPSR
 8008866:	60bb      	str	r3, [r7, #8]
  return(result);
 8008868:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10f      	bne.n	800888e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800886e:	f3ef 8310 	mrs	r3, PRIMASK
 8008872:	607b      	str	r3, [r7, #4]
  return(result);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d109      	bne.n	800888e <osKernelInitialize+0x32>
 800887a:	4b10      	ldr	r3, [pc, #64]	; (80088bc <osKernelInitialize+0x60>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d109      	bne.n	8008896 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008882:	f3ef 8311 	mrs	r3, BASEPRI
 8008886:	603b      	str	r3, [r7, #0]
  return(result);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800888e:	f06f 0305 	mvn.w	r3, #5
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	e00c      	b.n	80088b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008896:	4b09      	ldr	r3, [pc, #36]	; (80088bc <osKernelInitialize+0x60>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d105      	bne.n	80088aa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800889e:	4b07      	ldr	r3, [pc, #28]	; (80088bc <osKernelInitialize+0x60>)
 80088a0:	2201      	movs	r2, #1
 80088a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	e002      	b.n	80088b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80088aa:	f04f 33ff 	mov.w	r3, #4294967295
 80088ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80088b0:	68fb      	ldr	r3, [r7, #12]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bc80      	pop	{r7}
 80088ba:	4770      	bx	lr
 80088bc:	2000183c 	.word	0x2000183c

080088c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088c6:	f3ef 8305 	mrs	r3, IPSR
 80088ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80088cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10f      	bne.n	80088f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d2:	f3ef 8310 	mrs	r3, PRIMASK
 80088d6:	607b      	str	r3, [r7, #4]
  return(result);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <osKernelStart+0x32>
 80088de:	4b11      	ldr	r3, [pc, #68]	; (8008924 <osKernelStart+0x64>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d109      	bne.n	80088fa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088e6:	f3ef 8311 	mrs	r3, BASEPRI
 80088ea:	603b      	str	r3, [r7, #0]
  return(result);
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80088f2:	f06f 0305 	mvn.w	r3, #5
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	e00e      	b.n	8008918 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80088fa:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <osKernelStart+0x64>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d107      	bne.n	8008912 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008902:	4b08      	ldr	r3, [pc, #32]	; (8008924 <osKernelStart+0x64>)
 8008904:	2202      	movs	r2, #2
 8008906:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008908:	f001 fb08 	bl	8009f1c <vTaskStartScheduler>
      stat = osOK;
 800890c:	2300      	movs	r3, #0
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	e002      	b.n	8008918 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008912:	f04f 33ff 	mov.w	r3, #4294967295
 8008916:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008918:	68fb      	ldr	r3, [r7, #12]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	2000183c 	.word	0x2000183c

08008928 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008928:	b580      	push	{r7, lr}
 800892a:	b092      	sub	sp, #72	; 0x48
 800892c:	af04      	add	r7, sp, #16
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008934:	2300      	movs	r3, #0
 8008936:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008938:	f3ef 8305 	mrs	r3, IPSR
 800893c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008940:	2b00      	cmp	r3, #0
 8008942:	f040 8094 	bne.w	8008a6e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008946:	f3ef 8310 	mrs	r3, PRIMASK
 800894a:	623b      	str	r3, [r7, #32]
  return(result);
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	2b00      	cmp	r3, #0
 8008950:	f040 808d 	bne.w	8008a6e <osThreadNew+0x146>
 8008954:	4b48      	ldr	r3, [pc, #288]	; (8008a78 <osThreadNew+0x150>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b02      	cmp	r3, #2
 800895a:	d106      	bne.n	800896a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800895c:	f3ef 8311 	mrs	r3, BASEPRI
 8008960:	61fb      	str	r3, [r7, #28]
  return(result);
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	2b00      	cmp	r3, #0
 8008966:	f040 8082 	bne.w	8008a6e <osThreadNew+0x146>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d07e      	beq.n	8008a6e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008970:	2380      	movs	r3, #128	; 0x80
 8008972:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008974:	2318      	movs	r3, #24
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008978:	2300      	movs	r3, #0
 800897a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800897c:	f107 031b 	add.w	r3, r7, #27
 8008980:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008982:	f04f 33ff 	mov.w	r3, #4294967295
 8008986:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d045      	beq.n	8008a1a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <osThreadNew+0x74>
        name = attr->name;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80089aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d008      	beq.n	80089c2 <osThreadNew+0x9a>
 80089b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b2:	2b38      	cmp	r3, #56	; 0x38
 80089b4:	d805      	bhi.n	80089c2 <osThreadNew+0x9a>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <osThreadNew+0x9e>
        return (NULL);
 80089c2:	2300      	movs	r3, #0
 80089c4:	e054      	b.n	8008a70 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	089b      	lsrs	r3, r3, #2
 80089d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00e      	beq.n	80089fc <osThreadNew+0xd4>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	2ba7      	cmp	r3, #167	; 0xa7
 80089e4:	d90a      	bls.n	80089fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d006      	beq.n	80089fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d002      	beq.n	80089fc <osThreadNew+0xd4>
        mem = 1;
 80089f6:	2301      	movs	r3, #1
 80089f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80089fa:	e010      	b.n	8008a1e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10c      	bne.n	8008a1e <osThreadNew+0xf6>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d108      	bne.n	8008a1e <osThreadNew+0xf6>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d104      	bne.n	8008a1e <osThreadNew+0xf6>
          mem = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a18:	e001      	b.n	8008a1e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d110      	bne.n	8008a46 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a2c:	9202      	str	r2, [sp, #8]
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f001 f88a 	bl	8009b54 <xTaskCreateStatic>
 8008a40:	4603      	mov	r3, r0
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	e013      	b.n	8008a6e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d110      	bne.n	8008a6e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	f107 0314 	add.w	r3, r7, #20
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f001 f8d4 	bl	8009c0c <xTaskCreate>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d001      	beq.n	8008a6e <osThreadNew+0x146>
          hTask = NULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a6e:	697b      	ldr	r3, [r7, #20]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3738      	adds	r7, #56	; 0x38
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	2000183c 	.word	0x2000183c

08008a7c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a84:	f3ef 8305 	mrs	r3, IPSR
 8008a88:	613b      	str	r3, [r7, #16]
  return(result);
 8008a8a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10f      	bne.n	8008ab0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a90:	f3ef 8310 	mrs	r3, PRIMASK
 8008a94:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d109      	bne.n	8008ab0 <osDelay+0x34>
 8008a9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ad4 <osDelay+0x58>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d109      	bne.n	8008ab8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8008aa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d003      	beq.n	8008ab8 <osDelay+0x3c>
    stat = osErrorISR;
 8008ab0:	f06f 0305 	mvn.w	r3, #5
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	e007      	b.n	8008ac8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f001 f9f6 	bl	8009eb4 <vTaskDelay>
    }
  }

  return (stat);
 8008ac8:	697b      	ldr	r3, [r7, #20]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	2000183c 	.word	0x2000183c

08008ad8 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ae4:	f3ef 8305 	mrs	r3, IPSR
 8008ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8008aea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d13d      	bne.n	8008b6c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008af0:	f3ef 8310 	mrs	r3, PRIMASK
 8008af4:	613b      	str	r3, [r7, #16]
  return(result);
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d137      	bne.n	8008b6c <osEventFlagsNew+0x94>
 8008afc:	4b1e      	ldr	r3, [pc, #120]	; (8008b78 <osEventFlagsNew+0xa0>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d105      	bne.n	8008b10 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b04:	f3ef 8311 	mrs	r3, BASEPRI
 8008b08:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d12d      	bne.n	8008b6c <osEventFlagsNew+0x94>
    mem = -1;
 8008b10:	f04f 33ff 	mov.w	r3, #4294967295
 8008b14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d015      	beq.n	8008b48 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d006      	beq.n	8008b32 <osEventFlagsNew+0x5a>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	2b1f      	cmp	r3, #31
 8008b2a:	d902      	bls.n	8008b32 <osEventFlagsNew+0x5a>
        mem = 1;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	61bb      	str	r3, [r7, #24]
 8008b30:	e00c      	b.n	8008b4c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d108      	bne.n	8008b4c <osEventFlagsNew+0x74>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d104      	bne.n	8008b4c <osEventFlagsNew+0x74>
          mem = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	61bb      	str	r3, [r7, #24]
 8008b46:	e001      	b.n	8008b4c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d106      	bne.n	8008b60 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 f842 	bl	8008be0 <xEventGroupCreateStatic>
 8008b5c:	61f8      	str	r0, [r7, #28]
 8008b5e:	e005      	b.n	8008b6c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8008b66:	f000 f872 	bl	8008c4e <xEventGroupCreate>
 8008b6a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008b6c:	69fb      	ldr	r3, [r7, #28]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3720      	adds	r7, #32
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	2000183c 	.word	0x2000183c

08008b7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4a06      	ldr	r2, [pc, #24]	; (8008ba4 <vApplicationGetIdleTaskMemory+0x28>)
 8008b8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4a05      	ldr	r2, [pc, #20]	; (8008ba8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008b92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2280      	movs	r2, #128	; 0x80
 8008b98:	601a      	str	r2, [r3, #0]
}
 8008b9a:	bf00      	nop
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bc80      	pop	{r7}
 8008ba2:	4770      	bx	lr
 8008ba4:	20001840 	.word	0x20001840
 8008ba8:	200018e8 	.word	0x200018e8

08008bac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4a07      	ldr	r2, [pc, #28]	; (8008bd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008bbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	4a06      	ldr	r2, [pc, #24]	; (8008bdc <vApplicationGetTimerTaskMemory+0x30>)
 8008bc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bca:	601a      	str	r2, [r3, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bc80      	pop	{r7}
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	20001ae8 	.word	0x20001ae8
 8008bdc:	20001b90 	.word	0x20001b90

08008be0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10a      	bne.n	8008c04 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c00:	bf00      	nop
 8008c02:	e7fe      	b.n	8008c02 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008c04:	2320      	movs	r3, #32
 8008c06:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b20      	cmp	r3, #32
 8008c0c:	d00a      	beq.n	8008c24 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	60fb      	str	r3, [r7, #12]
}
 8008c20:	bf00      	nop
 8008c22:	e7fe      	b.n	8008c22 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00a      	beq.n	8008c44 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2200      	movs	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	3304      	adds	r3, #4
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 f9f7 	bl	800902c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2201      	movs	r2, #1
 8008c42:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008c44:	697b      	ldr	r3, [r7, #20]
	}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8008c54:	2020      	movs	r0, #32
 8008c56:	f002 fc79 	bl	800b54c <pvPortMalloc>
 8008c5a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00a      	beq.n	8008c78 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 f9dd 	bl	800902c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008c78:	687b      	ldr	r3, [r7, #4]
	}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b090      	sub	sp, #64	; 0x40
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
 8008c90:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <xEventGroupWaitBits+0x36>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	623b      	str	r3, [r7, #32]
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00a      	beq.n	8008cda <xEventGroupWaitBits+0x56>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	61fb      	str	r3, [r7, #28]
}
 8008cd6:	bf00      	nop
 8008cd8:	e7fe      	b.n	8008cd8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	61bb      	str	r3, [r7, #24]
}
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cf6:	f001 fe11 	bl	800a91c <xTaskGetSchedulerState>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <xEventGroupWaitBits+0x82>
 8008d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <xEventGroupWaitBits+0x86>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <xEventGroupWaitBits+0x88>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	617b      	str	r3, [r7, #20]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8008d26:	f001 f969 	bl	8009ffc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d36:	f000 f943 	bl	8008fc0 <prvTestWaitCondition>
 8008d3a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8008d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00e      	beq.n	8008d60 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d028      	beq.n	8008da2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	43db      	mvns	r3, r3
 8008d58:	401a      	ands	r2, r3
 8008d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	e020      	b.n	8008da2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d104      	bne.n	8008d70 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8008d6e:	e018      	b.n	8008da2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8008d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d7c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d8a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8e:	1d18      	adds	r0, r3, #4
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d94:	4313      	orrs	r3, r2
 8008d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d98:	4619      	mov	r1, r3
 8008d9a:	f001 fb2f 	bl	800a3fc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8008da2:	f001 f939 	bl	800a018 <xTaskResumeAll>
 8008da6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8008da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d031      	beq.n	8008e12 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d107      	bne.n	8008dc4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8008db4:	4b19      	ldr	r3, [pc, #100]	; (8008e1c <xEventGroupWaitBits+0x198>)
 8008db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8008dc4:	f001 fe36 	bl	800aa34 <uxTaskResetEventItemValue>
 8008dc8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d11a      	bne.n	8008e0a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8008dd4:	f002 faba 	bl	800b34c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	68b9      	ldr	r1, [r7, #8]
 8008de2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008de4:	f000 f8ec 	bl	8008fc0 <prvTestWaitCondition>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d009      	beq.n	8008e02 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d006      	beq.n	8008e02 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	43db      	mvns	r3, r3
 8008dfc:	401a      	ands	r2, r3
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e00:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008e02:	2301      	movs	r3, #1
 8008e04:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8008e06:	f002 fad1 	bl	800b3ac <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e10:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3740      	adds	r7, #64	; 0x40
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	e000ed04 	.word	0xe000ed04

08008e20 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <xEventGroupClearBits+0x2a>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	60fb      	str	r3, [r7, #12]
}
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00a      	beq.n	8008e6a <xEventGroupClearBits+0x4a>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	60bb      	str	r3, [r7, #8]
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8008e6a:	f002 fa6f 	bl	800b34c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	43db      	mvns	r3, r3
 8008e7c:	401a      	ands	r2, r3
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008e82:	f002 fa93 	bl	800b3ac <vPortExitCritical>

	return uxReturn;
 8008e86:	693b      	ldr	r3, [r7, #16]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08e      	sub	sp, #56	; 0x38
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10a      	bne.n	8008ec2 <xEventGroupSetBits+0x32>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	613b      	str	r3, [r7, #16]
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00a      	beq.n	8008ee2 <xEventGroupSetBits+0x52>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	60fb      	str	r3, [r7, #12]
}
 8008ede:	bf00      	nop
 8008ee0:	e7fe      	b.n	8008ee0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	3308      	adds	r3, #8
 8008eec:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008eee:	f001 f885 	bl	8009ffc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	431a      	orrs	r2, r3
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008f04:	e03c      	b.n	8008f80 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008f12:	2300      	movs	r3, #0
 8008f14:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008f1c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f24:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d108      	bne.n	8008f42 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	4013      	ands	r3, r2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f40:	e008      	b.n	8008f54 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	4013      	ands	r3, r2
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d101      	bne.n	8008f54 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008f50:	2301      	movs	r3, #1
 8008f52:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d010      	beq.n	8008f7c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f74:	4619      	mov	r1, r3
 8008f76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008f78:	f001 fb0c 	bl	800a594 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d1be      	bne.n	8008f06 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8e:	43db      	mvns	r3, r3
 8008f90:	401a      	ands	r2, r3
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008f96:	f001 f83f 	bl	800a018 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	681b      	ldr	r3, [r3, #0]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3738      	adds	r7, #56	; 0x38
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff ff6c 	bl	8008e90 <xEventGroupSetBits>
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d107      	bne.n	8008fe6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	4013      	ands	r3, r2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	e007      	b.n	8008ff6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	4013      	ands	r3, r2
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d101      	bne.n	8008ff6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008ff6:	697b      	ldr	r3, [r7, #20]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	371c      	adds	r7, #28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr
	...

08009004 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	68f9      	ldr	r1, [r7, #12]
 8009016:	4804      	ldr	r0, [pc, #16]	; (8009028 <xEventGroupSetBitsFromISR+0x24>)
 8009018:	f002 f88a 	bl	800b130 <xTimerPendFunctionCallFromISR>
 800901c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800901e:	697b      	ldr	r3, [r7, #20]
	}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	08008fa7 	.word	0x08008fa7

0800902c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f103 0208 	add.w	r2, r3, #8
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f04f 32ff 	mov.w	r2, #4294967295
 8009044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f103 0208 	add.w	r2, r3, #8
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f103 0208 	add.w	r2, r3, #8
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	bc80      	pop	{r7}
 8009068:	4770      	bx	lr

0800906a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	bc80      	pop	{r7}
 8009080:	4770      	bx	lr

08009082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009082:	b480      	push	{r7}
 8009084:	b085      	sub	sp, #20
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	601a      	str	r2, [r3, #0]
}
 80090be:	bf00      	nop
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bc80      	pop	{r7}
 80090c6:	4770      	bx	lr

080090c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090de:	d103      	bne.n	80090e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	e00c      	b.n	8009102 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3308      	adds	r3, #8
 80090ec:	60fb      	str	r3, [r7, #12]
 80090ee:	e002      	b.n	80090f6 <vListInsert+0x2e>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d2f6      	bcs.n	80090f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	601a      	str	r2, [r3, #0]
}
 800912e:	bf00      	nop
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	bc80      	pop	{r7}
 8009136:	4770      	bx	lr

08009138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	6892      	ldr	r2, [r2, #8]
 800914e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	6852      	ldr	r2, [r2, #4]
 8009158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	d103      	bne.n	800916c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	689a      	ldr	r2, [r3, #8]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	1e5a      	subs	r2, r3, #1
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	bc80      	pop	{r7}
 8009188:	4770      	bx	lr
	...

0800918c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10a      	bne.n	80091b6 <xQueueGenericReset+0x2a>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	60bb      	str	r3, [r7, #8]
}
 80091b2:	bf00      	nop
 80091b4:	e7fe      	b.n	80091b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80091b6:	f002 f8c9 	bl	800b34c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c2:	68f9      	ldr	r1, [r7, #12]
 80091c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091c6:	fb01 f303 	mul.w	r3, r1, r3
 80091ca:	441a      	add	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e6:	3b01      	subs	r3, #1
 80091e8:	68f9      	ldr	r1, [r7, #12]
 80091ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091ec:	fb01 f303 	mul.w	r3, r1, r3
 80091f0:	441a      	add	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	22ff      	movs	r2, #255	; 0xff
 80091fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	22ff      	movs	r2, #255	; 0xff
 8009202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d114      	bne.n	8009236 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d01a      	beq.n	800924a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3310      	adds	r3, #16
 8009218:	4618      	mov	r0, r3
 800921a:	f001 f957 	bl	800a4cc <xTaskRemoveFromEventList>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d012      	beq.n	800924a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009224:	4b0c      	ldr	r3, [pc, #48]	; (8009258 <xQueueGenericReset+0xcc>)
 8009226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	e009      	b.n	800924a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3310      	adds	r3, #16
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff fef6 	bl	800902c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3324      	adds	r3, #36	; 0x24
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff fef1 	bl	800902c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800924a:	f002 f8af 	bl	800b3ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800924e:	2301      	movs	r3, #1
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	e000ed04 	.word	0xe000ed04

0800925c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08e      	sub	sp, #56	; 0x38
 8009260:	af02      	add	r7, sp, #8
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10a      	bne.n	8009286 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009282:	bf00      	nop
 8009284:	e7fe      	b.n	8009284 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800929e:	bf00      	nop
 80092a0:	e7fe      	b.n	80092a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <xQueueGenericCreateStatic+0x52>
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <xQueueGenericCreateStatic+0x56>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e000      	b.n	80092b4 <xQueueGenericCreateStatic+0x58>
 80092b2:	2300      	movs	r3, #0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10a      	bne.n	80092ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	623b      	str	r3, [r7, #32]
}
 80092ca:	bf00      	nop
 80092cc:	e7fe      	b.n	80092cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <xQueueGenericCreateStatic+0x7e>
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <xQueueGenericCreateStatic+0x82>
 80092da:	2301      	movs	r3, #1
 80092dc:	e000      	b.n	80092e0 <xQueueGenericCreateStatic+0x84>
 80092de:	2300      	movs	r3, #0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10a      	bne.n	80092fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	61fb      	str	r3, [r7, #28]
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80092fa:	2350      	movs	r3, #80	; 0x50
 80092fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2b50      	cmp	r3, #80	; 0x50
 8009302:	d00a      	beq.n	800931a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	61bb      	str	r3, [r7, #24]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800931e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00d      	beq.n	8009340 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800932c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	4613      	mov	r3, r2
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	68b9      	ldr	r1, [r7, #8]
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f000 f805 	bl	800934a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009342:	4618      	mov	r0, r3
 8009344:	3730      	adds	r7, #48	; 0x30
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	607a      	str	r2, [r7, #4]
 8009356:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d103      	bne.n	8009366 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	e002      	b.n	800936c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009378:	2101      	movs	r1, #1
 800937a:	69b8      	ldr	r0, [r7, #24]
 800937c:	f7ff ff06 	bl	800918c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	78fa      	ldrb	r2, [r7, #3]
 8009384:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009388:	bf00      	nop
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b08e      	sub	sp, #56	; 0x38
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
 800939c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800939e:	2300      	movs	r3, #0
 80093a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <xQueueGenericSend+0x32>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d103      	bne.n	80093d0 <xQueueGenericSend+0x40>
 80093c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <xQueueGenericSend+0x44>
 80093d0:	2301      	movs	r3, #1
 80093d2:	e000      	b.n	80093d6 <xQueueGenericSend+0x46>
 80093d4:	2300      	movs	r3, #0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <xQueueGenericSend+0x60>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d103      	bne.n	80093fe <xQueueGenericSend+0x6e>
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d101      	bne.n	8009402 <xQueueGenericSend+0x72>
 80093fe:	2301      	movs	r3, #1
 8009400:	e000      	b.n	8009404 <xQueueGenericSend+0x74>
 8009402:	2300      	movs	r3, #0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10a      	bne.n	800941e <xQueueGenericSend+0x8e>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	623b      	str	r3, [r7, #32]
}
 800941a:	bf00      	nop
 800941c:	e7fe      	b.n	800941c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800941e:	f001 fa7d 	bl	800a91c <xTaskGetSchedulerState>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d102      	bne.n	800942e <xQueueGenericSend+0x9e>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <xQueueGenericSend+0xa2>
 800942e:	2301      	movs	r3, #1
 8009430:	e000      	b.n	8009434 <xQueueGenericSend+0xa4>
 8009432:	2300      	movs	r3, #0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10a      	bne.n	800944e <xQueueGenericSend+0xbe>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	61fb      	str	r3, [r7, #28]
}
 800944a:	bf00      	nop
 800944c:	e7fe      	b.n	800944c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800944e:	f001 ff7d 	bl	800b34c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945a:	429a      	cmp	r2, r3
 800945c:	d302      	bcc.n	8009464 <xQueueGenericSend+0xd4>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b02      	cmp	r3, #2
 8009462:	d129      	bne.n	80094b8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800946a:	f000 fa07 	bl	800987c <prvCopyDataToQueue>
 800946e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	2b00      	cmp	r3, #0
 8009476:	d010      	beq.n	800949a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947a:	3324      	adds	r3, #36	; 0x24
 800947c:	4618      	mov	r0, r3
 800947e:	f001 f825 	bl	800a4cc <xTaskRemoveFromEventList>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d013      	beq.n	80094b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009488:	4b3f      	ldr	r3, [pc, #252]	; (8009588 <xQueueGenericSend+0x1f8>)
 800948a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	e00a      	b.n	80094b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800949a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949c:	2b00      	cmp	r3, #0
 800949e:	d007      	beq.n	80094b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80094a0:	4b39      	ldr	r3, [pc, #228]	; (8009588 <xQueueGenericSend+0x1f8>)
 80094a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80094b0:	f001 ff7c 	bl	800b3ac <vPortExitCritical>
				return pdPASS;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e063      	b.n	8009580 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d103      	bne.n	80094c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094be:	f001 ff75 	bl	800b3ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	e05c      	b.n	8009580 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d106      	bne.n	80094da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094cc:	f107 0314 	add.w	r3, r7, #20
 80094d0:	4618      	mov	r0, r3
 80094d2:	f001 f8c1 	bl	800a658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094d6:	2301      	movs	r3, #1
 80094d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094da:	f001 ff67 	bl	800b3ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094de:	f000 fd8d 	bl	8009ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094e2:	f001 ff33 	bl	800b34c <vPortEnterCritical>
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094ec:	b25b      	sxtb	r3, r3
 80094ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f2:	d103      	bne.n	80094fc <xQueueGenericSend+0x16c>
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009502:	b25b      	sxtb	r3, r3
 8009504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009508:	d103      	bne.n	8009512 <xQueueGenericSend+0x182>
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009512:	f001 ff4b 	bl	800b3ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009516:	1d3a      	adds	r2, r7, #4
 8009518:	f107 0314 	add.w	r3, r7, #20
 800951c:	4611      	mov	r1, r2
 800951e:	4618      	mov	r0, r3
 8009520:	f001 f8b0 	bl	800a684 <xTaskCheckForTimeOut>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d124      	bne.n	8009574 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800952a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800952c:	f000 fa9e 	bl	8009a6c <prvIsQueueFull>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d018      	beq.n	8009568 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009538:	3310      	adds	r3, #16
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f000 ff38 	bl	800a3b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009546:	f000 fa29 	bl	800999c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800954a:	f000 fd65 	bl	800a018 <xTaskResumeAll>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	f47f af7c 	bne.w	800944e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <xQueueGenericSend+0x1f8>)
 8009558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	e772      	b.n	800944e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800956a:	f000 fa17 	bl	800999c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800956e:	f000 fd53 	bl	800a018 <xTaskResumeAll>
 8009572:	e76c      	b.n	800944e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009576:	f000 fa11 	bl	800999c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800957a:	f000 fd4d 	bl	800a018 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800957e:	2300      	movs	r3, #0
		}
	}
}
 8009580:	4618      	mov	r0, r3
 8009582:	3738      	adds	r7, #56	; 0x38
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	e000ed04 	.word	0xe000ed04

0800958c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08e      	sub	sp, #56	; 0x38
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d103      	bne.n	80095c8 <xQueueGenericSendFromISR+0x3c>
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <xQueueGenericSendFromISR+0x40>
 80095c8:	2301      	movs	r3, #1
 80095ca:	e000      	b.n	80095ce <xQueueGenericSendFromISR+0x42>
 80095cc:	2300      	movs	r3, #0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	623b      	str	r3, [r7, #32]
}
 80095e4:	bf00      	nop
 80095e6:	e7fe      	b.n	80095e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d103      	bne.n	80095f6 <xQueueGenericSendFromISR+0x6a>
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d101      	bne.n	80095fa <xQueueGenericSendFromISR+0x6e>
 80095f6:	2301      	movs	r3, #1
 80095f8:	e000      	b.n	80095fc <xQueueGenericSendFromISR+0x70>
 80095fa:	2300      	movs	r3, #0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	61fb      	str	r3, [r7, #28]
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009616:	f001 ff5b 	bl	800b4d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800961a:	f3ef 8211 	mrs	r2, BASEPRI
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	61ba      	str	r2, [r7, #24]
 8009630:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009632:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009634:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963e:	429a      	cmp	r2, r3
 8009640:	d302      	bcc.n	8009648 <xQueueGenericSendFromISR+0xbc>
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b02      	cmp	r3, #2
 8009646:	d12c      	bne.n	80096a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800964e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	68b9      	ldr	r1, [r7, #8]
 8009656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009658:	f000 f910 	bl	800987c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800965c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009664:	d112      	bne.n	800968c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966a:	2b00      	cmp	r3, #0
 800966c:	d016      	beq.n	800969c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009670:	3324      	adds	r3, #36	; 0x24
 8009672:	4618      	mov	r0, r3
 8009674:	f000 ff2a 	bl	800a4cc <xTaskRemoveFromEventList>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00e      	beq.n	800969c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00b      	beq.n	800969c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	e007      	b.n	800969c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800968c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009690:	3301      	adds	r3, #1
 8009692:	b2db      	uxtb	r3, r3
 8009694:	b25a      	sxtb	r2, r3
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800969c:	2301      	movs	r3, #1
 800969e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80096a0:	e001      	b.n	80096a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	637b      	str	r3, [r7, #52]	; 0x34
 80096a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80096b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3738      	adds	r7, #56	; 0x38
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08c      	sub	sp, #48	; 0x30
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096c8:	2300      	movs	r3, #0
 80096ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10a      	bne.n	80096ec <xQueueReceive+0x30>
	__asm volatile
 80096d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	623b      	str	r3, [r7, #32]
}
 80096e8:	bf00      	nop
 80096ea:	e7fe      	b.n	80096ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <xQueueReceive+0x3e>
 80096f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <xQueueReceive+0x42>
 80096fa:	2301      	movs	r3, #1
 80096fc:	e000      	b.n	8009700 <xQueueReceive+0x44>
 80096fe:	2300      	movs	r3, #0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10a      	bne.n	800971a <xQueueReceive+0x5e>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	61fb      	str	r3, [r7, #28]
}
 8009716:	bf00      	nop
 8009718:	e7fe      	b.n	8009718 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800971a:	f001 f8ff 	bl	800a91c <xTaskGetSchedulerState>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d102      	bne.n	800972a <xQueueReceive+0x6e>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <xQueueReceive+0x72>
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <xQueueReceive+0x74>
 800972e:	2300      	movs	r3, #0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <xQueueReceive+0x8e>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	61bb      	str	r3, [r7, #24]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800974a:	f001 fdff 	bl	800b34c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009752:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	d01f      	beq.n	800979a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800975a:	68b9      	ldr	r1, [r7, #8]
 800975c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800975e:	f000 f8f7 	bl	8009950 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009764:	1e5a      	subs	r2, r3, #1
 8009766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009768:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00f      	beq.n	8009792 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	3310      	adds	r3, #16
 8009776:	4618      	mov	r0, r3
 8009778:	f000 fea8 	bl	800a4cc <xTaskRemoveFromEventList>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d007      	beq.n	8009792 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009782:	4b3d      	ldr	r3, [pc, #244]	; (8009878 <xQueueReceive+0x1bc>)
 8009784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009792:	f001 fe0b 	bl	800b3ac <vPortExitCritical>
				return pdPASS;
 8009796:	2301      	movs	r3, #1
 8009798:	e069      	b.n	800986e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d103      	bne.n	80097a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097a0:	f001 fe04 	bl	800b3ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097a4:	2300      	movs	r3, #0
 80097a6:	e062      	b.n	800986e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d106      	bne.n	80097bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097ae:	f107 0310 	add.w	r3, r7, #16
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 ff50 	bl	800a658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097b8:	2301      	movs	r3, #1
 80097ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097bc:	f001 fdf6 	bl	800b3ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097c0:	f000 fc1c 	bl	8009ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097c4:	f001 fdc2 	bl	800b34c <vPortEnterCritical>
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097ce:	b25b      	sxtb	r3, r3
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d103      	bne.n	80097de <xQueueReceive+0x122>
 80097d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097e4:	b25b      	sxtb	r3, r3
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d103      	bne.n	80097f4 <xQueueReceive+0x138>
 80097ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097f4:	f001 fdda 	bl	800b3ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097f8:	1d3a      	adds	r2, r7, #4
 80097fa:	f107 0310 	add.w	r3, r7, #16
 80097fe:	4611      	mov	r1, r2
 8009800:	4618      	mov	r0, r3
 8009802:	f000 ff3f 	bl	800a684 <xTaskCheckForTimeOut>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d123      	bne.n	8009854 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800980c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800980e:	f000 f917 	bl	8009a40 <prvIsQueueEmpty>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d017      	beq.n	8009848 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	3324      	adds	r3, #36	; 0x24
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fdc7 	bl	800a3b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009828:	f000 f8b8 	bl	800999c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800982c:	f000 fbf4 	bl	800a018 <xTaskResumeAll>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d189      	bne.n	800974a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009836:	4b10      	ldr	r3, [pc, #64]	; (8009878 <xQueueReceive+0x1bc>)
 8009838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	e780      	b.n	800974a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800984a:	f000 f8a7 	bl	800999c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800984e:	f000 fbe3 	bl	800a018 <xTaskResumeAll>
 8009852:	e77a      	b.n	800974a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009856:	f000 f8a1 	bl	800999c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800985a:	f000 fbdd 	bl	800a018 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800985e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009860:	f000 f8ee 	bl	8009a40 <prvIsQueueEmpty>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	f43f af6f 	beq.w	800974a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800986c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800986e:	4618      	mov	r0, r3
 8009870:	3730      	adds	r7, #48	; 0x30
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	e000ed04 	.word	0xe000ed04

0800987c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009890:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10d      	bne.n	80098b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d14d      	bne.n	800993e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f001 f856 	bl	800a958 <xTaskPriorityDisinherit>
 80098ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	605a      	str	r2, [r3, #4]
 80098b4:	e043      	b.n	800993e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d119      	bne.n	80098f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6898      	ldr	r0, [r3, #8]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c4:	461a      	mov	r2, r3
 80098c6:	68b9      	ldr	r1, [r7, #8]
 80098c8:	f002 f89c 	bl	800ba04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d4:	441a      	add	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689a      	ldr	r2, [r3, #8]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d32b      	bcc.n	800993e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	609a      	str	r2, [r3, #8]
 80098ee:	e026      	b.n	800993e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68d8      	ldr	r0, [r3, #12]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f8:	461a      	mov	r2, r3
 80098fa:	68b9      	ldr	r1, [r7, #8]
 80098fc:	f002 f882 	bl	800ba04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009908:	425b      	negs	r3, r3
 800990a:	441a      	add	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	429a      	cmp	r2, r3
 800991a:	d207      	bcs.n	800992c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009924:	425b      	negs	r3, r3
 8009926:	441a      	add	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b02      	cmp	r3, #2
 8009930:	d105      	bne.n	800993e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	3b01      	subs	r3, #1
 800993c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	1c5a      	adds	r2, r3, #1
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009946:	697b      	ldr	r3, [r7, #20]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995e:	2b00      	cmp	r3, #0
 8009960:	d018      	beq.n	8009994 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68da      	ldr	r2, [r3, #12]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996a:	441a      	add	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68da      	ldr	r2, [r3, #12]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	429a      	cmp	r2, r3
 800997a:	d303      	bcc.n	8009984 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68d9      	ldr	r1, [r3, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998c:	461a      	mov	r2, r3
 800998e:	6838      	ldr	r0, [r7, #0]
 8009990:	f002 f838 	bl	800ba04 <memcpy>
	}
}
 8009994:	bf00      	nop
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80099a4:	f001 fcd2 	bl	800b34c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099b0:	e011      	b.n	80099d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d012      	beq.n	80099e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3324      	adds	r3, #36	; 0x24
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fd84 	bl	800a4cc <xTaskRemoveFromEventList>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80099ca:	f000 febd 	bl	800a748 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dce9      	bgt.n	80099b2 <prvUnlockQueue+0x16>
 80099de:	e000      	b.n	80099e2 <prvUnlockQueue+0x46>
					break;
 80099e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	22ff      	movs	r2, #255	; 0xff
 80099e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80099ea:	f001 fcdf 	bl	800b3ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099ee:	f001 fcad 	bl	800b34c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099fa:	e011      	b.n	8009a20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d012      	beq.n	8009a2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	3310      	adds	r3, #16
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fd5f 	bl	800a4cc <xTaskRemoveFromEventList>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a14:	f000 fe98 	bl	800a748 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dce9      	bgt.n	80099fc <prvUnlockQueue+0x60>
 8009a28:	e000      	b.n	8009a2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	22ff      	movs	r2, #255	; 0xff
 8009a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a34:	f001 fcba 	bl	800b3ac <vPortExitCritical>
}
 8009a38:	bf00      	nop
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a48:	f001 fc80 	bl	800b34c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d102      	bne.n	8009a5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a54:	2301      	movs	r3, #1
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	e001      	b.n	8009a5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a5e:	f001 fca5 	bl	800b3ac <vPortExitCritical>

	return xReturn;
 8009a62:	68fb      	ldr	r3, [r7, #12]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a74:	f001 fc6a 	bl	800b34c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d102      	bne.n	8009a8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a84:	2301      	movs	r3, #1
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	e001      	b.n	8009a8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a8e:	f001 fc8d 	bl	800b3ac <vPortExitCritical>

	return xReturn;
 8009a92:	68fb      	ldr	r3, [r7, #12]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60fb      	str	r3, [r7, #12]
 8009aaa:	e014      	b.n	8009ad6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009aac:	4a0e      	ldr	r2, [pc, #56]	; (8009ae8 <vQueueAddToRegistry+0x4c>)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10b      	bne.n	8009ad0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ab8:	490b      	ldr	r1, [pc, #44]	; (8009ae8 <vQueueAddToRegistry+0x4c>)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ac2:	4a09      	ldr	r2, [pc, #36]	; (8009ae8 <vQueueAddToRegistry+0x4c>)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	4413      	add	r3, r2
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ace:	e006      	b.n	8009ade <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	60fb      	str	r3, [r7, #12]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b07      	cmp	r3, #7
 8009ada:	d9e7      	bls.n	8009aac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr
 8009ae8:	20001f90 	.word	0x20001f90

08009aec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009afc:	f001 fc26 	bl	800b34c <vPortEnterCritical>
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b06:	b25b      	sxtb	r3, r3
 8009b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0c:	d103      	bne.n	8009b16 <vQueueWaitForMessageRestricted+0x2a>
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b1c:	b25b      	sxtb	r3, r3
 8009b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b22:	d103      	bne.n	8009b2c <vQueueWaitForMessageRestricted+0x40>
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b2c:	f001 fc3e 	bl	800b3ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d106      	bne.n	8009b46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	3324      	adds	r3, #36	; 0x24
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	68b9      	ldr	r1, [r7, #8]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fc97 	bl	800a474 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b46:	6978      	ldr	r0, [r7, #20]
 8009b48:	f7ff ff28 	bl	800999c <prvUnlockQueue>
	}
 8009b4c:	bf00      	nop
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b08e      	sub	sp, #56	; 0x38
 8009b58:	af04      	add	r7, sp, #16
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	623b      	str	r3, [r7, #32]
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10a      	bne.n	8009b9a <xTaskCreateStatic+0x46>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	61fb      	str	r3, [r7, #28]
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b9a:	23a8      	movs	r3, #168	; 0xa8
 8009b9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2ba8      	cmp	r3, #168	; 0xa8
 8009ba2:	d00a      	beq.n	8009bba <xTaskCreateStatic+0x66>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	61bb      	str	r3, [r7, #24]
}
 8009bb6:	bf00      	nop
 8009bb8:	e7fe      	b.n	8009bb8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d01e      	beq.n	8009bfe <xTaskCreateStatic+0xaa>
 8009bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d01b      	beq.n	8009bfe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009bd8:	2300      	movs	r3, #0
 8009bda:	9303      	str	r3, [sp, #12]
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	9302      	str	r3, [sp, #8]
 8009be0:	f107 0314 	add.w	r3, r7, #20
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	68b9      	ldr	r1, [r7, #8]
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 f851 	bl	8009c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bf8:	f000 f8ec 	bl	8009dd4 <prvAddNewTaskToReadyList>
 8009bfc:	e001      	b.n	8009c02 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c02:	697b      	ldr	r3, [r7, #20]
	}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3728      	adds	r7, #40	; 0x28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08c      	sub	sp, #48	; 0x30
 8009c10:	af04      	add	r7, sp, #16
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	603b      	str	r3, [r7, #0]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c1c:	88fb      	ldrh	r3, [r7, #6]
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4618      	mov	r0, r3
 8009c22:	f001 fc93 	bl	800b54c <pvPortMalloc>
 8009c26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00e      	beq.n	8009c4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009c2e:	20a8      	movs	r0, #168	; 0xa8
 8009c30:	f001 fc8c 	bl	800b54c <pvPortMalloc>
 8009c34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	631a      	str	r2, [r3, #48]	; 0x30
 8009c42:	e005      	b.n	8009c50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c44:	6978      	ldr	r0, [r7, #20]
 8009c46:	f001 fd45 	bl	800b6d4 <vPortFree>
 8009c4a:	e001      	b.n	8009c50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d017      	beq.n	8009c86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c5e:	88fa      	ldrh	r2, [r7, #6]
 8009c60:	2300      	movs	r3, #0
 8009c62:	9303      	str	r3, [sp, #12]
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	9302      	str	r3, [sp, #8]
 8009c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6a:	9301      	str	r3, [sp, #4]
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 f80f 	bl	8009c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c7a:	69f8      	ldr	r0, [r7, #28]
 8009c7c:	f000 f8aa 	bl	8009dd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c80:	2301      	movs	r3, #1
 8009c82:	61bb      	str	r3, [r7, #24]
 8009c84:	e002      	b.n	8009c8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c86:	f04f 33ff 	mov.w	r3, #4294967295
 8009c8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c8c:	69bb      	ldr	r3, [r7, #24]
	}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3720      	adds	r7, #32
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b088      	sub	sp, #32
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
 8009ca4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	461a      	mov	r2, r3
 8009cb0:	21a5      	movs	r1, #165	; 0xa5
 8009cb2:	f001 fe23 	bl	800b8fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	f023 0307 	bic.w	r3, r3, #7
 8009cce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	f003 0307 	and.w	r3, r3, #7
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	617b      	str	r3, [r7, #20]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	61fb      	str	r3, [r7, #28]
 8009cf4:	e012      	b.n	8009d1c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	7819      	ldrb	r1, [r3, #0]
 8009cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	4413      	add	r3, r2
 8009d04:	3334      	adds	r3, #52	; 0x34
 8009d06:	460a      	mov	r2, r1
 8009d08:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	4413      	add	r3, r2
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d006      	beq.n	8009d24 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	61fb      	str	r3, [r7, #28]
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	2b0f      	cmp	r3, #15
 8009d20:	d9e9      	bls.n	8009cf6 <prvInitialiseNewTask+0x5e>
 8009d22:	e000      	b.n	8009d26 <prvInitialiseNewTask+0x8e>
		{
			break;
 8009d24:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d30:	2b37      	cmp	r3, #55	; 0x37
 8009d32:	d901      	bls.n	8009d38 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d34:	2337      	movs	r3, #55	; 0x37
 8009d36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	2200      	movs	r2, #0
 8009d48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7ff f98b 	bl	800906a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	3318      	adds	r3, #24
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7ff f986 	bl	800906a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	2200      	movs	r2, #0
 8009d78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d86:	3354      	adds	r3, #84	; 0x54
 8009d88:	224c      	movs	r2, #76	; 0x4c
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 fdb5 	bl	800b8fc <memset>
 8009d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d94:	4a0c      	ldr	r2, [pc, #48]	; (8009dc8 <prvInitialiseNewTask+0x130>)
 8009d96:	659a      	str	r2, [r3, #88]	; 0x58
 8009d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9a:	4a0c      	ldr	r2, [pc, #48]	; (8009dcc <prvInitialiseNewTask+0x134>)
 8009d9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	4a0b      	ldr	r2, [pc, #44]	; (8009dd0 <prvInitialiseNewTask+0x138>)
 8009da2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	69b8      	ldr	r0, [r7, #24]
 8009daa:	f001 f9e1 	bl	800b170 <pxPortInitialiseStack>
 8009dae:	4602      	mov	r2, r0
 8009db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d002      	beq.n	8009dc0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dc0:	bf00      	nop
 8009dc2:	3720      	adds	r7, #32
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	2000321c 	.word	0x2000321c
 8009dcc:	20003284 	.word	0x20003284
 8009dd0:	200032ec 	.word	0x200032ec

08009dd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ddc:	f001 fab6 	bl	800b34c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009de0:	4b2d      	ldr	r3, [pc, #180]	; (8009e98 <prvAddNewTaskToReadyList+0xc4>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3301      	adds	r3, #1
 8009de6:	4a2c      	ldr	r2, [pc, #176]	; (8009e98 <prvAddNewTaskToReadyList+0xc4>)
 8009de8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009dea:	4b2c      	ldr	r3, [pc, #176]	; (8009e9c <prvAddNewTaskToReadyList+0xc8>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d109      	bne.n	8009e06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009df2:	4a2a      	ldr	r2, [pc, #168]	; (8009e9c <prvAddNewTaskToReadyList+0xc8>)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009df8:	4b27      	ldr	r3, [pc, #156]	; (8009e98 <prvAddNewTaskToReadyList+0xc4>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d110      	bne.n	8009e22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e00:	f000 fcc6 	bl	800a790 <prvInitialiseTaskLists>
 8009e04:	e00d      	b.n	8009e22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e06:	4b26      	ldr	r3, [pc, #152]	; (8009ea0 <prvAddNewTaskToReadyList+0xcc>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d109      	bne.n	8009e22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e0e:	4b23      	ldr	r3, [pc, #140]	; (8009e9c <prvAddNewTaskToReadyList+0xc8>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d802      	bhi.n	8009e22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e1c:	4a1f      	ldr	r2, [pc, #124]	; (8009e9c <prvAddNewTaskToReadyList+0xc8>)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e22:	4b20      	ldr	r3, [pc, #128]	; (8009ea4 <prvAddNewTaskToReadyList+0xd0>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3301      	adds	r3, #1
 8009e28:	4a1e      	ldr	r2, [pc, #120]	; (8009ea4 <prvAddNewTaskToReadyList+0xd0>)
 8009e2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e2c:	4b1d      	ldr	r3, [pc, #116]	; (8009ea4 <prvAddNewTaskToReadyList+0xd0>)
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e38:	4b1b      	ldr	r3, [pc, #108]	; (8009ea8 <prvAddNewTaskToReadyList+0xd4>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d903      	bls.n	8009e48 <prvAddNewTaskToReadyList+0x74>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	4a18      	ldr	r2, [pc, #96]	; (8009ea8 <prvAddNewTaskToReadyList+0xd4>)
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4a15      	ldr	r2, [pc, #84]	; (8009eac <prvAddNewTaskToReadyList+0xd8>)
 8009e56:	441a      	add	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	f7ff f90f 	bl	8009082 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e64:	f001 faa2 	bl	800b3ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e68:	4b0d      	ldr	r3, [pc, #52]	; (8009ea0 <prvAddNewTaskToReadyList+0xcc>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00e      	beq.n	8009e8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e70:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <prvAddNewTaskToReadyList+0xc8>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d207      	bcs.n	8009e8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e7e:	4b0c      	ldr	r3, [pc, #48]	; (8009eb0 <prvAddNewTaskToReadyList+0xdc>)
 8009e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	200024a4 	.word	0x200024a4
 8009e9c:	20001fd0 	.word	0x20001fd0
 8009ea0:	200024b0 	.word	0x200024b0
 8009ea4:	200024c0 	.word	0x200024c0
 8009ea8:	200024ac 	.word	0x200024ac
 8009eac:	20001fd4 	.word	0x20001fd4
 8009eb0:	e000ed04 	.word	0xe000ed04

08009eb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d017      	beq.n	8009ef6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ec6:	4b13      	ldr	r3, [pc, #76]	; (8009f14 <vTaskDelay+0x60>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00a      	beq.n	8009ee4 <vTaskDelay+0x30>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	60bb      	str	r3, [r7, #8]
}
 8009ee0:	bf00      	nop
 8009ee2:	e7fe      	b.n	8009ee2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ee4:	f000 f88a 	bl	8009ffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ee8:	2100      	movs	r1, #0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fdba 	bl	800aa64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ef0:	f000 f892 	bl	800a018 <xTaskResumeAll>
 8009ef4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d107      	bne.n	8009f0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009efc:	4b06      	ldr	r3, [pc, #24]	; (8009f18 <vTaskDelay+0x64>)
 8009efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f0c:	bf00      	nop
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	200024cc 	.word	0x200024cc
 8009f18:	e000ed04 	.word	0xe000ed04

08009f1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08a      	sub	sp, #40	; 0x28
 8009f20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f26:	2300      	movs	r3, #0
 8009f28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f2a:	463a      	mov	r2, r7
 8009f2c:	1d39      	adds	r1, r7, #4
 8009f2e:	f107 0308 	add.w	r3, r7, #8
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fe22 	bl	8008b7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	9202      	str	r2, [sp, #8]
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	2300      	movs	r3, #0
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	2300      	movs	r3, #0
 8009f48:	460a      	mov	r2, r1
 8009f4a:	4924      	ldr	r1, [pc, #144]	; (8009fdc <vTaskStartScheduler+0xc0>)
 8009f4c:	4824      	ldr	r0, [pc, #144]	; (8009fe0 <vTaskStartScheduler+0xc4>)
 8009f4e:	f7ff fe01 	bl	8009b54 <xTaskCreateStatic>
 8009f52:	4603      	mov	r3, r0
 8009f54:	4a23      	ldr	r2, [pc, #140]	; (8009fe4 <vTaskStartScheduler+0xc8>)
 8009f56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f58:	4b22      	ldr	r3, [pc, #136]	; (8009fe4 <vTaskStartScheduler+0xc8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f60:	2301      	movs	r3, #1
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	e001      	b.n	8009f6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d102      	bne.n	8009f76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009f70:	f000 fdcc 	bl	800ab0c <xTimerCreateTimerTask>
 8009f74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d11b      	bne.n	8009fb4 <vTaskStartScheduler+0x98>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	613b      	str	r3, [r7, #16]
}
 8009f8e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f90:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <vTaskStartScheduler+0xcc>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3354      	adds	r3, #84	; 0x54
 8009f96:	4a15      	ldr	r2, [pc, #84]	; (8009fec <vTaskStartScheduler+0xd0>)
 8009f98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f9a:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <vTaskStartScheduler+0xd4>)
 8009f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009fa2:	4b14      	ldr	r3, [pc, #80]	; (8009ff4 <vTaskStartScheduler+0xd8>)
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009fa8:	4b13      	ldr	r3, [pc, #76]	; (8009ff8 <vTaskStartScheduler+0xdc>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009fae:	f001 f95b 	bl	800b268 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fb2:	e00e      	b.n	8009fd2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fba:	d10a      	bne.n	8009fd2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	60fb      	str	r3, [r7, #12]
}
 8009fce:	bf00      	nop
 8009fd0:	e7fe      	b.n	8009fd0 <vTaskStartScheduler+0xb4>
}
 8009fd2:	bf00      	nop
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	0800bb78 	.word	0x0800bb78
 8009fe0:	0800a761 	.word	0x0800a761
 8009fe4:	200024c8 	.word	0x200024c8
 8009fe8:	20001fd0 	.word	0x20001fd0
 8009fec:	200000e8 	.word	0x200000e8
 8009ff0:	200024c4 	.word	0x200024c4
 8009ff4:	200024b0 	.word	0x200024b0
 8009ff8:	200024a8 	.word	0x200024a8

08009ffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a000:	4b04      	ldr	r3, [pc, #16]	; (800a014 <vTaskSuspendAll+0x18>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	4a03      	ldr	r2, [pc, #12]	; (800a014 <vTaskSuspendAll+0x18>)
 800a008:	6013      	str	r3, [r2, #0]
}
 800a00a:	bf00      	nop
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bc80      	pop	{r7}
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	200024cc 	.word	0x200024cc

0800a018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a022:	2300      	movs	r3, #0
 800a024:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a026:	4b42      	ldr	r3, [pc, #264]	; (800a130 <xTaskResumeAll+0x118>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10a      	bne.n	800a044 <xTaskResumeAll+0x2c>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	603b      	str	r3, [r7, #0]
}
 800a040:	bf00      	nop
 800a042:	e7fe      	b.n	800a042 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a044:	f001 f982 	bl	800b34c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a048:	4b39      	ldr	r3, [pc, #228]	; (800a130 <xTaskResumeAll+0x118>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	4a38      	ldr	r2, [pc, #224]	; (800a130 <xTaskResumeAll+0x118>)
 800a050:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a052:	4b37      	ldr	r3, [pc, #220]	; (800a130 <xTaskResumeAll+0x118>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d162      	bne.n	800a120 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a05a:	4b36      	ldr	r3, [pc, #216]	; (800a134 <xTaskResumeAll+0x11c>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d05e      	beq.n	800a120 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a062:	e02f      	b.n	800a0c4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a064:	4b34      	ldr	r3, [pc, #208]	; (800a138 <xTaskResumeAll+0x120>)
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	3318      	adds	r3, #24
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff f861 	bl	8009138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3304      	adds	r3, #4
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7ff f85c 	bl	8009138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a084:	4b2d      	ldr	r3, [pc, #180]	; (800a13c <xTaskResumeAll+0x124>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d903      	bls.n	800a094 <xTaskResumeAll+0x7c>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a090:	4a2a      	ldr	r2, [pc, #168]	; (800a13c <xTaskResumeAll+0x124>)
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a098:	4613      	mov	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4413      	add	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4a27      	ldr	r2, [pc, #156]	; (800a140 <xTaskResumeAll+0x128>)
 800a0a2:	441a      	add	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f7fe ffe9 	bl	8009082 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b4:	4b23      	ldr	r3, [pc, #140]	; (800a144 <xTaskResumeAll+0x12c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d302      	bcc.n	800a0c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a0be:	4b22      	ldr	r3, [pc, #136]	; (800a148 <xTaskResumeAll+0x130>)
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <xTaskResumeAll+0x120>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1cb      	bne.n	800a064 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a0d2:	f000 fbff 	bl	800a8d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a0d6:	4b1d      	ldr	r3, [pc, #116]	; (800a14c <xTaskResumeAll+0x134>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d010      	beq.n	800a104 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0e2:	f000 f845 	bl	800a170 <xTaskIncrementTick>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a0ec:	4b16      	ldr	r3, [pc, #88]	; (800a148 <xTaskResumeAll+0x130>)
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1f1      	bne.n	800a0e2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a0fe:	4b13      	ldr	r3, [pc, #76]	; (800a14c <xTaskResumeAll+0x134>)
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a104:	4b10      	ldr	r3, [pc, #64]	; (800a148 <xTaskResumeAll+0x130>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d009      	beq.n	800a120 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a10c:	2301      	movs	r3, #1
 800a10e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a110:	4b0f      	ldr	r3, [pc, #60]	; (800a150 <xTaskResumeAll+0x138>)
 800a112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a120:	f001 f944 	bl	800b3ac <vPortExitCritical>

	return xAlreadyYielded;
 800a124:	68bb      	ldr	r3, [r7, #8]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	200024cc 	.word	0x200024cc
 800a134:	200024a4 	.word	0x200024a4
 800a138:	20002464 	.word	0x20002464
 800a13c:	200024ac 	.word	0x200024ac
 800a140:	20001fd4 	.word	0x20001fd4
 800a144:	20001fd0 	.word	0x20001fd0
 800a148:	200024b8 	.word	0x200024b8
 800a14c:	200024b4 	.word	0x200024b4
 800a150:	e000ed04 	.word	0xe000ed04

0800a154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a15a:	4b04      	ldr	r3, [pc, #16]	; (800a16c <xTaskGetTickCount+0x18>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a160:	687b      	ldr	r3, [r7, #4]
}
 800a162:	4618      	mov	r0, r3
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	bc80      	pop	{r7}
 800a16a:	4770      	bx	lr
 800a16c:	200024a8 	.word	0x200024a8

0800a170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a176:	2300      	movs	r3, #0
 800a178:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a17a:	4b51      	ldr	r3, [pc, #324]	; (800a2c0 <xTaskIncrementTick+0x150>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f040 808e 	bne.w	800a2a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a184:	4b4f      	ldr	r3, [pc, #316]	; (800a2c4 <xTaskIncrementTick+0x154>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3301      	adds	r3, #1
 800a18a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a18c:	4a4d      	ldr	r2, [pc, #308]	; (800a2c4 <xTaskIncrementTick+0x154>)
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d120      	bne.n	800a1da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a198:	4b4b      	ldr	r3, [pc, #300]	; (800a2c8 <xTaskIncrementTick+0x158>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00a      	beq.n	800a1b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	603b      	str	r3, [r7, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <xTaskIncrementTick+0x46>
 800a1b8:	4b43      	ldr	r3, [pc, #268]	; (800a2c8 <xTaskIncrementTick+0x158>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	4b43      	ldr	r3, [pc, #268]	; (800a2cc <xTaskIncrementTick+0x15c>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a41      	ldr	r2, [pc, #260]	; (800a2c8 <xTaskIncrementTick+0x158>)
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	4a41      	ldr	r2, [pc, #260]	; (800a2cc <xTaskIncrementTick+0x15c>)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	4b40      	ldr	r3, [pc, #256]	; (800a2d0 <xTaskIncrementTick+0x160>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	4a3f      	ldr	r2, [pc, #252]	; (800a2d0 <xTaskIncrementTick+0x160>)
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	f000 fb7d 	bl	800a8d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1da:	4b3e      	ldr	r3, [pc, #248]	; (800a2d4 <xTaskIncrementTick+0x164>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d34e      	bcc.n	800a282 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1e4:	4b38      	ldr	r3, [pc, #224]	; (800a2c8 <xTaskIncrementTick+0x158>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <xTaskIncrementTick+0x82>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e000      	b.n	800a1f4 <xTaskIncrementTick+0x84>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d004      	beq.n	800a202 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1f8:	4b36      	ldr	r3, [pc, #216]	; (800a2d4 <xTaskIncrementTick+0x164>)
 800a1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a1fe:	601a      	str	r2, [r3, #0]
					break;
 800a200:	e03f      	b.n	800a282 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a202:	4b31      	ldr	r3, [pc, #196]	; (800a2c8 <xTaskIncrementTick+0x158>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	429a      	cmp	r2, r3
 800a218:	d203      	bcs.n	800a222 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a21a:	4a2e      	ldr	r2, [pc, #184]	; (800a2d4 <xTaskIncrementTick+0x164>)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6013      	str	r3, [r2, #0]
						break;
 800a220:	e02f      	b.n	800a282 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	3304      	adds	r3, #4
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe ff86 	bl	8009138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	3318      	adds	r3, #24
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fe ff7d 	bl	8009138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a242:	4b25      	ldr	r3, [pc, #148]	; (800a2d8 <xTaskIncrementTick+0x168>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d903      	bls.n	800a252 <xTaskIncrementTick+0xe2>
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24e:	4a22      	ldr	r2, [pc, #136]	; (800a2d8 <xTaskIncrementTick+0x168>)
 800a250:	6013      	str	r3, [r2, #0]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a256:	4613      	mov	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4413      	add	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	4a1f      	ldr	r2, [pc, #124]	; (800a2dc <xTaskIncrementTick+0x16c>)
 800a260:	441a      	add	r2, r3
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	3304      	adds	r3, #4
 800a266:	4619      	mov	r1, r3
 800a268:	4610      	mov	r0, r2
 800a26a:	f7fe ff0a 	bl	8009082 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a272:	4b1b      	ldr	r3, [pc, #108]	; (800a2e0 <xTaskIncrementTick+0x170>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	429a      	cmp	r2, r3
 800a27a:	d3b3      	bcc.n	800a1e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a27c:	2301      	movs	r3, #1
 800a27e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a280:	e7b0      	b.n	800a1e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a282:	4b17      	ldr	r3, [pc, #92]	; (800a2e0 <xTaskIncrementTick+0x170>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a288:	4914      	ldr	r1, [pc, #80]	; (800a2dc <xTaskIncrementTick+0x16c>)
 800a28a:	4613      	mov	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	440b      	add	r3, r1
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d907      	bls.n	800a2aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a29a:	2301      	movs	r3, #1
 800a29c:	617b      	str	r3, [r7, #20]
 800a29e:	e004      	b.n	800a2aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a2a0:	4b10      	ldr	r3, [pc, #64]	; (800a2e4 <xTaskIncrementTick+0x174>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	4a0f      	ldr	r2, [pc, #60]	; (800a2e4 <xTaskIncrementTick+0x174>)
 800a2a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a2aa:	4b0f      	ldr	r3, [pc, #60]	; (800a2e8 <xTaskIncrementTick+0x178>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a2b6:	697b      	ldr	r3, [r7, #20]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3718      	adds	r7, #24
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	200024cc 	.word	0x200024cc
 800a2c4:	200024a8 	.word	0x200024a8
 800a2c8:	2000245c 	.word	0x2000245c
 800a2cc:	20002460 	.word	0x20002460
 800a2d0:	200024bc 	.word	0x200024bc
 800a2d4:	200024c4 	.word	0x200024c4
 800a2d8:	200024ac 	.word	0x200024ac
 800a2dc:	20001fd4 	.word	0x20001fd4
 800a2e0:	20001fd0 	.word	0x20001fd0
 800a2e4:	200024b4 	.word	0x200024b4
 800a2e8:	200024b8 	.word	0x200024b8

0800a2ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2f2:	4b2a      	ldr	r3, [pc, #168]	; (800a39c <vTaskSwitchContext+0xb0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2fa:	4b29      	ldr	r3, [pc, #164]	; (800a3a0 <vTaskSwitchContext+0xb4>)
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a300:	e046      	b.n	800a390 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a302:	4b27      	ldr	r3, [pc, #156]	; (800a3a0 <vTaskSwitchContext+0xb4>)
 800a304:	2200      	movs	r2, #0
 800a306:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a308:	4b26      	ldr	r3, [pc, #152]	; (800a3a4 <vTaskSwitchContext+0xb8>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	60fb      	str	r3, [r7, #12]
 800a30e:	e010      	b.n	800a332 <vTaskSwitchContext+0x46>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d10a      	bne.n	800a32c <vTaskSwitchContext+0x40>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	607b      	str	r3, [r7, #4]
}
 800a328:	bf00      	nop
 800a32a:	e7fe      	b.n	800a32a <vTaskSwitchContext+0x3e>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3b01      	subs	r3, #1
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	491d      	ldr	r1, [pc, #116]	; (800a3a8 <vTaskSwitchContext+0xbc>)
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	440b      	add	r3, r1
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0e4      	beq.n	800a310 <vTaskSwitchContext+0x24>
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	4613      	mov	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4a15      	ldr	r2, [pc, #84]	; (800a3a8 <vTaskSwitchContext+0xbc>)
 800a352:	4413      	add	r3, r2
 800a354:	60bb      	str	r3, [r7, #8]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	605a      	str	r2, [r3, #4]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	3308      	adds	r3, #8
 800a368:	429a      	cmp	r2, r3
 800a36a:	d104      	bne.n	800a376 <vTaskSwitchContext+0x8a>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	605a      	str	r2, [r3, #4]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	4a0b      	ldr	r2, [pc, #44]	; (800a3ac <vTaskSwitchContext+0xc0>)
 800a37e:	6013      	str	r3, [r2, #0]
 800a380:	4a08      	ldr	r2, [pc, #32]	; (800a3a4 <vTaskSwitchContext+0xb8>)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a386:	4b09      	ldr	r3, [pc, #36]	; (800a3ac <vTaskSwitchContext+0xc0>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3354      	adds	r3, #84	; 0x54
 800a38c:	4a08      	ldr	r2, [pc, #32]	; (800a3b0 <vTaskSwitchContext+0xc4>)
 800a38e:	6013      	str	r3, [r2, #0]
}
 800a390:	bf00      	nop
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	bc80      	pop	{r7}
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	200024cc 	.word	0x200024cc
 800a3a0:	200024b8 	.word	0x200024b8
 800a3a4:	200024ac 	.word	0x200024ac
 800a3a8:	20001fd4 	.word	0x20001fd4
 800a3ac:	20001fd0 	.word	0x20001fd0
 800a3b0:	200000e8 	.word	0x200000e8

0800a3b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10a      	bne.n	800a3da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	60fb      	str	r3, [r7, #12]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3da:	4b07      	ldr	r3, [pc, #28]	; (800a3f8 <vTaskPlaceOnEventList+0x44>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3318      	adds	r3, #24
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7fe fe70 	bl	80090c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	6838      	ldr	r0, [r7, #0]
 800a3ec:	f000 fb3a 	bl	800aa64 <prvAddCurrentTaskToDelayedList>
}
 800a3f0:	bf00      	nop
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	20001fd0 	.word	0x20001fd0

0800a3fc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10a      	bne.n	800a424 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	617b      	str	r3, [r7, #20]
}
 800a420:	bf00      	nop
 800a422:	e7fe      	b.n	800a422 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a424:	4b11      	ldr	r3, [pc, #68]	; (800a46c <vTaskPlaceOnUnorderedEventList+0x70>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10a      	bne.n	800a442 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800a42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	613b      	str	r3, [r7, #16]
}
 800a43e:	bf00      	nop
 800a440:	e7fe      	b.n	800a440 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a442:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68ba      	ldr	r2, [r7, #8]
 800a448:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a44c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a44e:	4b08      	ldr	r3, [pc, #32]	; (800a470 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3318      	adds	r3, #24
 800a454:	4619      	mov	r1, r3
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f7fe fe13 	bl	8009082 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a45c:	2101      	movs	r1, #1
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fb00 	bl	800aa64 <prvAddCurrentTaskToDelayedList>
}
 800a464:	bf00      	nop
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	200024cc 	.word	0x200024cc
 800a470:	20001fd0 	.word	0x20001fd0

0800a474 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10a      	bne.n	800a49c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	617b      	str	r3, [r7, #20]
}
 800a498:	bf00      	nop
 800a49a:	e7fe      	b.n	800a49a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a49c:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3318      	adds	r3, #24
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f7fe fdec 	bl	8009082 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4b6:	6879      	ldr	r1, [r7, #4]
 800a4b8:	68b8      	ldr	r0, [r7, #8]
 800a4ba:	f000 fad3 	bl	800aa64 <prvAddCurrentTaskToDelayedList>
	}
 800a4be:	bf00      	nop
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20001fd0 	.word	0x20001fd0

0800a4cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10a      	bne.n	800a4f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	60fb      	str	r3, [r7, #12]
}
 800a4f4:	bf00      	nop
 800a4f6:	e7fe      	b.n	800a4f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	3318      	adds	r3, #24
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe fe1b 	bl	8009138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a502:	4b1e      	ldr	r3, [pc, #120]	; (800a57c <xTaskRemoveFromEventList+0xb0>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d11d      	bne.n	800a546 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	3304      	adds	r3, #4
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fe fe12 	bl	8009138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a518:	4b19      	ldr	r3, [pc, #100]	; (800a580 <xTaskRemoveFromEventList+0xb4>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d903      	bls.n	800a528 <xTaskRemoveFromEventList+0x5c>
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	4a16      	ldr	r2, [pc, #88]	; (800a580 <xTaskRemoveFromEventList+0xb4>)
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	4613      	mov	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4a13      	ldr	r2, [pc, #76]	; (800a584 <xTaskRemoveFromEventList+0xb8>)
 800a536:	441a      	add	r2, r3
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4619      	mov	r1, r3
 800a53e:	4610      	mov	r0, r2
 800a540:	f7fe fd9f 	bl	8009082 <vListInsertEnd>
 800a544:	e005      	b.n	800a552 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	3318      	adds	r3, #24
 800a54a:	4619      	mov	r1, r3
 800a54c:	480e      	ldr	r0, [pc, #56]	; (800a588 <xTaskRemoveFromEventList+0xbc>)
 800a54e:	f7fe fd98 	bl	8009082 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a556:	4b0d      	ldr	r3, [pc, #52]	; (800a58c <xTaskRemoveFromEventList+0xc0>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d905      	bls.n	800a56c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a560:	2301      	movs	r3, #1
 800a562:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <xTaskRemoveFromEventList+0xc4>)
 800a566:	2201      	movs	r2, #1
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	e001      	b.n	800a570 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a56c:	2300      	movs	r3, #0
 800a56e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a570:	697b      	ldr	r3, [r7, #20]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	200024cc 	.word	0x200024cc
 800a580:	200024ac 	.word	0x200024ac
 800a584:	20001fd4 	.word	0x20001fd4
 800a588:	20002464 	.word	0x20002464
 800a58c:	20001fd0 	.word	0x20001fd0
 800a590:	200024b8 	.word	0x200024b8

0800a594 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a59e:	4b29      	ldr	r3, [pc, #164]	; (800a644 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10a      	bne.n	800a5bc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	613b      	str	r3, [r7, #16]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10a      	bne.n	800a5e8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	60fb      	str	r3, [r7, #12]
}
 800a5e4:	bf00      	nop
 800a5e6:	e7fe      	b.n	800a5e6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7fe fda5 	bl	8009138 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fe fda0 	bl	8009138 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5fc:	4b12      	ldr	r3, [pc, #72]	; (800a648 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	429a      	cmp	r2, r3
 800a602:	d903      	bls.n	800a60c <vTaskRemoveFromUnorderedEventList+0x78>
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a608:	4a0f      	ldr	r2, [pc, #60]	; (800a648 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a610:	4613      	mov	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4413      	add	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4a0c      	ldr	r2, [pc, #48]	; (800a64c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a61a:	441a      	add	r2, r3
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	3304      	adds	r3, #4
 800a620:	4619      	mov	r1, r3
 800a622:	4610      	mov	r0, r2
 800a624:	f7fe fd2d 	bl	8009082 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62c:	4b08      	ldr	r3, [pc, #32]	; (800a650 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a632:	429a      	cmp	r2, r3
 800a634:	d902      	bls.n	800a63c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a636:	4b07      	ldr	r3, [pc, #28]	; (800a654 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a638:	2201      	movs	r2, #1
 800a63a:	601a      	str	r2, [r3, #0]
	}
}
 800a63c:	bf00      	nop
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	200024cc 	.word	0x200024cc
 800a648:	200024ac 	.word	0x200024ac
 800a64c:	20001fd4 	.word	0x20001fd4
 800a650:	20001fd0 	.word	0x20001fd0
 800a654:	200024b8 	.word	0x200024b8

0800a658 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a660:	4b06      	ldr	r3, [pc, #24]	; (800a67c <vTaskInternalSetTimeOutState+0x24>)
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a668:	4b05      	ldr	r3, [pc, #20]	; (800a680 <vTaskInternalSetTimeOutState+0x28>)
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	605a      	str	r2, [r3, #4]
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	bc80      	pop	{r7}
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	200024bc 	.word	0x200024bc
 800a680:	200024a8 	.word	0x200024a8

0800a684 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10a      	bne.n	800a6aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	613b      	str	r3, [r7, #16]
}
 800a6a6:	bf00      	nop
 800a6a8:	e7fe      	b.n	800a6a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10a      	bne.n	800a6c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	60fb      	str	r3, [r7, #12]
}
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a6c6:	f000 fe41 	bl	800b34c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6ca:	4b1d      	ldr	r3, [pc, #116]	; (800a740 <xTaskCheckForTimeOut+0xbc>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	69ba      	ldr	r2, [r7, #24]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e2:	d102      	bne.n	800a6ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	61fb      	str	r3, [r7, #28]
 800a6e8:	e023      	b.n	800a732 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	4b15      	ldr	r3, [pc, #84]	; (800a744 <xTaskCheckForTimeOut+0xc0>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d007      	beq.n	800a706 <xTaskCheckForTimeOut+0x82>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	69ba      	ldr	r2, [r7, #24]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d302      	bcc.n	800a706 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a700:	2301      	movs	r3, #1
 800a702:	61fb      	str	r3, [r7, #28]
 800a704:	e015      	b.n	800a732 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d20b      	bcs.n	800a728 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	1ad2      	subs	r2, r2, r3
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7ff ff9b 	bl	800a658 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a722:	2300      	movs	r3, #0
 800a724:	61fb      	str	r3, [r7, #28]
 800a726:	e004      	b.n	800a732 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	2200      	movs	r2, #0
 800a72c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a72e:	2301      	movs	r3, #1
 800a730:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a732:	f000 fe3b 	bl	800b3ac <vPortExitCritical>

	return xReturn;
 800a736:	69fb      	ldr	r3, [r7, #28]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	200024a8 	.word	0x200024a8
 800a744:	200024bc 	.word	0x200024bc

0800a748 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a748:	b480      	push	{r7}
 800a74a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a74c:	4b03      	ldr	r3, [pc, #12]	; (800a75c <vTaskMissedYield+0x14>)
 800a74e:	2201      	movs	r2, #1
 800a750:	601a      	str	r2, [r3, #0]
}
 800a752:	bf00      	nop
 800a754:	46bd      	mov	sp, r7
 800a756:	bc80      	pop	{r7}
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	200024b8 	.word	0x200024b8

0800a760 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a768:	f000 f852 	bl	800a810 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a76c:	4b06      	ldr	r3, [pc, #24]	; (800a788 <prvIdleTask+0x28>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d9f9      	bls.n	800a768 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a774:	4b05      	ldr	r3, [pc, #20]	; (800a78c <prvIdleTask+0x2c>)
 800a776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a784:	e7f0      	b.n	800a768 <prvIdleTask+0x8>
 800a786:	bf00      	nop
 800a788:	20001fd4 	.word	0x20001fd4
 800a78c:	e000ed04 	.word	0xe000ed04

0800a790 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a796:	2300      	movs	r3, #0
 800a798:	607b      	str	r3, [r7, #4]
 800a79a:	e00c      	b.n	800a7b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4a12      	ldr	r2, [pc, #72]	; (800a7f0 <prvInitialiseTaskLists+0x60>)
 800a7a8:	4413      	add	r3, r2
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fe fc3e 	bl	800902c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	607b      	str	r3, [r7, #4]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2b37      	cmp	r3, #55	; 0x37
 800a7ba:	d9ef      	bls.n	800a79c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7bc:	480d      	ldr	r0, [pc, #52]	; (800a7f4 <prvInitialiseTaskLists+0x64>)
 800a7be:	f7fe fc35 	bl	800902c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7c2:	480d      	ldr	r0, [pc, #52]	; (800a7f8 <prvInitialiseTaskLists+0x68>)
 800a7c4:	f7fe fc32 	bl	800902c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7c8:	480c      	ldr	r0, [pc, #48]	; (800a7fc <prvInitialiseTaskLists+0x6c>)
 800a7ca:	f7fe fc2f 	bl	800902c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7ce:	480c      	ldr	r0, [pc, #48]	; (800a800 <prvInitialiseTaskLists+0x70>)
 800a7d0:	f7fe fc2c 	bl	800902c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7d4:	480b      	ldr	r0, [pc, #44]	; (800a804 <prvInitialiseTaskLists+0x74>)
 800a7d6:	f7fe fc29 	bl	800902c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7da:	4b0b      	ldr	r3, [pc, #44]	; (800a808 <prvInitialiseTaskLists+0x78>)
 800a7dc:	4a05      	ldr	r2, [pc, #20]	; (800a7f4 <prvInitialiseTaskLists+0x64>)
 800a7de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7e0:	4b0a      	ldr	r3, [pc, #40]	; (800a80c <prvInitialiseTaskLists+0x7c>)
 800a7e2:	4a05      	ldr	r2, [pc, #20]	; (800a7f8 <prvInitialiseTaskLists+0x68>)
 800a7e4:	601a      	str	r2, [r3, #0]
}
 800a7e6:	bf00      	nop
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	20001fd4 	.word	0x20001fd4
 800a7f4:	20002434 	.word	0x20002434
 800a7f8:	20002448 	.word	0x20002448
 800a7fc:	20002464 	.word	0x20002464
 800a800:	20002478 	.word	0x20002478
 800a804:	20002490 	.word	0x20002490
 800a808:	2000245c 	.word	0x2000245c
 800a80c:	20002460 	.word	0x20002460

0800a810 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a816:	e019      	b.n	800a84c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a818:	f000 fd98 	bl	800b34c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a81c:	4b10      	ldr	r3, [pc, #64]	; (800a860 <prvCheckTasksWaitingTermination+0x50>)
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3304      	adds	r3, #4
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fe fc85 	bl	8009138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a82e:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <prvCheckTasksWaitingTermination+0x54>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	3b01      	subs	r3, #1
 800a834:	4a0b      	ldr	r2, [pc, #44]	; (800a864 <prvCheckTasksWaitingTermination+0x54>)
 800a836:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a838:	4b0b      	ldr	r3, [pc, #44]	; (800a868 <prvCheckTasksWaitingTermination+0x58>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3b01      	subs	r3, #1
 800a83e:	4a0a      	ldr	r2, [pc, #40]	; (800a868 <prvCheckTasksWaitingTermination+0x58>)
 800a840:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a842:	f000 fdb3 	bl	800b3ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f810 	bl	800a86c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a84c:	4b06      	ldr	r3, [pc, #24]	; (800a868 <prvCheckTasksWaitingTermination+0x58>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e1      	bne.n	800a818 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a854:	bf00      	nop
 800a856:	bf00      	nop
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	20002478 	.word	0x20002478
 800a864:	200024a4 	.word	0x200024a4
 800a868:	2000248c 	.word	0x2000248c

0800a86c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	3354      	adds	r3, #84	; 0x54
 800a878:	4618      	mov	r0, r3
 800a87a:	f001 f847 	bl	800b90c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a884:	2b00      	cmp	r3, #0
 800a886:	d108      	bne.n	800a89a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 ff21 	bl	800b6d4 <vPortFree>
				vPortFree( pxTCB );
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 ff1e 	bl	800b6d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a898:	e018      	b.n	800a8cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d103      	bne.n	800a8ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 ff15 	bl	800b6d4 <vPortFree>
	}
 800a8aa:	e00f      	b.n	800a8cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d00a      	beq.n	800a8cc <prvDeleteTCB+0x60>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	60fb      	str	r3, [r7, #12]
}
 800a8c8:	bf00      	nop
 800a8ca:	e7fe      	b.n	800a8ca <prvDeleteTCB+0x5e>
	}
 800a8cc:	bf00      	nop
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8da:	4b0e      	ldr	r3, [pc, #56]	; (800a914 <prvResetNextTaskUnblockTime+0x40>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d101      	bne.n	800a8e8 <prvResetNextTaskUnblockTime+0x14>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e000      	b.n	800a8ea <prvResetNextTaskUnblockTime+0x16>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d004      	beq.n	800a8f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8ee:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <prvResetNextTaskUnblockTime+0x44>)
 800a8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8f6:	e008      	b.n	800a90a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a8f8:	4b06      	ldr	r3, [pc, #24]	; (800a914 <prvResetNextTaskUnblockTime+0x40>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	4a04      	ldr	r2, [pc, #16]	; (800a918 <prvResetNextTaskUnblockTime+0x44>)
 800a908:	6013      	str	r3, [r2, #0]
}
 800a90a:	bf00      	nop
 800a90c:	370c      	adds	r7, #12
 800a90e:	46bd      	mov	sp, r7
 800a910:	bc80      	pop	{r7}
 800a912:	4770      	bx	lr
 800a914:	2000245c 	.word	0x2000245c
 800a918:	200024c4 	.word	0x200024c4

0800a91c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a922:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <xTaskGetSchedulerState+0x34>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d102      	bne.n	800a930 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a92a:	2301      	movs	r3, #1
 800a92c:	607b      	str	r3, [r7, #4]
 800a92e:	e008      	b.n	800a942 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a930:	4b08      	ldr	r3, [pc, #32]	; (800a954 <xTaskGetSchedulerState+0x38>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a938:	2302      	movs	r3, #2
 800a93a:	607b      	str	r3, [r7, #4]
 800a93c:	e001      	b.n	800a942 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a93e:	2300      	movs	r3, #0
 800a940:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a942:	687b      	ldr	r3, [r7, #4]
	}
 800a944:	4618      	mov	r0, r3
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	bc80      	pop	{r7}
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	200024b0 	.word	0x200024b0
 800a954:	200024cc 	.word	0x200024cc

0800a958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a964:	2300      	movs	r3, #0
 800a966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d056      	beq.n	800aa1c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a96e:	4b2e      	ldr	r3, [pc, #184]	; (800aa28 <xTaskPriorityDisinherit+0xd0>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	429a      	cmp	r2, r3
 800a976:	d00a      	beq.n	800a98e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	60fb      	str	r3, [r7, #12]
}
 800a98a:	bf00      	nop
 800a98c:	e7fe      	b.n	800a98c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10a      	bne.n	800a9ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	60bb      	str	r3, [r7, #8]
}
 800a9a8:	bf00      	nop
 800a9aa:	e7fe      	b.n	800a9aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b0:	1e5a      	subs	r2, r3, #1
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d02c      	beq.n	800aa1c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d128      	bne.n	800aa1c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fe fbb2 	bl	8009138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ec:	4b0f      	ldr	r3, [pc, #60]	; (800aa2c <xTaskPriorityDisinherit+0xd4>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d903      	bls.n	800a9fc <xTaskPriorityDisinherit+0xa4>
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	4a0c      	ldr	r2, [pc, #48]	; (800aa2c <xTaskPriorityDisinherit+0xd4>)
 800a9fa:	6013      	str	r3, [r2, #0]
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa00:	4613      	mov	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4a09      	ldr	r2, [pc, #36]	; (800aa30 <xTaskPriorityDisinherit+0xd8>)
 800aa0a:	441a      	add	r2, r3
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	4619      	mov	r1, r3
 800aa12:	4610      	mov	r0, r2
 800aa14:	f7fe fb35 	bl	8009082 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa1c:	697b      	ldr	r3, [r7, #20]
	}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	20001fd0 	.word	0x20001fd0
 800aa2c:	200024ac 	.word	0x200024ac
 800aa30:	20001fd4 	.word	0x20001fd4

0800aa34 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800aa3a:	4b09      	ldr	r3, [pc, #36]	; (800aa60 <uxTaskResetEventItemValue+0x2c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa42:	4b07      	ldr	r3, [pc, #28]	; (800aa60 <uxTaskResetEventItemValue+0x2c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa48:	4b05      	ldr	r3, [pc, #20]	; (800aa60 <uxTaskResetEventItemValue+0x2c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800aa50:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800aa52:	687b      	ldr	r3, [r7, #4]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bc80      	pop	{r7}
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	20001fd0 	.word	0x20001fd0

0800aa64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa6e:	4b21      	ldr	r3, [pc, #132]	; (800aaf4 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa74:	4b20      	ldr	r3, [pc, #128]	; (800aaf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3304      	adds	r3, #4
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe fb5c 	bl	8009138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa86:	d10a      	bne.n	800aa9e <prvAddCurrentTaskToDelayedList+0x3a>
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d007      	beq.n	800aa9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa8e:	4b1a      	ldr	r3, [pc, #104]	; (800aaf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	3304      	adds	r3, #4
 800aa94:	4619      	mov	r1, r3
 800aa96:	4819      	ldr	r0, [pc, #100]	; (800aafc <prvAddCurrentTaskToDelayedList+0x98>)
 800aa98:	f7fe faf3 	bl	8009082 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa9c:	e026      	b.n	800aaec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aaa6:	4b14      	ldr	r3, [pc, #80]	; (800aaf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d209      	bcs.n	800aaca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aab6:	4b12      	ldr	r3, [pc, #72]	; (800ab00 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	4b0f      	ldr	r3, [pc, #60]	; (800aaf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f7fe fb00 	bl	80090c8 <vListInsert>
}
 800aac8:	e010      	b.n	800aaec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaca:	4b0e      	ldr	r3, [pc, #56]	; (800ab04 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3304      	adds	r3, #4
 800aad4:	4619      	mov	r1, r3
 800aad6:	4610      	mov	r0, r2
 800aad8:	f7fe faf6 	bl	80090c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aadc:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d202      	bcs.n	800aaec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aae6:	4a08      	ldr	r2, [pc, #32]	; (800ab08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	6013      	str	r3, [r2, #0]
}
 800aaec:	bf00      	nop
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	200024a8 	.word	0x200024a8
 800aaf8:	20001fd0 	.word	0x20001fd0
 800aafc:	20002490 	.word	0x20002490
 800ab00:	20002460 	.word	0x20002460
 800ab04:	2000245c 	.word	0x2000245c
 800ab08:	200024c4 	.word	0x200024c4

0800ab0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08a      	sub	sp, #40	; 0x28
 800ab10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab16:	f000 facb 	bl	800b0b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab1a:	4b1c      	ldr	r3, [pc, #112]	; (800ab8c <xTimerCreateTimerTask+0x80>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d021      	beq.n	800ab66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab22:	2300      	movs	r3, #0
 800ab24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab2a:	1d3a      	adds	r2, r7, #4
 800ab2c:	f107 0108 	add.w	r1, r7, #8
 800ab30:	f107 030c 	add.w	r3, r7, #12
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fe f839 	bl	8008bac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab3a:	6879      	ldr	r1, [r7, #4]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	9202      	str	r2, [sp, #8]
 800ab42:	9301      	str	r3, [sp, #4]
 800ab44:	2302      	movs	r3, #2
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	2300      	movs	r3, #0
 800ab4a:	460a      	mov	r2, r1
 800ab4c:	4910      	ldr	r1, [pc, #64]	; (800ab90 <xTimerCreateTimerTask+0x84>)
 800ab4e:	4811      	ldr	r0, [pc, #68]	; (800ab94 <xTimerCreateTimerTask+0x88>)
 800ab50:	f7ff f800 	bl	8009b54 <xTaskCreateStatic>
 800ab54:	4603      	mov	r3, r0
 800ab56:	4a10      	ldr	r2, [pc, #64]	; (800ab98 <xTimerCreateTimerTask+0x8c>)
 800ab58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab5a:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <xTimerCreateTimerTask+0x8c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab62:	2301      	movs	r3, #1
 800ab64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d10a      	bne.n	800ab82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ab6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	613b      	str	r3, [r7, #16]
}
 800ab7e:	bf00      	nop
 800ab80:	e7fe      	b.n	800ab80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ab82:	697b      	ldr	r3, [r7, #20]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20002500 	.word	0x20002500
 800ab90:	0800bb80 	.word	0x0800bb80
 800ab94:	0800acb9 	.word	0x0800acb9
 800ab98:	20002504 	.word	0x20002504

0800ab9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08a      	sub	sp, #40	; 0x28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
 800aba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800abaa:	2300      	movs	r3, #0
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10a      	bne.n	800abca <xTimerGenericCommand+0x2e>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	623b      	str	r3, [r7, #32]
}
 800abc6:	bf00      	nop
 800abc8:	e7fe      	b.n	800abc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abca:	4b1a      	ldr	r3, [pc, #104]	; (800ac34 <xTimerGenericCommand+0x98>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d02a      	beq.n	800ac28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2b05      	cmp	r3, #5
 800abe2:	dc18      	bgt.n	800ac16 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800abe4:	f7ff fe9a 	bl	800a91c <xTaskGetSchedulerState>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b02      	cmp	r3, #2
 800abec:	d109      	bne.n	800ac02 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800abee:	4b11      	ldr	r3, [pc, #68]	; (800ac34 <xTimerGenericCommand+0x98>)
 800abf0:	6818      	ldr	r0, [r3, #0]
 800abf2:	f107 0110 	add.w	r1, r7, #16
 800abf6:	2300      	movs	r3, #0
 800abf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abfa:	f7fe fbc9 	bl	8009390 <xQueueGenericSend>
 800abfe:	6278      	str	r0, [r7, #36]	; 0x24
 800ac00:	e012      	b.n	800ac28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac02:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <xTimerGenericCommand+0x98>)
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	f107 0110 	add.w	r1, r7, #16
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f7fe fbbf 	bl	8009390 <xQueueGenericSend>
 800ac12:	6278      	str	r0, [r7, #36]	; 0x24
 800ac14:	e008      	b.n	800ac28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac16:	4b07      	ldr	r3, [pc, #28]	; (800ac34 <xTimerGenericCommand+0x98>)
 800ac18:	6818      	ldr	r0, [r3, #0]
 800ac1a:	f107 0110 	add.w	r1, r7, #16
 800ac1e:	2300      	movs	r3, #0
 800ac20:	683a      	ldr	r2, [r7, #0]
 800ac22:	f7fe fcb3 	bl	800958c <xQueueGenericSendFromISR>
 800ac26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3728      	adds	r7, #40	; 0x28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20002500 	.word	0x20002500

0800ac38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af02      	add	r7, sp, #8
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac42:	4b1c      	ldr	r3, [pc, #112]	; (800acb4 <prvProcessExpiredTimer+0x7c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fe fa71 	bl	8009138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d122      	bne.n	800aca4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	699a      	ldr	r2, [r3, #24]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	18d1      	adds	r1, r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	6978      	ldr	r0, [r7, #20]
 800ac6c:	f000 f8c8 	bl	800ae00 <prvInsertTimerInActiveList>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d016      	beq.n	800aca4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac76:	2300      	movs	r3, #0
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	2100      	movs	r1, #0
 800ac80:	6978      	ldr	r0, [r7, #20]
 800ac82:	f7ff ff8b 	bl	800ab9c <xTimerGenericCommand>
 800ac86:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10a      	bne.n	800aca4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	60fb      	str	r3, [r7, #12]
}
 800aca0:	bf00      	nop
 800aca2:	e7fe      	b.n	800aca2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	6978      	ldr	r0, [r7, #20]
 800acaa:	4798      	blx	r3
}
 800acac:	bf00      	nop
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	200024f8 	.word	0x200024f8

0800acb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acc0:	f107 0308 	add.w	r3, r7, #8
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 f857 	bl	800ad78 <prvGetNextExpireTime>
 800acca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	4619      	mov	r1, r3
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f000 f803 	bl	800acdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800acd6:	f000 f8d5 	bl	800ae84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acda:	e7f1      	b.n	800acc0 <prvTimerTask+0x8>

0800acdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ace6:	f7ff f989 	bl	8009ffc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800acea:	f107 0308 	add.w	r3, r7, #8
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 f866 	bl	800adc0 <prvSampleTimeNow>
 800acf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d130      	bne.n	800ad5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10a      	bne.n	800ad18 <prvProcessTimerOrBlockTask+0x3c>
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d806      	bhi.n	800ad18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad0a:	f7ff f985 	bl	800a018 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad0e:	68f9      	ldr	r1, [r7, #12]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7ff ff91 	bl	800ac38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad16:	e024      	b.n	800ad62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d008      	beq.n	800ad30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad1e:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <prvProcessTimerOrBlockTask+0x90>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	bf0c      	ite	eq
 800ad28:	2301      	moveq	r3, #1
 800ad2a:	2300      	movne	r3, #0
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad30:	4b0f      	ldr	r3, [pc, #60]	; (800ad70 <prvProcessTimerOrBlockTask+0x94>)
 800ad32:	6818      	ldr	r0, [r3, #0]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	f7fe fed5 	bl	8009aec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad42:	f7ff f969 	bl	800a018 <xTaskResumeAll>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10a      	bne.n	800ad62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad4c:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <prvProcessTimerOrBlockTask+0x98>)
 800ad4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad52:	601a      	str	r2, [r3, #0]
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	f3bf 8f6f 	isb	sy
}
 800ad5c:	e001      	b.n	800ad62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad5e:	f7ff f95b 	bl	800a018 <xTaskResumeAll>
}
 800ad62:	bf00      	nop
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	200024fc 	.word	0x200024fc
 800ad70:	20002500 	.word	0x20002500
 800ad74:	e000ed04 	.word	0xe000ed04

0800ad78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad80:	4b0e      	ldr	r3, [pc, #56]	; (800adbc <prvGetNextExpireTime+0x44>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	bf0c      	ite	eq
 800ad8a:	2301      	moveq	r3, #1
 800ad8c:	2300      	movne	r3, #0
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	461a      	mov	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d105      	bne.n	800adaa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad9e:	4b07      	ldr	r3, [pc, #28]	; (800adbc <prvGetNextExpireTime+0x44>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	60fb      	str	r3, [r7, #12]
 800ada8:	e001      	b.n	800adae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800adae:	68fb      	ldr	r3, [r7, #12]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bc80      	pop	{r7}
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	200024f8 	.word	0x200024f8

0800adc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800adc8:	f7ff f9c4 	bl	800a154 <xTaskGetTickCount>
 800adcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800adce:	4b0b      	ldr	r3, [pc, #44]	; (800adfc <prvSampleTimeNow+0x3c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	429a      	cmp	r2, r3
 800add6:	d205      	bcs.n	800ade4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800add8:	f000 f908 	bl	800afec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	601a      	str	r2, [r3, #0]
 800ade2:	e002      	b.n	800adea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800adea:	4a04      	ldr	r2, [pc, #16]	; (800adfc <prvSampleTimeNow+0x3c>)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800adf0:	68fb      	ldr	r3, [r7, #12]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20002508 	.word	0x20002508

0800ae00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d812      	bhi.n	800ae4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	1ad2      	subs	r2, r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d302      	bcc.n	800ae3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae34:	2301      	movs	r3, #1
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	e01b      	b.n	800ae72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae3a:	4b10      	ldr	r3, [pc, #64]	; (800ae7c <prvInsertTimerInActiveList+0x7c>)
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3304      	adds	r3, #4
 800ae42:	4619      	mov	r1, r3
 800ae44:	4610      	mov	r0, r2
 800ae46:	f7fe f93f 	bl	80090c8 <vListInsert>
 800ae4a:	e012      	b.n	800ae72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d206      	bcs.n	800ae62 <prvInsertTimerInActiveList+0x62>
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d302      	bcc.n	800ae62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	e007      	b.n	800ae72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae62:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <prvInsertTimerInActiveList+0x80>)
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3304      	adds	r3, #4
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f7fe f92b 	bl	80090c8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae72:	697b      	ldr	r3, [r7, #20]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3718      	adds	r7, #24
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	200024fc 	.word	0x200024fc
 800ae80:	200024f8 	.word	0x200024f8

0800ae84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08e      	sub	sp, #56	; 0x38
 800ae88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae8a:	e09d      	b.n	800afc8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	da18      	bge.n	800aec4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae92:	1d3b      	adds	r3, r7, #4
 800ae94:	3304      	adds	r3, #4
 800ae96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10a      	bne.n	800aeb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	61fb      	str	r3, [r7, #28]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeba:	6850      	ldr	r0, [r2, #4]
 800aebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aebe:	6892      	ldr	r2, [r2, #8]
 800aec0:	4611      	mov	r1, r2
 800aec2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	db7e      	blt.n	800afc8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed0:	695b      	ldr	r3, [r3, #20]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d004      	beq.n	800aee0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed8:	3304      	adds	r3, #4
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe f92c 	bl	8009138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aee0:	463b      	mov	r3, r7
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7ff ff6c 	bl	800adc0 <prvSampleTimeNow>
 800aee8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b09      	cmp	r3, #9
 800aeee:	d86a      	bhi.n	800afc6 <prvProcessReceivedCommands+0x142>
 800aef0:	a201      	add	r2, pc, #4	; (adr r2, 800aef8 <prvProcessReceivedCommands+0x74>)
 800aef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef6:	bf00      	nop
 800aef8:	0800af21 	.word	0x0800af21
 800aefc:	0800af21 	.word	0x0800af21
 800af00:	0800af21 	.word	0x0800af21
 800af04:	0800afc9 	.word	0x0800afc9
 800af08:	0800af7d 	.word	0x0800af7d
 800af0c:	0800afb5 	.word	0x0800afb5
 800af10:	0800af21 	.word	0x0800af21
 800af14:	0800af21 	.word	0x0800af21
 800af18:	0800afc9 	.word	0x0800afc9
 800af1c:	0800af7d 	.word	0x0800af7d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	18d1      	adds	r1, r2, r3
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af2e:	f7ff ff67 	bl	800ae00 <prvInsertTimerInActiveList>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d047      	beq.n	800afc8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af3e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	69db      	ldr	r3, [r3, #28]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d13f      	bne.n	800afc8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	441a      	add	r2, r3
 800af50:	2300      	movs	r3, #0
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	2300      	movs	r3, #0
 800af56:	2100      	movs	r1, #0
 800af58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af5a:	f7ff fe1f 	bl	800ab9c <xTimerGenericCommand>
 800af5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d130      	bne.n	800afc8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800af66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	61bb      	str	r3, [r7, #24]
}
 800af78:	bf00      	nop
 800af7a:	e7fe      	b.n	800af7a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af80:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10a      	bne.n	800afa0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	617b      	str	r3, [r7, #20]
}
 800af9c:	bf00      	nop
 800af9e:	e7fe      	b.n	800af9e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa2:	699a      	ldr	r2, [r3, #24]
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	18d1      	adds	r1, r2, r3
 800afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afae:	f7ff ff27 	bl	800ae00 <prvInsertTimerInActiveList>
					break;
 800afb2:	e009      	b.n	800afc8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d104      	bne.n	800afc8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800afbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afc0:	f000 fb88 	bl	800b6d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800afc4:	e000      	b.n	800afc8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800afc6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afc8:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <prvProcessReceivedCommands+0x164>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	1d39      	adds	r1, r7, #4
 800afce:	2200      	movs	r2, #0
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fe fb73 	bl	80096bc <xQueueReceive>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f47f af57 	bne.w	800ae8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800afde:	bf00      	nop
 800afe0:	bf00      	nop
 800afe2:	3730      	adds	r7, #48	; 0x30
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	20002500 	.word	0x20002500

0800afec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b088      	sub	sp, #32
 800aff0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aff2:	e045      	b.n	800b080 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aff4:	4b2c      	ldr	r3, [pc, #176]	; (800b0a8 <prvSwitchTimerLists+0xbc>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800affe:	4b2a      	ldr	r3, [pc, #168]	; (800b0a8 <prvSwitchTimerLists+0xbc>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3304      	adds	r3, #4
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fe f893 	bl	8009138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d12e      	bne.n	800b080 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	4413      	add	r3, r2
 800b02a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	429a      	cmp	r2, r3
 800b032:	d90e      	bls.n	800b052 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b040:	4b19      	ldr	r3, [pc, #100]	; (800b0a8 <prvSwitchTimerLists+0xbc>)
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3304      	adds	r3, #4
 800b048:	4619      	mov	r1, r3
 800b04a:	4610      	mov	r0, r2
 800b04c:	f7fe f83c 	bl	80090c8 <vListInsert>
 800b050:	e016      	b.n	800b080 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b052:	2300      	movs	r3, #0
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	2300      	movs	r3, #0
 800b058:	693a      	ldr	r2, [r7, #16]
 800b05a:	2100      	movs	r1, #0
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f7ff fd9d 	bl	800ab9c <xTimerGenericCommand>
 800b062:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10a      	bne.n	800b080 <prvSwitchTimerLists+0x94>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	603b      	str	r3, [r7, #0]
}
 800b07c:	bf00      	nop
 800b07e:	e7fe      	b.n	800b07e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b080:	4b09      	ldr	r3, [pc, #36]	; (800b0a8 <prvSwitchTimerLists+0xbc>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1b4      	bne.n	800aff4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b08a:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <prvSwitchTimerLists+0xbc>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b090:	4b06      	ldr	r3, [pc, #24]	; (800b0ac <prvSwitchTimerLists+0xc0>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a04      	ldr	r2, [pc, #16]	; (800b0a8 <prvSwitchTimerLists+0xbc>)
 800b096:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b098:	4a04      	ldr	r2, [pc, #16]	; (800b0ac <prvSwitchTimerLists+0xc0>)
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	6013      	str	r3, [r2, #0]
}
 800b09e:	bf00      	nop
 800b0a0:	3718      	adds	r7, #24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	200024f8 	.word	0x200024f8
 800b0ac:	200024fc 	.word	0x200024fc

0800b0b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b0b6:	f000 f949 	bl	800b34c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b0ba:	4b15      	ldr	r3, [pc, #84]	; (800b110 <prvCheckForValidListAndQueue+0x60>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d120      	bne.n	800b104 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b0c2:	4814      	ldr	r0, [pc, #80]	; (800b114 <prvCheckForValidListAndQueue+0x64>)
 800b0c4:	f7fd ffb2 	bl	800902c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b0c8:	4813      	ldr	r0, [pc, #76]	; (800b118 <prvCheckForValidListAndQueue+0x68>)
 800b0ca:	f7fd ffaf 	bl	800902c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b0ce:	4b13      	ldr	r3, [pc, #76]	; (800b11c <prvCheckForValidListAndQueue+0x6c>)
 800b0d0:	4a10      	ldr	r2, [pc, #64]	; (800b114 <prvCheckForValidListAndQueue+0x64>)
 800b0d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b0d4:	4b12      	ldr	r3, [pc, #72]	; (800b120 <prvCheckForValidListAndQueue+0x70>)
 800b0d6:	4a10      	ldr	r2, [pc, #64]	; (800b118 <prvCheckForValidListAndQueue+0x68>)
 800b0d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	4b11      	ldr	r3, [pc, #68]	; (800b124 <prvCheckForValidListAndQueue+0x74>)
 800b0e0:	4a11      	ldr	r2, [pc, #68]	; (800b128 <prvCheckForValidListAndQueue+0x78>)
 800b0e2:	2110      	movs	r1, #16
 800b0e4:	200a      	movs	r0, #10
 800b0e6:	f7fe f8b9 	bl	800925c <xQueueGenericCreateStatic>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	4a08      	ldr	r2, [pc, #32]	; (800b110 <prvCheckForValidListAndQueue+0x60>)
 800b0ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <prvCheckForValidListAndQueue+0x60>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d005      	beq.n	800b104 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b0f8:	4b05      	ldr	r3, [pc, #20]	; (800b110 <prvCheckForValidListAndQueue+0x60>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	490b      	ldr	r1, [pc, #44]	; (800b12c <prvCheckForValidListAndQueue+0x7c>)
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fe fccc 	bl	8009a9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b104:	f000 f952 	bl	800b3ac <vPortExitCritical>
}
 800b108:	bf00      	nop
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	20002500 	.word	0x20002500
 800b114:	200024d0 	.word	0x200024d0
 800b118:	200024e4 	.word	0x200024e4
 800b11c:	200024f8 	.word	0x200024f8
 800b120:	200024fc 	.word	0x200024fc
 800b124:	200025ac 	.word	0x200025ac
 800b128:	2000250c 	.word	0x2000250c
 800b12c:	0800bb88 	.word	0x0800bb88

0800b130 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08a      	sub	sp, #40	; 0x28
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
 800b13c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b13e:	f06f 0301 	mvn.w	r3, #1
 800b142:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b150:	4b06      	ldr	r3, [pc, #24]	; (800b16c <xTimerPendFunctionCallFromISR+0x3c>)
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	f107 0114 	add.w	r1, r7, #20
 800b158:	2300      	movs	r3, #0
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	f7fe fa16 	bl	800958c <xQueueGenericSendFromISR>
 800b160:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b164:	4618      	mov	r0, r3
 800b166:	3728      	adds	r7, #40	; 0x28
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	20002500 	.word	0x20002500

0800b170 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3b04      	subs	r3, #4
 800b180:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	3b04      	subs	r3, #4
 800b18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	f023 0201 	bic.w	r2, r3, #1
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3b04      	subs	r3, #4
 800b19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1a0:	4a08      	ldr	r2, [pc, #32]	; (800b1c4 <pxPortInitialiseStack+0x54>)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	3b14      	subs	r3, #20
 800b1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3b20      	subs	r3, #32
 800b1b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bc80      	pop	{r7}
 800b1c2:	4770      	bx	lr
 800b1c4:	0800b1c9 	.word	0x0800b1c9

0800b1c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1d2:	4b12      	ldr	r3, [pc, #72]	; (800b21c <prvTaskExitError+0x54>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1da:	d00a      	beq.n	800b1f2 <prvTaskExitError+0x2a>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	60fb      	str	r3, [r7, #12]
}
 800b1ee:	bf00      	nop
 800b1f0:	e7fe      	b.n	800b1f0 <prvTaskExitError+0x28>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	60bb      	str	r3, [r7, #8]
}
 800b204:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b206:	bf00      	nop
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0fc      	beq.n	800b208 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b20e:	bf00      	nop
 800b210:	bf00      	nop
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	bc80      	pop	{r7}
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	20000098 	.word	0x20000098

0800b220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b220:	4b07      	ldr	r3, [pc, #28]	; (800b240 <pxCurrentTCBConst2>)
 800b222:	6819      	ldr	r1, [r3, #0]
 800b224:	6808      	ldr	r0, [r1, #0]
 800b226:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b22a:	f380 8809 	msr	PSP, r0
 800b22e:	f3bf 8f6f 	isb	sy
 800b232:	f04f 0000 	mov.w	r0, #0
 800b236:	f380 8811 	msr	BASEPRI, r0
 800b23a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b23e:	4770      	bx	lr

0800b240 <pxCurrentTCBConst2>:
 800b240:	20001fd0 	.word	0x20001fd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop

0800b248 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b248:	4806      	ldr	r0, [pc, #24]	; (800b264 <prvPortStartFirstTask+0x1c>)
 800b24a:	6800      	ldr	r0, [r0, #0]
 800b24c:	6800      	ldr	r0, [r0, #0]
 800b24e:	f380 8808 	msr	MSP, r0
 800b252:	b662      	cpsie	i
 800b254:	b661      	cpsie	f
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	df00      	svc	0
 800b260:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b262:	bf00      	nop
 800b264:	e000ed08 	.word	0xe000ed08

0800b268 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b26e:	4b32      	ldr	r3, [pc, #200]	; (800b338 <xPortStartScheduler+0xd0>)
 800b270:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	b2db      	uxtb	r3, r3
 800b278:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	22ff      	movs	r2, #255	; 0xff
 800b27e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	b2db      	uxtb	r3, r3
 800b286:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b288:	78fb      	ldrb	r3, [r7, #3]
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b290:	b2da      	uxtb	r2, r3
 800b292:	4b2a      	ldr	r3, [pc, #168]	; (800b33c <xPortStartScheduler+0xd4>)
 800b294:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b296:	4b2a      	ldr	r3, [pc, #168]	; (800b340 <xPortStartScheduler+0xd8>)
 800b298:	2207      	movs	r2, #7
 800b29a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b29c:	e009      	b.n	800b2b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b29e:	4b28      	ldr	r3, [pc, #160]	; (800b340 <xPortStartScheduler+0xd8>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	4a26      	ldr	r2, [pc, #152]	; (800b340 <xPortStartScheduler+0xd8>)
 800b2a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2a8:	78fb      	ldrb	r3, [r7, #3]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	005b      	lsls	r3, r3, #1
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2b2:	78fb      	ldrb	r3, [r7, #3]
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ba:	2b80      	cmp	r3, #128	; 0x80
 800b2bc:	d0ef      	beq.n	800b29e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2be:	4b20      	ldr	r3, [pc, #128]	; (800b340 <xPortStartScheduler+0xd8>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f1c3 0307 	rsb	r3, r3, #7
 800b2c6:	2b04      	cmp	r3, #4
 800b2c8:	d00a      	beq.n	800b2e0 <xPortStartScheduler+0x78>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	60bb      	str	r3, [r7, #8]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2e0:	4b17      	ldr	r3, [pc, #92]	; (800b340 <xPortStartScheduler+0xd8>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	021b      	lsls	r3, r3, #8
 800b2e6:	4a16      	ldr	r2, [pc, #88]	; (800b340 <xPortStartScheduler+0xd8>)
 800b2e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2ea:	4b15      	ldr	r3, [pc, #84]	; (800b340 <xPortStartScheduler+0xd8>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2f2:	4a13      	ldr	r2, [pc, #76]	; (800b340 <xPortStartScheduler+0xd8>)
 800b2f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2fe:	4b11      	ldr	r3, [pc, #68]	; (800b344 <xPortStartScheduler+0xdc>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a10      	ldr	r2, [pc, #64]	; (800b344 <xPortStartScheduler+0xdc>)
 800b304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b308:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b30a:	4b0e      	ldr	r3, [pc, #56]	; (800b344 <xPortStartScheduler+0xdc>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a0d      	ldr	r2, [pc, #52]	; (800b344 <xPortStartScheduler+0xdc>)
 800b310:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b314:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b316:	f000 f8b9 	bl	800b48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b31a:	4b0b      	ldr	r3, [pc, #44]	; (800b348 <xPortStartScheduler+0xe0>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b320:	f7ff ff92 	bl	800b248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b324:	f7fe ffe2 	bl	800a2ec <vTaskSwitchContext>
	prvTaskExitError();
 800b328:	f7ff ff4e 	bl	800b1c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	e000e400 	.word	0xe000e400
 800b33c:	200025fc 	.word	0x200025fc
 800b340:	20002600 	.word	0x20002600
 800b344:	e000ed20 	.word	0xe000ed20
 800b348:	20000098 	.word	0x20000098

0800b34c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
	__asm volatile
 800b352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	607b      	str	r3, [r7, #4]
}
 800b364:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b366:	4b0f      	ldr	r3, [pc, #60]	; (800b3a4 <vPortEnterCritical+0x58>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3301      	adds	r3, #1
 800b36c:	4a0d      	ldr	r2, [pc, #52]	; (800b3a4 <vPortEnterCritical+0x58>)
 800b36e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b370:	4b0c      	ldr	r3, [pc, #48]	; (800b3a4 <vPortEnterCritical+0x58>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d10f      	bne.n	800b398 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b378:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <vPortEnterCritical+0x5c>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00a      	beq.n	800b398 <vPortEnterCritical+0x4c>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	603b      	str	r3, [r7, #0]
}
 800b394:	bf00      	nop
 800b396:	e7fe      	b.n	800b396 <vPortEnterCritical+0x4a>
	}
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	20000098 	.word	0x20000098
 800b3a8:	e000ed04 	.word	0xe000ed04

0800b3ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3b2:	4b11      	ldr	r3, [pc, #68]	; (800b3f8 <vPortExitCritical+0x4c>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10a      	bne.n	800b3d0 <vPortExitCritical+0x24>
	__asm volatile
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	607b      	str	r3, [r7, #4]
}
 800b3cc:	bf00      	nop
 800b3ce:	e7fe      	b.n	800b3ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3d0:	4b09      	ldr	r3, [pc, #36]	; (800b3f8 <vPortExitCritical+0x4c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	4a08      	ldr	r2, [pc, #32]	; (800b3f8 <vPortExitCritical+0x4c>)
 800b3d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3da:	4b07      	ldr	r3, [pc, #28]	; (800b3f8 <vPortExitCritical+0x4c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <vPortExitCritical+0x42>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	f383 8811 	msr	BASEPRI, r3
}
 800b3ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3ee:	bf00      	nop
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bc80      	pop	{r7}
 800b3f6:	4770      	bx	lr
 800b3f8:	20000098 	.word	0x20000098
 800b3fc:	00000000 	.word	0x00000000

0800b400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b400:	f3ef 8009 	mrs	r0, PSP
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <pxCurrentTCBConst>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b410:	6010      	str	r0, [r2, #0]
 800b412:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b416:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b41a:	f380 8811 	msr	BASEPRI, r0
 800b41e:	f7fe ff65 	bl	800a2ec <vTaskSwitchContext>
 800b422:	f04f 0000 	mov.w	r0, #0
 800b426:	f380 8811 	msr	BASEPRI, r0
 800b42a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b42e:	6819      	ldr	r1, [r3, #0]
 800b430:	6808      	ldr	r0, [r1, #0]
 800b432:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b436:	f380 8809 	msr	PSP, r0
 800b43a:	f3bf 8f6f 	isb	sy
 800b43e:	4770      	bx	lr

0800b440 <pxCurrentTCBConst>:
 800b440:	20001fd0 	.word	0x20001fd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop

0800b448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	607b      	str	r3, [r7, #4]
}
 800b460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b462:	f7fe fe85 	bl	800a170 <xTaskIncrementTick>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <SysTick_Handler+0x40>)
 800b46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	2300      	movs	r3, #0
 800b476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	f383 8811 	msr	BASEPRI, r3
}
 800b47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	e000ed04 	.word	0xe000ed04

0800b48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b48c:	b480      	push	{r7}
 800b48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b490:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <vPortSetupTimerInterrupt+0x30>)
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b496:	4b0a      	ldr	r3, [pc, #40]	; (800b4c0 <vPortSetupTimerInterrupt+0x34>)
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b49c:	4b09      	ldr	r3, [pc, #36]	; (800b4c4 <vPortSetupTimerInterrupt+0x38>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a09      	ldr	r2, [pc, #36]	; (800b4c8 <vPortSetupTimerInterrupt+0x3c>)
 800b4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a6:	099b      	lsrs	r3, r3, #6
 800b4a8:	4a08      	ldr	r2, [pc, #32]	; (800b4cc <vPortSetupTimerInterrupt+0x40>)
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4ae:	4b03      	ldr	r3, [pc, #12]	; (800b4bc <vPortSetupTimerInterrupt+0x30>)
 800b4b0:	2207      	movs	r2, #7
 800b4b2:	601a      	str	r2, [r3, #0]
}
 800b4b4:	bf00      	nop
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bc80      	pop	{r7}
 800b4ba:	4770      	bx	lr
 800b4bc:	e000e010 	.word	0xe000e010
 800b4c0:	e000e018 	.word	0xe000e018
 800b4c4:	20000004 	.word	0x20000004
 800b4c8:	10624dd3 	.word	0x10624dd3
 800b4cc:	e000e014 	.word	0xe000e014

0800b4d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4d6:	f3ef 8305 	mrs	r3, IPSR
 800b4da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b0f      	cmp	r3, #15
 800b4e0:	d914      	bls.n	800b50c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4e2:	4a16      	ldr	r2, [pc, #88]	; (800b53c <vPortValidateInterruptPriority+0x6c>)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4ec:	4b14      	ldr	r3, [pc, #80]	; (800b540 <vPortValidateInterruptPriority+0x70>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	7afa      	ldrb	r2, [r7, #11]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d20a      	bcs.n	800b50c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	607b      	str	r3, [r7, #4]
}
 800b508:	bf00      	nop
 800b50a:	e7fe      	b.n	800b50a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b50c:	4b0d      	ldr	r3, [pc, #52]	; (800b544 <vPortValidateInterruptPriority+0x74>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b514:	4b0c      	ldr	r3, [pc, #48]	; (800b548 <vPortValidateInterruptPriority+0x78>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d90a      	bls.n	800b532 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	603b      	str	r3, [r7, #0]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <vPortValidateInterruptPriority+0x60>
	}
 800b532:	bf00      	nop
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	bc80      	pop	{r7}
 800b53a:	4770      	bx	lr
 800b53c:	e000e3f0 	.word	0xe000e3f0
 800b540:	200025fc 	.word	0x200025fc
 800b544:	e000ed0c 	.word	0xe000ed0c
 800b548:	20002600 	.word	0x20002600

0800b54c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08a      	sub	sp, #40	; 0x28
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b554:	2300      	movs	r3, #0
 800b556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b558:	f7fe fd50 	bl	8009ffc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b55c:	4b58      	ldr	r3, [pc, #352]	; (800b6c0 <pvPortMalloc+0x174>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b564:	f000 f910 	bl	800b788 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b568:	4b56      	ldr	r3, [pc, #344]	; (800b6c4 <pvPortMalloc+0x178>)
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4013      	ands	r3, r2
 800b570:	2b00      	cmp	r3, #0
 800b572:	f040 808e 	bne.w	800b692 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d01d      	beq.n	800b5b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b57c:	2208      	movs	r2, #8
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4413      	add	r3, r2
 800b582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f003 0307 	and.w	r3, r3, #7
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d014      	beq.n	800b5b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f023 0307 	bic.w	r3, r3, #7
 800b594:	3308      	adds	r3, #8
 800b596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f003 0307 	and.w	r3, r3, #7
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00a      	beq.n	800b5b8 <pvPortMalloc+0x6c>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	617b      	str	r3, [r7, #20]
}
 800b5b4:	bf00      	nop
 800b5b6:	e7fe      	b.n	800b5b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d069      	beq.n	800b692 <pvPortMalloc+0x146>
 800b5be:	4b42      	ldr	r3, [pc, #264]	; (800b6c8 <pvPortMalloc+0x17c>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d864      	bhi.n	800b692 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5c8:	4b40      	ldr	r3, [pc, #256]	; (800b6cc <pvPortMalloc+0x180>)
 800b5ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5cc:	4b3f      	ldr	r3, [pc, #252]	; (800b6cc <pvPortMalloc+0x180>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5d2:	e004      	b.n	800b5de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d903      	bls.n	800b5f0 <pvPortMalloc+0xa4>
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1f1      	bne.n	800b5d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b5f0:	4b33      	ldr	r3, [pc, #204]	; (800b6c0 <pvPortMalloc+0x174>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d04b      	beq.n	800b692 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2208      	movs	r2, #8
 800b600:	4413      	add	r3, r2
 800b602:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	6a3b      	ldr	r3, [r7, #32]
 800b60a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	685a      	ldr	r2, [r3, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	1ad2      	subs	r2, r2, r3
 800b614:	2308      	movs	r3, #8
 800b616:	005b      	lsls	r3, r3, #1
 800b618:	429a      	cmp	r2, r3
 800b61a:	d91f      	bls.n	800b65c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b61c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4413      	add	r3, r2
 800b622:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00a      	beq.n	800b644 <pvPortMalloc+0xf8>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	613b      	str	r3, [r7, #16]
}
 800b640:	bf00      	nop
 800b642:	e7fe      	b.n	800b642 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	1ad2      	subs	r2, r2, r3
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b656:	69b8      	ldr	r0, [r7, #24]
 800b658:	f000 f8f8 	bl	800b84c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b65c:	4b1a      	ldr	r3, [pc, #104]	; (800b6c8 <pvPortMalloc+0x17c>)
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	4a18      	ldr	r2, [pc, #96]	; (800b6c8 <pvPortMalloc+0x17c>)
 800b668:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b66a:	4b17      	ldr	r3, [pc, #92]	; (800b6c8 <pvPortMalloc+0x17c>)
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	4b18      	ldr	r3, [pc, #96]	; (800b6d0 <pvPortMalloc+0x184>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	429a      	cmp	r2, r3
 800b674:	d203      	bcs.n	800b67e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b676:	4b14      	ldr	r3, [pc, #80]	; (800b6c8 <pvPortMalloc+0x17c>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a15      	ldr	r2, [pc, #84]	; (800b6d0 <pvPortMalloc+0x184>)
 800b67c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b680:	685a      	ldr	r2, [r3, #4]
 800b682:	4b10      	ldr	r3, [pc, #64]	; (800b6c4 <pvPortMalloc+0x178>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	431a      	orrs	r2, r3
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68e:	2200      	movs	r2, #0
 800b690:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b692:	f7fe fcc1 	bl	800a018 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	f003 0307 	and.w	r3, r3, #7
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00a      	beq.n	800b6b6 <pvPortMalloc+0x16a>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	60fb      	str	r3, [r7, #12]
}
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <pvPortMalloc+0x168>
	return pvReturn;
 800b6b6:	69fb      	ldr	r3, [r7, #28]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3728      	adds	r7, #40	; 0x28
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	2000320c 	.word	0x2000320c
 800b6c4:	20003218 	.word	0x20003218
 800b6c8:	20003210 	.word	0x20003210
 800b6cc:	20003204 	.word	0x20003204
 800b6d0:	20003214 	.word	0x20003214

0800b6d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d048      	beq.n	800b778 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b6e6:	2308      	movs	r3, #8
 800b6e8:	425b      	negs	r3, r3
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	4b21      	ldr	r3, [pc, #132]	; (800b780 <vPortFree+0xac>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10a      	bne.n	800b718 <vPortFree+0x44>
	__asm volatile
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	60fb      	str	r3, [r7, #12]
}
 800b714:	bf00      	nop
 800b716:	e7fe      	b.n	800b716 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00a      	beq.n	800b736 <vPortFree+0x62>
	__asm volatile
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	60bb      	str	r3, [r7, #8]
}
 800b732:	bf00      	nop
 800b734:	e7fe      	b.n	800b734 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	4b11      	ldr	r3, [pc, #68]	; (800b780 <vPortFree+0xac>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4013      	ands	r3, r2
 800b740:	2b00      	cmp	r3, #0
 800b742:	d019      	beq.n	800b778 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d115      	bne.n	800b778 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	685a      	ldr	r2, [r3, #4]
 800b750:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <vPortFree+0xac>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	43db      	mvns	r3, r3
 800b756:	401a      	ands	r2, r3
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b75c:	f7fe fc4e 	bl	8009ffc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	4b07      	ldr	r3, [pc, #28]	; (800b784 <vPortFree+0xb0>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4413      	add	r3, r2
 800b76a:	4a06      	ldr	r2, [pc, #24]	; (800b784 <vPortFree+0xb0>)
 800b76c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b76e:	6938      	ldr	r0, [r7, #16]
 800b770:	f000 f86c 	bl	800b84c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b774:	f7fe fc50 	bl	800a018 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b778:	bf00      	nop
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	20003218 	.word	0x20003218
 800b784:	20003210 	.word	0x20003210

0800b788 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b78e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b792:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b794:	4b27      	ldr	r3, [pc, #156]	; (800b834 <prvHeapInit+0xac>)
 800b796:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f003 0307 	and.w	r3, r3, #7
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00c      	beq.n	800b7bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3307      	adds	r3, #7
 800b7a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f023 0307 	bic.w	r3, r3, #7
 800b7ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	4a1f      	ldr	r2, [pc, #124]	; (800b834 <prvHeapInit+0xac>)
 800b7b8:	4413      	add	r3, r2
 800b7ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7c0:	4a1d      	ldr	r2, [pc, #116]	; (800b838 <prvHeapInit+0xb0>)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b7c6:	4b1c      	ldr	r3, [pc, #112]	; (800b838 <prvHeapInit+0xb0>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b7d4:	2208      	movs	r2, #8
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	1a9b      	subs	r3, r3, r2
 800b7da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f023 0307 	bic.w	r3, r3, #7
 800b7e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	4a15      	ldr	r2, [pc, #84]	; (800b83c <prvHeapInit+0xb4>)
 800b7e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b7ea:	4b14      	ldr	r3, [pc, #80]	; (800b83c <prvHeapInit+0xb4>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b7f2:	4b12      	ldr	r3, [pc, #72]	; (800b83c <prvHeapInit+0xb4>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	1ad2      	subs	r2, r2, r3
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b808:	4b0c      	ldr	r3, [pc, #48]	; (800b83c <prvHeapInit+0xb4>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	4a0a      	ldr	r2, [pc, #40]	; (800b840 <prvHeapInit+0xb8>)
 800b816:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	4a09      	ldr	r2, [pc, #36]	; (800b844 <prvHeapInit+0xbc>)
 800b81e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b820:	4b09      	ldr	r3, [pc, #36]	; (800b848 <prvHeapInit+0xc0>)
 800b822:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b826:	601a      	str	r2, [r3, #0]
}
 800b828:	bf00      	nop
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bc80      	pop	{r7}
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	20002604 	.word	0x20002604
 800b838:	20003204 	.word	0x20003204
 800b83c:	2000320c 	.word	0x2000320c
 800b840:	20003214 	.word	0x20003214
 800b844:	20003210 	.word	0x20003210
 800b848:	20003218 	.word	0x20003218

0800b84c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b854:	4b27      	ldr	r3, [pc, #156]	; (800b8f4 <prvInsertBlockIntoFreeList+0xa8>)
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	e002      	b.n	800b860 <prvInsertBlockIntoFreeList+0x14>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	60fb      	str	r3, [r7, #12]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	429a      	cmp	r2, r3
 800b868:	d8f7      	bhi.n	800b85a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	4413      	add	r3, r2
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d108      	bne.n	800b88e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	441a      	add	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	68ba      	ldr	r2, [r7, #8]
 800b898:	441a      	add	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d118      	bne.n	800b8d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	4b14      	ldr	r3, [pc, #80]	; (800b8f8 <prvInsertBlockIntoFreeList+0xac>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d00d      	beq.n	800b8ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	441a      	add	r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	601a      	str	r2, [r3, #0]
 800b8c8:	e008      	b.n	800b8dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b8ca:	4b0b      	ldr	r3, [pc, #44]	; (800b8f8 <prvInsertBlockIntoFreeList+0xac>)
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	601a      	str	r2, [r3, #0]
 800b8d2:	e003      	b.n	800b8dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d002      	beq.n	800b8ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8ea:	bf00      	nop
 800b8ec:	3714      	adds	r7, #20
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bc80      	pop	{r7}
 800b8f2:	4770      	bx	lr
 800b8f4:	20003204 	.word	0x20003204
 800b8f8:	2000320c 	.word	0x2000320c

0800b8fc <memset>:
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	4402      	add	r2, r0
 800b900:	4293      	cmp	r3, r2
 800b902:	d100      	bne.n	800b906 <memset+0xa>
 800b904:	4770      	bx	lr
 800b906:	f803 1b01 	strb.w	r1, [r3], #1
 800b90a:	e7f9      	b.n	800b900 <memset+0x4>

0800b90c <_reclaim_reent>:
 800b90c:	4b29      	ldr	r3, [pc, #164]	; (800b9b4 <_reclaim_reent+0xa8>)
 800b90e:	b570      	push	{r4, r5, r6, lr}
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4604      	mov	r4, r0
 800b914:	4283      	cmp	r3, r0
 800b916:	d04b      	beq.n	800b9b0 <_reclaim_reent+0xa4>
 800b918:	69c3      	ldr	r3, [r0, #28]
 800b91a:	b143      	cbz	r3, 800b92e <_reclaim_reent+0x22>
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d144      	bne.n	800b9ac <_reclaim_reent+0xa0>
 800b922:	69e3      	ldr	r3, [r4, #28]
 800b924:	6819      	ldr	r1, [r3, #0]
 800b926:	b111      	cbz	r1, 800b92e <_reclaim_reent+0x22>
 800b928:	4620      	mov	r0, r4
 800b92a:	f000 f879 	bl	800ba20 <_free_r>
 800b92e:	6961      	ldr	r1, [r4, #20]
 800b930:	b111      	cbz	r1, 800b938 <_reclaim_reent+0x2c>
 800b932:	4620      	mov	r0, r4
 800b934:	f000 f874 	bl	800ba20 <_free_r>
 800b938:	69e1      	ldr	r1, [r4, #28]
 800b93a:	b111      	cbz	r1, 800b942 <_reclaim_reent+0x36>
 800b93c:	4620      	mov	r0, r4
 800b93e:	f000 f86f 	bl	800ba20 <_free_r>
 800b942:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b944:	b111      	cbz	r1, 800b94c <_reclaim_reent+0x40>
 800b946:	4620      	mov	r0, r4
 800b948:	f000 f86a 	bl	800ba20 <_free_r>
 800b94c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b94e:	b111      	cbz	r1, 800b956 <_reclaim_reent+0x4a>
 800b950:	4620      	mov	r0, r4
 800b952:	f000 f865 	bl	800ba20 <_free_r>
 800b956:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b958:	b111      	cbz	r1, 800b960 <_reclaim_reent+0x54>
 800b95a:	4620      	mov	r0, r4
 800b95c:	f000 f860 	bl	800ba20 <_free_r>
 800b960:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b962:	b111      	cbz	r1, 800b96a <_reclaim_reent+0x5e>
 800b964:	4620      	mov	r0, r4
 800b966:	f000 f85b 	bl	800ba20 <_free_r>
 800b96a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b96c:	b111      	cbz	r1, 800b974 <_reclaim_reent+0x68>
 800b96e:	4620      	mov	r0, r4
 800b970:	f000 f856 	bl	800ba20 <_free_r>
 800b974:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b976:	b111      	cbz	r1, 800b97e <_reclaim_reent+0x72>
 800b978:	4620      	mov	r0, r4
 800b97a:	f000 f851 	bl	800ba20 <_free_r>
 800b97e:	6a23      	ldr	r3, [r4, #32]
 800b980:	b1b3      	cbz	r3, 800b9b0 <_reclaim_reent+0xa4>
 800b982:	4620      	mov	r0, r4
 800b984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b988:	4718      	bx	r3
 800b98a:	5949      	ldr	r1, [r1, r5]
 800b98c:	b941      	cbnz	r1, 800b9a0 <_reclaim_reent+0x94>
 800b98e:	3504      	adds	r5, #4
 800b990:	69e3      	ldr	r3, [r4, #28]
 800b992:	2d80      	cmp	r5, #128	; 0x80
 800b994:	68d9      	ldr	r1, [r3, #12]
 800b996:	d1f8      	bne.n	800b98a <_reclaim_reent+0x7e>
 800b998:	4620      	mov	r0, r4
 800b99a:	f000 f841 	bl	800ba20 <_free_r>
 800b99e:	e7c0      	b.n	800b922 <_reclaim_reent+0x16>
 800b9a0:	680e      	ldr	r6, [r1, #0]
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f000 f83c 	bl	800ba20 <_free_r>
 800b9a8:	4631      	mov	r1, r6
 800b9aa:	e7ef      	b.n	800b98c <_reclaim_reent+0x80>
 800b9ac:	2500      	movs	r5, #0
 800b9ae:	e7ef      	b.n	800b990 <_reclaim_reent+0x84>
 800b9b0:	bd70      	pop	{r4, r5, r6, pc}
 800b9b2:	bf00      	nop
 800b9b4:	200000e8 	.word	0x200000e8

0800b9b8 <__libc_init_array>:
 800b9b8:	b570      	push	{r4, r5, r6, lr}
 800b9ba:	2600      	movs	r6, #0
 800b9bc:	4d0c      	ldr	r5, [pc, #48]	; (800b9f0 <__libc_init_array+0x38>)
 800b9be:	4c0d      	ldr	r4, [pc, #52]	; (800b9f4 <__libc_init_array+0x3c>)
 800b9c0:	1b64      	subs	r4, r4, r5
 800b9c2:	10a4      	asrs	r4, r4, #2
 800b9c4:	42a6      	cmp	r6, r4
 800b9c6:	d109      	bne.n	800b9dc <__libc_init_array+0x24>
 800b9c8:	f000 f87e 	bl	800bac8 <_init>
 800b9cc:	2600      	movs	r6, #0
 800b9ce:	4d0a      	ldr	r5, [pc, #40]	; (800b9f8 <__libc_init_array+0x40>)
 800b9d0:	4c0a      	ldr	r4, [pc, #40]	; (800b9fc <__libc_init_array+0x44>)
 800b9d2:	1b64      	subs	r4, r4, r5
 800b9d4:	10a4      	asrs	r4, r4, #2
 800b9d6:	42a6      	cmp	r6, r4
 800b9d8:	d105      	bne.n	800b9e6 <__libc_init_array+0x2e>
 800b9da:	bd70      	pop	{r4, r5, r6, pc}
 800b9dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9e0:	4798      	blx	r3
 800b9e2:	3601      	adds	r6, #1
 800b9e4:	e7ee      	b.n	800b9c4 <__libc_init_array+0xc>
 800b9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ea:	4798      	blx	r3
 800b9ec:	3601      	adds	r6, #1
 800b9ee:	e7f2      	b.n	800b9d6 <__libc_init_array+0x1e>
 800b9f0:	0800bf64 	.word	0x0800bf64
 800b9f4:	0800bf64 	.word	0x0800bf64
 800b9f8:	0800bf64 	.word	0x0800bf64
 800b9fc:	0800bf68 	.word	0x0800bf68

0800ba00 <__retarget_lock_acquire_recursive>:
 800ba00:	4770      	bx	lr

0800ba02 <__retarget_lock_release_recursive>:
 800ba02:	4770      	bx	lr

0800ba04 <memcpy>:
 800ba04:	440a      	add	r2, r1
 800ba06:	4291      	cmp	r1, r2
 800ba08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba0c:	d100      	bne.n	800ba10 <memcpy+0xc>
 800ba0e:	4770      	bx	lr
 800ba10:	b510      	push	{r4, lr}
 800ba12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba16:	4291      	cmp	r1, r2
 800ba18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba1c:	d1f9      	bne.n	800ba12 <memcpy+0xe>
 800ba1e:	bd10      	pop	{r4, pc}

0800ba20 <_free_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4605      	mov	r5, r0
 800ba24:	2900      	cmp	r1, #0
 800ba26:	d040      	beq.n	800baaa <_free_r+0x8a>
 800ba28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba2c:	1f0c      	subs	r4, r1, #4
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	bfb8      	it	lt
 800ba32:	18e4      	addlt	r4, r4, r3
 800ba34:	f000 f83c 	bl	800bab0 <__malloc_lock>
 800ba38:	4a1c      	ldr	r2, [pc, #112]	; (800baac <_free_r+0x8c>)
 800ba3a:	6813      	ldr	r3, [r2, #0]
 800ba3c:	b933      	cbnz	r3, 800ba4c <_free_r+0x2c>
 800ba3e:	6063      	str	r3, [r4, #4]
 800ba40:	6014      	str	r4, [r2, #0]
 800ba42:	4628      	mov	r0, r5
 800ba44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba48:	f000 b838 	b.w	800babc <__malloc_unlock>
 800ba4c:	42a3      	cmp	r3, r4
 800ba4e:	d908      	bls.n	800ba62 <_free_r+0x42>
 800ba50:	6820      	ldr	r0, [r4, #0]
 800ba52:	1821      	adds	r1, r4, r0
 800ba54:	428b      	cmp	r3, r1
 800ba56:	bf01      	itttt	eq
 800ba58:	6819      	ldreq	r1, [r3, #0]
 800ba5a:	685b      	ldreq	r3, [r3, #4]
 800ba5c:	1809      	addeq	r1, r1, r0
 800ba5e:	6021      	streq	r1, [r4, #0]
 800ba60:	e7ed      	b.n	800ba3e <_free_r+0x1e>
 800ba62:	461a      	mov	r2, r3
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	b10b      	cbz	r3, 800ba6c <_free_r+0x4c>
 800ba68:	42a3      	cmp	r3, r4
 800ba6a:	d9fa      	bls.n	800ba62 <_free_r+0x42>
 800ba6c:	6811      	ldr	r1, [r2, #0]
 800ba6e:	1850      	adds	r0, r2, r1
 800ba70:	42a0      	cmp	r0, r4
 800ba72:	d10b      	bne.n	800ba8c <_free_r+0x6c>
 800ba74:	6820      	ldr	r0, [r4, #0]
 800ba76:	4401      	add	r1, r0
 800ba78:	1850      	adds	r0, r2, r1
 800ba7a:	4283      	cmp	r3, r0
 800ba7c:	6011      	str	r1, [r2, #0]
 800ba7e:	d1e0      	bne.n	800ba42 <_free_r+0x22>
 800ba80:	6818      	ldr	r0, [r3, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	4408      	add	r0, r1
 800ba86:	6010      	str	r0, [r2, #0]
 800ba88:	6053      	str	r3, [r2, #4]
 800ba8a:	e7da      	b.n	800ba42 <_free_r+0x22>
 800ba8c:	d902      	bls.n	800ba94 <_free_r+0x74>
 800ba8e:	230c      	movs	r3, #12
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	e7d6      	b.n	800ba42 <_free_r+0x22>
 800ba94:	6820      	ldr	r0, [r4, #0]
 800ba96:	1821      	adds	r1, r4, r0
 800ba98:	428b      	cmp	r3, r1
 800ba9a:	bf01      	itttt	eq
 800ba9c:	6819      	ldreq	r1, [r3, #0]
 800ba9e:	685b      	ldreq	r3, [r3, #4]
 800baa0:	1809      	addeq	r1, r1, r0
 800baa2:	6021      	streq	r1, [r4, #0]
 800baa4:	6063      	str	r3, [r4, #4]
 800baa6:	6054      	str	r4, [r2, #4]
 800baa8:	e7cb      	b.n	800ba42 <_free_r+0x22>
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	20003358 	.word	0x20003358

0800bab0 <__malloc_lock>:
 800bab0:	4801      	ldr	r0, [pc, #4]	; (800bab8 <__malloc_lock+0x8>)
 800bab2:	f7ff bfa5 	b.w	800ba00 <__retarget_lock_acquire_recursive>
 800bab6:	bf00      	nop
 800bab8:	20003354 	.word	0x20003354

0800babc <__malloc_unlock>:
 800babc:	4801      	ldr	r0, [pc, #4]	; (800bac4 <__malloc_unlock+0x8>)
 800babe:	f7ff bfa0 	b.w	800ba02 <__retarget_lock_release_recursive>
 800bac2:	bf00      	nop
 800bac4:	20003354 	.word	0x20003354

0800bac8 <_init>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	bf00      	nop
 800bacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bace:	bc08      	pop	{r3}
 800bad0:	469e      	mov	lr, r3
 800bad2:	4770      	bx	lr

0800bad4 <_fini>:
 800bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad6:	bf00      	nop
 800bad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bada:	bc08      	pop	{r3}
 800badc:	469e      	mov	lr, r3
 800bade:	4770      	bx	lr
