
UFControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ed0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080080c0  080080c0  000180c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800828c  0800828c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800828c  0800828c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800828c  0800828c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800828c  0800828c  0001828c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008290  08008290  00018290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c70  20000060  080082f4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cd0  080082f4  00022cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000220ff  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c0c  00000000  00000000  000421cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d80  00000000  00000000  00046dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001705  00000000  00000000  00048b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef29  00000000  00000000  0004a25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024c7a  00000000  00000000  00069186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aff2f  00000000  00000000  0008de00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f00  00000000  00000000  0013dd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00145c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	080080a8 	.word	0x080080a8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	080080a8 	.word	0x080080a8

08000230 <PL_SET>:


static   EventGroupHandle_t pREGEvent;
static   StaticEventGroup_t xREGCreatedEventGroup;
void PL_SET()
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0

}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <RegisterDATALoad>:
{
	 pREGEvent = xEventGroupCreateStatic(&xREGCreatedEventGroup );
}

void RegisterDATALoad()
{
 800023c:	b590      	push	{r4, r7, lr}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
	uint8_t i,j;
	switch (PL_STATE)
 8000242:	4b54      	ldr	r3, [pc, #336]	; (8000394 <RegisterDATALoad+0x158>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b03      	cmp	r3, #3
 8000248:	f200 809f 	bhi.w	800038a <RegisterDATALoad+0x14e>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <RegisterDATALoad+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000265 	.word	0x08000265
 8000258:	080002f9 	.word	0x080002f9
 800025c:	08000305 	.word	0x08000305
 8000260:	08000317 	.word	0x08000317
	{
		case 0:
			//PL_RESET();
			PL_STATE = 1;
 8000264:	4b4b      	ldr	r3, [pc, #300]	; (8000394 <RegisterDATALoad+0x158>)
 8000266:	2201      	movs	r2, #1
 8000268:	701a      	strb	r2, [r3, #0]
			if (data_check_counter >= DATA_VALID_TIMES)
 800026a:	4b4b      	ldr	r3, [pc, #300]	; (8000398 <RegisterDATALoad+0x15c>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b02      	cmp	r3, #2
 8000270:	f240 808a 	bls.w	8000388 <RegisterDATALoad+0x14c>
			{
				data_check_counter = 0;
 8000274:	4b48      	ldr	r3, [pc, #288]	; (8000398 <RegisterDATALoad+0x15c>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
				for (i=0;i<6;i++)
 800027a:	2300      	movs	r3, #0
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	e023      	b.n	80002c8 <RegisterDATALoad+0x8c>
				{
					    dc_mask[0 ] = mask[i][0];
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	4946      	ldr	r1, [pc, #280]	; (800039c <RegisterDATALoad+0x160>)
 8000284:	4613      	mov	r3, r2
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	4413      	add	r3, r2
 800028a:	440b      	add	r3, r1
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	4b44      	ldr	r3, [pc, #272]	; (80003a0 <RegisterDATALoad+0x164>)
 8000290:	701a      	strb	r2, [r3, #0]
						for (j=1 ;j<DATA_VALID_TIMES;j++)
 8000292:	2301      	movs	r3, #1
 8000294:	71bb      	strb	r3, [r7, #6]
 8000296:	e011      	b.n	80002bc <RegisterDATALoad+0x80>
						{
							dc_mask[0 ] &= mask[i][j];
 8000298:	4b41      	ldr	r3, [pc, #260]	; (80003a0 <RegisterDATALoad+0x164>)
 800029a:	7819      	ldrb	r1, [r3, #0]
 800029c:	79fa      	ldrb	r2, [r7, #7]
 800029e:	79b8      	ldrb	r0, [r7, #6]
 80002a0:	4c3e      	ldr	r4, [pc, #248]	; (800039c <RegisterDATALoad+0x160>)
 80002a2:	4613      	mov	r3, r2
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	4413      	add	r3, r2
 80002a8:	4423      	add	r3, r4
 80002aa:	4403      	add	r3, r0
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	400b      	ands	r3, r1
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4b3b      	ldr	r3, [pc, #236]	; (80003a0 <RegisterDATALoad+0x164>)
 80002b4:	701a      	strb	r2, [r3, #0]
						for (j=1 ;j<DATA_VALID_TIMES;j++)
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	3301      	adds	r3, #1
 80002ba:	71bb      	strb	r3, [r7, #6]
 80002bc:	79bb      	ldrb	r3, [r7, #6]
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d9ea      	bls.n	8000298 <RegisterDATALoad+0x5c>
				for (i=0;i<6;i++)
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	3301      	adds	r3, #1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	2b05      	cmp	r3, #5
 80002cc:	d9d8      	bls.n	8000280 <RegisterDATALoad+0x44>
						}
				}
				for (i=0;i<6;i++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	71fb      	strb	r3, [r7, #7]
 80002d2:	e00d      	b.n	80002f0 <RegisterDATALoad+0xb4>
				{
					data[i] ^=  dc_mask[i];
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	4a33      	ldr	r2, [pc, #204]	; (80003a4 <RegisterDATALoad+0x168>)
 80002d8:	5cd1      	ldrb	r1, [r2, r3]
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4a30      	ldr	r2, [pc, #192]	; (80003a0 <RegisterDATALoad+0x164>)
 80002de:	5cd2      	ldrb	r2, [r2, r3]
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	404a      	eors	r2, r1
 80002e4:	b2d1      	uxtb	r1, r2
 80002e6:	4a2f      	ldr	r2, [pc, #188]	; (80003a4 <RegisterDATALoad+0x168>)
 80002e8:	54d1      	strb	r1, [r2, r3]
				for (i=0;i<6;i++)
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	3301      	adds	r3, #1
 80002ee:	71fb      	strb	r3, [r7, #7]
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	2b05      	cmp	r3, #5
 80002f4:	d9ee      	bls.n	80002d4 <RegisterDATALoad+0x98>
				}

			}
		break;
 80002f6:	e047      	b.n	8000388 <RegisterDATALoad+0x14c>
		case 1:
			PL_SET();
 80002f8:	f7ff ff9a 	bl	8000230 <PL_SET>
			PL_STATE =2;
 80002fc:	4b25      	ldr	r3, [pc, #148]	; (8000394 <RegisterDATALoad+0x158>)
 80002fe:	2202      	movs	r2, #2
 8000300:	701a      	strb	r2, [r3, #0]

			break;
 8000302:	e042      	b.n	800038a <RegisterDATALoad+0x14e>
		case 2:
			HAL_SPI_Receive_DMA(&hspi2,&pDATA,6U);
 8000304:	2206      	movs	r2, #6
 8000306:	4928      	ldr	r1, [pc, #160]	; (80003a8 <RegisterDATALoad+0x16c>)
 8000308:	4828      	ldr	r0, [pc, #160]	; (80003ac <RegisterDATALoad+0x170>)
 800030a:	f003 fe35 	bl	8003f78 <HAL_SPI_Receive_DMA>
			PL_STATE = 3;
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <RegisterDATALoad+0x158>)
 8000310:	2203      	movs	r2, #3
 8000312:	701a      	strb	r2, [r3, #0]
			break;
 8000314:	e039      	b.n	800038a <RegisterDATALoad+0x14e>
		case 3:
			EventBits_t bits =  xEventGroupGetBits( pREGEvent );
 8000316:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <RegisterDATALoad+0x174>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f005 f86f 	bl	8005400 <xEventGroupClearBits>
 8000322:	6038      	str	r0, [r7, #0]
			if (bits & DATA_LOAD_READY)
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d008      	beq.n	8000340 <RegisterDATALoad+0x104>
			{
				xEventGroupClearBits(pREGEvent,DATA_LOAD_READY);
 800032e:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <RegisterDATALoad+0x174>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2101      	movs	r1, #1
 8000334:	4618      	mov	r0, r3
 8000336:	f005 f863 	bl	8005400 <xEventGroupClearBits>
				PL_STATE = 0;
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <RegisterDATALoad+0x158>)
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]
			}
			for (i=0;i <6 ;i++)
 8000340:	2300      	movs	r3, #0
 8000342:	71fb      	strb	r3, [r7, #7]
 8000344:	e016      	b.n	8000374 <RegisterDATALoad+0x138>
			{
				mask[i][data_check_counter] = data[i] ^ pDATA[i];
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <RegisterDATALoad+0x168>)
 800034a:	5cd1      	ldrb	r1, [r2, r3]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <RegisterDATALoad+0x16c>)
 8000350:	5cd3      	ldrb	r3, [r2, r3]
 8000352:	79fa      	ldrb	r2, [r7, #7]
 8000354:	4810      	ldr	r0, [pc, #64]	; (8000398 <RegisterDATALoad+0x15c>)
 8000356:	7800      	ldrb	r0, [r0, #0]
 8000358:	4604      	mov	r4, r0
 800035a:	404b      	eors	r3, r1
 800035c:	b2d8      	uxtb	r0, r3
 800035e:	490f      	ldr	r1, [pc, #60]	; (800039c <RegisterDATALoad+0x160>)
 8000360:	4613      	mov	r3, r2
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	4413      	add	r3, r2
 8000366:	440b      	add	r3, r1
 8000368:	4423      	add	r3, r4
 800036a:	4602      	mov	r2, r0
 800036c:	701a      	strb	r2, [r3, #0]
			for (i=0;i <6 ;i++)
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	3301      	adds	r3, #1
 8000372:	71fb      	strb	r3, [r7, #7]
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	2b05      	cmp	r3, #5
 8000378:	d9e5      	bls.n	8000346 <RegisterDATALoad+0x10a>

			}
			data_check_counter++;
 800037a:	4b07      	ldr	r3, [pc, #28]	; (8000398 <RegisterDATALoad+0x15c>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	3301      	adds	r3, #1
 8000380:	b2da      	uxtb	r2, r3
 8000382:	4b05      	ldr	r3, [pc, #20]	; (8000398 <RegisterDATALoad+0x15c>)
 8000384:	701a      	strb	r2, [r3, #0]

			break;
 8000386:	e000      	b.n	800038a <RegisterDATALoad+0x14e>
		break;
 8000388:	bf00      	nop


	}
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bd90      	pop	{r4, r7, pc}
 8000392:	bf00      	nop
 8000394:	20000080 	.word	0x20000080
 8000398:	2000008a 	.word	0x2000008a
 800039c:	20000094 	.word	0x20000094
 80003a0:	200000a8 	.word	0x200000a8
 80003a4:	2000008c 	.word	0x2000008c
 80003a8:	20000084 	.word	0x20000084
 80003ac:	20000538 	.word	0x20000538
 80003b0:	2000007c 	.word	0x2000007c

080003b4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	 static portBASE_TYPE xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
 80003bc:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <HAL_SPI_RxCpltCallback+0x40>)
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
	 xEventGroupSetBitsFromISR( pREGEvent, DATA_LOAD_READY, &xHigherPriorityTaskWoken );
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <HAL_SPI_RxCpltCallback+0x44>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a0b      	ldr	r2, [pc, #44]	; (80003f4 <HAL_SPI_RxCpltCallback+0x40>)
 80003c8:	2101      	movs	r1, #1
 80003ca:	4618      	mov	r0, r3
 80003cc:	f005 f90a 	bl	80055e4 <xEventGroupSetBitsFromISR>
	 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <HAL_SPI_RxCpltCallback+0x40>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d008      	beq.n	80003ea <HAL_SPI_RxCpltCallback+0x36>
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <HAL_SPI_RxCpltCallback+0x48>)
 80003da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	f3bf 8f4f 	dsb	sy
 80003e4:	f3bf 8f6f 	isb	sy
	 return;
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop

}
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000118 	.word	0x20000118
 80003f8:	2000007c 	.word	0x2000007c
 80003fc:	e000ed04 	.word	0xe000ed04

08000400 <eDinConfig>:


static DinConfig_t xDinConfig[ DIN_COUNT];

DIN_FUNCTION_ERROR_t eDinConfig( uint8_t ucCh, DIN_INPUT_TYPE inType, uint32_t ulHFront, uint32_t ulLFront)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0
 8000406:	60ba      	str	r2, [r7, #8]
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	4603      	mov	r3, r0
 800040c:	73fb      	strb	r3, [r7, #15]
 800040e:	460b      	mov	r3, r1
 8000410:	73bb      	strb	r3, [r7, #14]
	DIN_FUNCTION_ERROR_t eRes = DIN_WRONG_CHANNEL_NUMBER ;
 8000412:	2301      	movs	r3, #1
 8000414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]
 8000424:	60da      	str	r2, [r3, #12]
	if ( ucCh <DIN_COUNT)
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	2b04      	cmp	r3, #4
 800042a:	d854      	bhi.n	80004d6 <eDinConfig+0xd6>
	{
		xDinConfig[ucCh].eInputType = inType;
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	4a2d      	ldr	r2, [pc, #180]	; (80004e4 <eDinConfig+0xe4>)
 8000430:	011b      	lsls	r3, r3, #4
 8000432:	4413      	add	r3, r2
 8000434:	330e      	adds	r3, #14
 8000436:	7bba      	ldrb	r2, [r7, #14]
 8000438:	701a      	strb	r2, [r3, #0]
		xDinConfig[ucCh].ucValue 	= (xDinConfig[ucCh].eInputType == DIN_CONFIG_POSITIVE ) ? 0U : 1U;
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	4a29      	ldr	r2, [pc, #164]	; (80004e4 <eDinConfig+0xe4>)
 800043e:	011b      	lsls	r3, r3, #4
 8000440:	4413      	add	r3, r2
 8000442:	330e      	adds	r3, #14
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	bf14      	ite	ne
 800044a:	2301      	movne	r3, #1
 800044c:	2300      	moveq	r3, #0
 800044e:	b2da      	uxtb	r2, r3
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	4611      	mov	r1, r2
 8000454:	4a23      	ldr	r2, [pc, #140]	; (80004e4 <eDinConfig+0xe4>)
 8000456:	011b      	lsls	r3, r3, #4
 8000458:	4413      	add	r3, r2
 800045a:	330c      	adds	r3, #12
 800045c:	460a      	mov	r2, r1
 800045e:	701a      	strb	r2, [r3, #0]
		GPIO_InitStruct.Pin 		= xDinPortConfig[ucCh].Pin;
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	4a21      	ldr	r2, [pc, #132]	; (80004e8 <eDinConfig+0xe8>)
 8000464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000468:	617b      	str	r3, [r7, #20]

		if ( xDinConfig[ucCh].eInputType == RPM_CONFIG )
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	4a1d      	ldr	r2, [pc, #116]	; (80004e4 <eDinConfig+0xe4>)
 800046e:	011b      	lsls	r3, r3, #4
 8000470:	4413      	add	r3, r2
 8000472:	330e      	adds	r3, #14
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b02      	cmp	r3, #2
 8000478:	d106      	bne.n	8000488 <eDinConfig+0x88>
		{
			xDinConfig[ucCh].eInputType = DIN_CONFIG_POSITIVE;
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	4a19      	ldr	r2, [pc, #100]	; (80004e4 <eDinConfig+0xe4>)
 800047e:	011b      	lsls	r3, r3, #4
 8000480:	4413      	add	r3, r2
 8000482:	330e      	adds	r3, #14
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
		}
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800048c:	2301      	movs	r3, #1
 800048e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(xDinPortConfig[ucCh].GPIOx,&GPIO_InitStruct);
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <eDinConfig+0xe8>)
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	4413      	add	r3, r2
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	f107 0214 	add.w	r2, r7, #20
 800049e:	4611      	mov	r1, r2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f002 f835 	bl	8002510 <HAL_GPIO_Init>
		xDinConfig[ucCh].ulHighCounter = ulHFront;
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <eDinConfig+0xe4>)
 80004aa:	011b      	lsls	r3, r3, #4
 80004ac:	4413      	add	r3, r2
 80004ae:	3308      	adds	r3, #8
 80004b0:	68ba      	ldr	r2, [r7, #8]
 80004b2:	601a      	str	r2, [r3, #0]
		xDinConfig[ucCh].ulLowCounter = ulLFront;
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <eDinConfig+0xe4>)
 80004b8:	011b      	lsls	r3, r3, #4
 80004ba:	4413      	add	r3, r2
 80004bc:	3304      	adds	r3, #4
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	601a      	str	r2, [r3, #0]
		xDinConfig[ucCh].ucTempValue = 0U;
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <eDinConfig+0xe4>)
 80004c6:	011b      	lsls	r3, r3, #4
 80004c8:	4413      	add	r3, r2
 80004ca:	330d      	adds	r3, #13
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
		eRes = DIN_CONFIG_OK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return ( eRes );
 80004d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3728      	adds	r7, #40	; 0x28
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200000b0 	.word	0x200000b0
 80004e8:	08008130 	.word	0x08008130

080004ec <vDINInit>:

static void vDINInit()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	eDinConfig( INPUT_1, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 80004f0:	230a      	movs	r3, #10
 80004f2:	220a      	movs	r2, #10
 80004f4:	2100      	movs	r1, #0
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff ff82 	bl	8000400 <eDinConfig>
	eDinConfig( INPUT_2, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 80004fc:	230a      	movs	r3, #10
 80004fe:	220a      	movs	r2, #10
 8000500:	2100      	movs	r1, #0
 8000502:	2001      	movs	r0, #1
 8000504:	f7ff ff7c 	bl	8000400 <eDinConfig>
	eDinConfig( INPUT_3, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000508:	230a      	movs	r3, #10
 800050a:	220a      	movs	r2, #10
 800050c:	2100      	movs	r1, #0
 800050e:	2002      	movs	r0, #2
 8000510:	f7ff ff76 	bl	8000400 <eDinConfig>
	eDinConfig( INPUT_4, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000514:	230a      	movs	r3, #10
 8000516:	220a      	movs	r2, #10
 8000518:	2100      	movs	r1, #0
 800051a:	2003      	movs	r0, #3
 800051c:	f7ff ff70 	bl	8000400 <eDinConfig>
	eDinConfig( INPUT_5, DIN_CONFIG_NEGATIVE , DEF_H_FRONT, DEF_L_FRONT );
 8000520:	230a      	movs	r3, #10
 8000522:	220a      	movs	r2, #10
 8000524:	2100      	movs	r1, #0
 8000526:	2004      	movs	r0, #4
 8000528:	f7ff ff6a 	bl	8000400 <eDinConfig>
	PL_SET();
 800052c:	f7ff fe80 	bl	8000230 <PL_SET>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <StartDIN_DOUT>:

void StartDIN_DOUT(void *argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	vDINInit();
 800053c:	f7ff ffd6 	bl	80004ec <vDINInit>
	while(1)
	{
		vTaskDelay(10);
 8000540:	200a      	movs	r0, #10
 8000542:	f005 ffa7 	bl	8006494 <vTaskDelay>
		RegisterDATALoad();
 8000546:	f7ff fe79 	bl	800023c <RegisterDATALoad>
		for (uint8_t i = 0; i <DIN_COUNT; i++)
 800054a:	2300      	movs	r3, #0
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e071      	b.n	8000634 <StartDIN_DOUT+0x100>
		{
				if ( xDinConfig[i].eInputType != RPM_CONFIG )
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	4a4d      	ldr	r2, [pc, #308]	; (8000688 <StartDIN_DOUT+0x154>)
 8000554:	011b      	lsls	r3, r3, #4
 8000556:	4413      	add	r3, r2
 8000558:	330e      	adds	r3, #14
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d066      	beq.n	800062e <StartDIN_DOUT+0xfa>
				{
					uint8_t uсDinState = HAL_GPIO_ReadPin( xDinPortConfig[i].GPIOx, xDinPortConfig[i].Pin);
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	4a4a      	ldr	r2, [pc, #296]	; (800068c <StartDIN_DOUT+0x158>)
 8000564:	00db      	lsls	r3, r3, #3
 8000566:	4413      	add	r3, r2
 8000568:	685a      	ldr	r2, [r3, #4]
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	4947      	ldr	r1, [pc, #284]	; (800068c <StartDIN_DOUT+0x158>)
 800056e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8000572:	b29b      	uxth	r3, r3
 8000574:	4619      	mov	r1, r3
 8000576:	4610      	mov	r0, r2
 8000578:	f002 f95e 	bl	8002838 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	73bb      	strb	r3, [r7, #14]
					if (uсDinState != xDinConfig[i].ucTempValue )
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	4a41      	ldr	r2, [pc, #260]	; (8000688 <StartDIN_DOUT+0x154>)
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	4413      	add	r3, r2
 8000588:	330d      	adds	r3, #13
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	7bba      	ldrb	r2, [r7, #14]
 800058e:	429a      	cmp	r2, r3
 8000590:	d047      	beq.n	8000622 <StartDIN_DOUT+0xee>
					{
							xDinConfig[i].ulCounter ++ ;
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	493c      	ldr	r1, [pc, #240]	; (8000688 <StartDIN_DOUT+0x154>)
 8000596:	011a      	lsls	r2, r3, #4
 8000598:	440a      	add	r2, r1
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	3201      	adds	r2, #1
 800059e:	493a      	ldr	r1, [pc, #232]	; (8000688 <StartDIN_DOUT+0x154>)
 80005a0:	011b      	lsls	r3, r3, #4
 80005a2:	440b      	add	r3, r1
 80005a4:	601a      	str	r2, [r3, #0]
							if (xDinConfig[i].ulCounter > ( (xDinConfig[i].ucTempValue == GPIO_PIN_RESET) ? xDinConfig[i].ulHighCounter : xDinConfig[i].ulLowCounter ) )
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	4a37      	ldr	r2, [pc, #220]	; (8000688 <StartDIN_DOUT+0x154>)
 80005aa:	011b      	lsls	r3, r3, #4
 80005ac:	4413      	add	r3, r2
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	4935      	ldr	r1, [pc, #212]	; (8000688 <StartDIN_DOUT+0x154>)
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	440b      	add	r3, r1
 80005b8:	330d      	adds	r3, #13
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d106      	bne.n	80005ce <StartDIN_DOUT+0x9a>
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	4931      	ldr	r1, [pc, #196]	; (8000688 <StartDIN_DOUT+0x154>)
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	440b      	add	r3, r1
 80005c8:	3308      	adds	r3, #8
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	e005      	b.n	80005da <StartDIN_DOUT+0xa6>
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	492d      	ldr	r1, [pc, #180]	; (8000688 <StartDIN_DOUT+0x154>)
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	440b      	add	r3, r1
 80005d6:	3304      	adds	r3, #4
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4293      	cmp	r3, r2
 80005dc:	d227      	bcs.n	800062e <StartDIN_DOUT+0xfa>
							{
									xDinConfig[i].ucValue = uсDinState  ^ ( (~xDinConfig[i].eInputType) & 0x1);
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	4a29      	ldr	r2, [pc, #164]	; (8000688 <StartDIN_DOUT+0x154>)
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	4413      	add	r3, r2
 80005e6:	330e      	adds	r3, #14
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	bf0c      	ite	eq
 80005f2:	2301      	moveq	r3, #1
 80005f4:	2300      	movne	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	b25a      	sxtb	r2, r3
 80005fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005fe:	4053      	eors	r3, r2
 8000600:	b25a      	sxtb	r2, r3
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	b2d1      	uxtb	r1, r2
 8000606:	4a20      	ldr	r2, [pc, #128]	; (8000688 <StartDIN_DOUT+0x154>)
 8000608:	011b      	lsls	r3, r3, #4
 800060a:	4413      	add	r3, r2
 800060c:	330c      	adds	r3, #12
 800060e:	460a      	mov	r2, r1
 8000610:	701a      	strb	r2, [r3, #0]
								    xDinConfig[i].ucTempValue = uсDinState ;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <StartDIN_DOUT+0x154>)
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	4413      	add	r3, r2
 800061a:	330d      	adds	r3, #13
 800061c:	7bba      	ldrb	r2, [r7, #14]
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	e005      	b.n	800062e <StartDIN_DOUT+0xfa>
							}
					}
					else
					{
						xDinConfig[i].ulCounter = 0U;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	4a18      	ldr	r2, [pc, #96]	; (8000688 <StartDIN_DOUT+0x154>)
 8000626:	011b      	lsls	r3, r3, #4
 8000628:	4413      	add	r3, r2
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i <DIN_COUNT; i++)
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	3301      	adds	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	2b04      	cmp	r3, #4
 8000638:	d98a      	bls.n	8000550 <StartDIN_DOUT+0x1c>
					}
			  }
		}
		SetData(DOOR_ADDR, (uint16_t)xDinConfig[DOOR].ucValue);
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <StartDIN_DOUT+0x154>)
 800063c:	7b1b      	ldrb	r3, [r3, #12]
 800063e:	b29b      	uxth	r3, r3
 8000640:	4619      	mov	r1, r3
 8000642:	2001      	movs	r0, #1
 8000644:	f000 fa0c 	bl	8000a60 <SetData>
		SetData(REMOTE_ADDR,(uint16_t)xDinConfig[REMOTE].ucValue);
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <StartDIN_DOUT+0x154>)
 800064a:	7f1b      	ldrb	r3, [r3, #28]
 800064c:	b29b      	uxth	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	2002      	movs	r0, #2
 8000652:	f000 fa05 	bl	8000a60 <SetData>
		SetData(FIRE_ADDR, (uint16_t)xDinConfig[FIRE].ucValue);
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <StartDIN_DOUT+0x154>)
 8000658:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800065c:	b29b      	uxth	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f9fd 	bl	8000a60 <SetData>
		SetData(LOCAL_ADDR, (uint16_t) xDinConfig[LOCAL_C].ucValue);
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <StartDIN_DOUT+0x154>)
 8000668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800066c:	b29b      	uxth	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	2004      	movs	r0, #4
 8000672:	f000 f9f5 	bl	8000a60 <SetData>
		SetData(REMOTE_ACT_ADDR, (uint16_t)xDinConfig[REMOTE_ACT].ucValue);
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <StartDIN_DOUT+0x154>)
 8000678:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800067c:	b29b      	uxth	r3, r3
 800067e:	4619      	mov	r1, r3
 8000680:	2005      	movs	r0, #5
 8000682:	f000 f9ed 	bl	8000a60 <SetData>
		vTaskDelay(10);
 8000686:	e75b      	b.n	8000540 <StartDIN_DOUT+0xc>
 8000688:	200000b0 	.word	0x200000b0
 800068c:	08008130 	.word	0x08008130

08000690 <vKeyboardTask>:
  return pKeyboardQueue;
}


void vKeyboardTask( void * argument )
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  KeyEvent      TEvent;
  GPIO_PinState TK[KEYBOARD_COUNT];
  for(;;)
  {
    vTaskDelay(KEY_PEREOD);
 8000698:	200a      	movs	r0, #10
 800069a:	f005 fefb 	bl	8006494 <vTaskDelay>
    for ( uint8_t i=0U; i<KEYBOARD_COUNT; i++ )                                          /* Считываем текущее состояние портов клавиатуры */
 800069e:	2300      	movs	r3, #0
 80006a0:	75fb      	strb	r3, [r7, #23]
 80006a2:	e0bf      	b.n	8000824 <vKeyboardTask+0x194>
    {
      TK[i]=  HAL_GPIO_ReadPin( xDinPortConfig[i+DIN_COUNT].GPIOx, xDinPortConfig[i+DIN_COUNT].Pin );
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
 80006a6:	3305      	adds	r3, #5
 80006a8:	4a61      	ldr	r2, [pc, #388]	; (8000830 <vKeyboardTask+0x1a0>)
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	4413      	add	r3, r2
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	3305      	adds	r3, #5
 80006b4:	495e      	ldr	r1, [pc, #376]	; (8000830 <vKeyboardTask+0x1a0>)
 80006b6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	7dfc      	ldrb	r4, [r7, #23]
 80006be:	4619      	mov	r1, r3
 80006c0:	4610      	mov	r0, r2
 80006c2:	f002 f8b9 	bl	8002838 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	f104 0318 	add.w	r3, r4, #24
 80006ce:	443b      	add	r3, r7
 80006d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
      TEvent.KeyCode = CODES[i];
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	4a57      	ldr	r2, [pc, #348]	; (8000834 <vKeyboardTask+0x1a4>)
 80006d8:	5cd3      	ldrb	r3, [r2, r3]
 80006da:	613b      	str	r3, [r7, #16]
	  /*Фиксируем отжатие клавищи (BRAKECODE)*/
      if ( STATUS[i] && ( TK[i] == KEY_OFF_STATE ) )
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	4a56      	ldr	r2, [pc, #344]	; (8000838 <vKeyboardTask+0x1a8>)
 80006e0:	5cd3      	ldrb	r3, [r2, r3]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d01b      	beq.n	800071e <vKeyboardTask+0x8e>
 80006e6:	7dfb      	ldrb	r3, [r7, #23]
 80006e8:	3318      	adds	r3, #24
 80006ea:	443b      	add	r3, r7
 80006ec:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d114      	bne.n	800071e <vKeyboardTask+0x8e>
      {
        STATUS[i]      = KEY_OFF; /*Состоянии клавиши ВЫКЛ*/
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	4a50      	ldr	r2, [pc, #320]	; (8000838 <vKeyboardTask+0x1a8>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	54d1      	strb	r1, [r2, r3]
        COUNTERS[i]    = 0U;      /*Сбрасываем счетчик*/
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
 80006fe:	4a4f      	ldr	r2, [pc, #316]	; (800083c <vKeyboardTask+0x1ac>)
 8000700:	2100      	movs	r1, #0
 8000702:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        TEvent.Status  = BRAKECODE;
 8000706:	2340      	movs	r3, #64	; 0x40
 8000708:	753b      	strb	r3, [r7, #20]
        //xQueueReset( pKeyboardQueue );
        xQueueSend( pKeyboardQueue, &TEvent, portMAX_DELAY );
 800070a:	4b4d      	ldr	r3, [pc, #308]	; (8000840 <vKeyboardTask+0x1b0>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	f107 0110 	add.w	r1, r7, #16
 8000712:	2300      	movs	r3, #0
 8000714:	f04f 32ff 	mov.w	r2, #4294967295
 8000718:	f005 f92a 	bl	8005970 <xQueueGenericSend>
 800071c:	e07f      	b.n	800081e <vKeyboardTask+0x18e>
      }
      else
      {
        /*Если текущие состояние потрта ВКЛ, а предидущие было ВЫКЛ
        //то запускаме счеткик нажатий*/
        if ( !STATUS[i] && ( TK[i] == KEY_ON_STATE ) )
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	4a45      	ldr	r2, [pc, #276]	; (8000838 <vKeyboardTask+0x1a8>)
 8000722:	5cd3      	ldrb	r3, [r2, r3]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d129      	bne.n	800077c <vKeyboardTask+0xec>
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	3318      	adds	r3, #24
 800072c:	443b      	add	r3, r7
 800072e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d122      	bne.n	800077c <vKeyboardTask+0xec>
        {
          COUNTERS[i]++;
 8000736:	7dfb      	ldrb	r3, [r7, #23]
 8000738:	4a40      	ldr	r2, [pc, #256]	; (800083c <vKeyboardTask+0x1ac>)
 800073a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073e:	3201      	adds	r2, #1
 8000740:	493e      	ldr	r1, [pc, #248]	; (800083c <vKeyboardTask+0x1ac>)
 8000742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          /*если счетчик превысил значение SWITCHONDELAY то фиксируем нажатие*/
          if ( COUNTERS[i] >=  SWITCHONDELAY  )
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	4a3c      	ldr	r2, [pc, #240]	; (800083c <vKeyboardTask+0x1ac>)
 800074a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d965      	bls.n	800081e <vKeyboardTask+0x18e>
          {
            COUNTERS[i]    = 0U;
 8000752:	7dfb      	ldrb	r3, [r7, #23]
 8000754:	4a39      	ldr	r2, [pc, #228]	; (800083c <vKeyboardTask+0x1ac>)
 8000756:	2100      	movs	r1, #0
 8000758:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            STATUS[i]      = KEY_ON;
 800075c:	7dfb      	ldrb	r3, [r7, #23]
 800075e:	4a36      	ldr	r2, [pc, #216]	; (8000838 <vKeyboardTask+0x1a8>)
 8000760:	2101      	movs	r1, #1
 8000762:	54d1      	strb	r1, [r2, r3]
            TEvent.Status  = MAKECODE;
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	753b      	strb	r3, [r7, #20]
            xQueueSend( pKeyboardQueue, &TEvent, portMAX_DELAY );
 8000768:	4b35      	ldr	r3, [pc, #212]	; (8000840 <vKeyboardTask+0x1b0>)
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	f107 0110 	add.w	r1, r7, #16
 8000770:	2300      	movs	r3, #0
 8000772:	f04f 32ff 	mov.w	r2, #4294967295
 8000776:	f005 f8fb 	bl	8005970 <xQueueGenericSend>
          if ( COUNTERS[i] >=  SWITCHONDELAY  )
 800077a:	e050      	b.n	800081e <vKeyboardTask+0x18e>

          }
        }
        else if ( (STATUS[i] != KEY_OFF)  && ( TK[i] == KEY_ON_STATE ) )
 800077c:	7dfb      	ldrb	r3, [r7, #23]
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <vKeyboardTask+0x1a8>)
 8000780:	5cd3      	ldrb	r3, [r2, r3]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d04b      	beq.n	800081e <vKeyboardTask+0x18e>
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	3318      	adds	r3, #24
 800078a:	443b      	add	r3, r7
 800078c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d144      	bne.n	800081e <vKeyboardTask+0x18e>
        {
          COUNTERS[i]++;
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	4a29      	ldr	r2, [pc, #164]	; (800083c <vKeyboardTask+0x1ac>)
 8000798:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800079c:	3201      	adds	r2, #1
 800079e:	4927      	ldr	r1, [pc, #156]	; (800083c <vKeyboardTask+0x1ac>)
 80007a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          switch ( STATUS[i] )
 80007a4:	7dfb      	ldrb	r3, [r7, #23]
 80007a6:	4a24      	ldr	r2, [pc, #144]	; (8000838 <vKeyboardTask+0x1a8>)
 80007a8:	5cd3      	ldrb	r3, [r2, r3]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d002      	beq.n	80007b4 <vKeyboardTask+0x124>
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d01b      	beq.n	80007ea <vKeyboardTask+0x15a>
                xQueueSend( pKeyboardQueue, &TEvent, portMAX_DELAY );

              }
              break;
            default:
    	      break;
 80007b2:	e034      	b.n	800081e <vKeyboardTask+0x18e>
              if ( COUNTERS[i] >=  DefaultDelay  )
 80007b4:	7dfb      	ldrb	r3, [r7, #23]
 80007b6:	4a21      	ldr	r2, [pc, #132]	; (800083c <vKeyboardTask+0x1ac>)
 80007b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007bc:	2b09      	cmp	r3, #9
 80007be:	d92b      	bls.n	8000818 <vKeyboardTask+0x188>
                STATUS[i]      = KEY_ON_REPEAT;
 80007c0:	7dfb      	ldrb	r3, [r7, #23]
 80007c2:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <vKeyboardTask+0x1a8>)
 80007c4:	2102      	movs	r1, #2
 80007c6:	54d1      	strb	r1, [r2, r3]
                COUNTERS[i]    = 0U;
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <vKeyboardTask+0x1ac>)
 80007cc:	2100      	movs	r1, #0
 80007ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                TEvent.Status  = MAKECODE;
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	753b      	strb	r3, [r7, #20]
                xQueueSend( pKeyboardQueue, &TEvent, portMAX_DELAY );
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <vKeyboardTask+0x1b0>)
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	f107 0110 	add.w	r1, r7, #16
 80007de:	2300      	movs	r3, #0
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	f005 f8c4 	bl	8005970 <xQueueGenericSend>
              break;
 80007e8:	e016      	b.n	8000818 <vKeyboardTask+0x188>
              if ( COUNTERS[i] >= DefaultRepeatRate )
 80007ea:	7dfb      	ldrb	r3, [r7, #23]
 80007ec:	4a13      	ldr	r2, [pc, #76]	; (800083c <vKeyboardTask+0x1ac>)
 80007ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f2:	2b27      	cmp	r3, #39	; 0x27
 80007f4:	d912      	bls.n	800081c <vKeyboardTask+0x18c>
                COUNTERS[i]    = 0U;
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	4a10      	ldr	r2, [pc, #64]	; (800083c <vKeyboardTask+0x1ac>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                TEvent.Status  = MAKECODE;
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	753b      	strb	r3, [r7, #20]
                xQueueSend( pKeyboardQueue, &TEvent, portMAX_DELAY );
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <vKeyboardTask+0x1b0>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	f107 0110 	add.w	r1, r7, #16
 800080c:	2300      	movs	r3, #0
 800080e:	f04f 32ff 	mov.w	r2, #4294967295
 8000812:	f005 f8ad 	bl	8005970 <xQueueGenericSend>
              break;
 8000816:	e001      	b.n	800081c <vKeyboardTask+0x18c>
              break;
 8000818:	bf00      	nop
 800081a:	e000      	b.n	800081e <vKeyboardTask+0x18e>
              break;
 800081c:	bf00      	nop
    for ( uint8_t i=0U; i<KEYBOARD_COUNT; i++ )                                          /* Считываем текущее состояние портов клавиатуры */
 800081e:	7dfb      	ldrb	r3, [r7, #23]
 8000820:	3301      	adds	r3, #1
 8000822:	75fb      	strb	r3, [r7, #23]
 8000824:	7dfb      	ldrb	r3, [r7, #23]
 8000826:	2b03      	cmp	r3, #3
 8000828:	f67f af3c 	bls.w	80006a4 <vKeyboardTask+0x14>
    vTaskDelay(KEY_PEREOD);
 800082c:	e734      	b.n	8000698 <vKeyboardTask+0x8>
 800082e:	bf00      	nop
 8000830:	08008130 	.word	0x08008130
 8000834:	20000000 	.word	0x20000000
 8000838:	20000100 	.word	0x20000100
 800083c:	20000104 	.word	0x20000104
 8000840:	20000114 	.word	0x20000114

08000844 <WriteByte>:
	 xEventGroupSetBits(lcdFlags,LCD_DATA_CHNGE );
 }
}

static void WriteByte( uint8_t data)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	uint16_t buf_port =(uint16_t) LCD_0_GPIO_Port->ODR;
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <WriteByte+0x34>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	81fb      	strh	r3, [r7, #14]
	buf_port = buf_port & 0xF0;
 8000854:	89fb      	ldrh	r3, [r7, #14]
 8000856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800085a:	81fb      	strh	r3, [r7, #14]
	buf_port = buf_port | data;
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	b29a      	uxth	r2, r3
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	4313      	orrs	r3, r2
 8000864:	81fb      	strh	r3, [r7, #14]
	LCD_0_GPIO_Port->ODR = buf_port;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <WriteByte+0x34>)
 8000868:	89fb      	ldrh	r3, [r7, #14]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40010c00 	.word	0x40010c00

0800087c <DelayUS>:
{
	*pData = (uint16_t) LCD_0_GPIO_Port->ODR & 0x0F;
}

static void DelayUS( uint16_t value)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
	TIM6->ARR = value;
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <DelayUS+0x48>)
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM6->CNT = 0;//Обнуляем счётный регист
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <DelayUS+0x48>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1 |= TIM_CR1_CEN;//Запускаем таймер, разрешаем его работу.
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <DelayUS+0x48>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <DelayUS+0x48>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6013      	str	r3, [r2, #0]
	while((TIM6->SR & TIM_SR_UIF)==0){} //Ждём установки флага UIF = счёт закончен
 800089e:	bf00      	nop
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <DelayUS+0x48>)
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0f9      	beq.n	80008a0 <DelayUS+0x24>
	TIM6->SR &=~ TIM_SR_UIF;//Сброс флага.
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <DelayUS+0x48>)
 80008ae:	691b      	ldr	r3, [r3, #16]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <DelayUS+0x48>)
 80008b2:	f023 0301 	bic.w	r3, r3, #1
 80008b6:	6113      	str	r3, [r2, #16]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40001000 	.word	0x40001000

080008c8 <Strob>:

static void Strob()
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	SET_E;
 80008cc:	2201      	movs	r2, #1
 80008ce:	2110      	movs	r1, #16
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <Strob+0x24>)
 80008d2:	f001 ffc8 	bl	8002866 <HAL_GPIO_WritePin>
	DelayUS(1);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff ffd0 	bl	800087c <DelayUS>
	RESET_E;
 80008dc:	2200      	movs	r2, #0
 80008de:	2110      	movs	r1, #16
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <Strob+0x24>)
 80008e2:	f001 ffc0 	bl	8002866 <HAL_GPIO_WritePin>
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40011000 	.word	0x40011000

080008f0 <LCD_SendCommand>:

static void LCD_SendCommand(uint8_t command)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	RESET_RS;
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <LCD_SendCommand+0x44>)
 8000902:	f001 ffb0 	bl	8002866 <HAL_GPIO_WritePin>
	RESET_RW;
 8000906:	2200      	movs	r2, #0
 8000908:	2120      	movs	r1, #32
 800090a:	480b      	ldr	r0, [pc, #44]	; (8000938 <LCD_SendCommand+0x48>)
 800090c:	f001 ffab 	bl	8002866 <HAL_GPIO_WritePin>
	RESET_E;
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	4808      	ldr	r0, [pc, #32]	; (8000938 <LCD_SendCommand+0x48>)
 8000916:	f001 ffa6 	bl	8002866 <HAL_GPIO_WritePin>
	WriteByte( command);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff91 	bl	8000844 <WriteByte>
	Strob();
 8000922:	f7ff ffd1 	bl	80008c8 <Strob>
	DelayUS(40);
 8000926:	2028      	movs	r0, #40	; 0x28
 8000928:	f7ff ffa8 	bl	800087c <DelayUS>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40010c00 	.word	0x40010c00
 8000938:	40011000 	.word	0x40011000

0800093c <LCD_SendData>:

static void LCD_SendData(uint8_t data)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	SET_RS;
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <LCD_SendData+0x44>)
 800094e:	f001 ff8a 	bl	8002866 <HAL_GPIO_WritePin>
	RESET_RW;
 8000952:	2200      	movs	r2, #0
 8000954:	2120      	movs	r1, #32
 8000956:	480b      	ldr	r0, [pc, #44]	; (8000984 <LCD_SendData+0x48>)
 8000958:	f001 ff85 	bl	8002866 <HAL_GPIO_WritePin>
	RESET_E;
 800095c:	2200      	movs	r2, #0
 800095e:	2110      	movs	r1, #16
 8000960:	4808      	ldr	r0, [pc, #32]	; (8000984 <LCD_SendData+0x48>)
 8000962:	f001 ff80 	bl	8002866 <HAL_GPIO_WritePin>
	WriteByte( data);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff6b 	bl	8000844 <WriteByte>
	Strob();
 800096e:	f7ff ffab 	bl	80008c8 <Strob>
	DelayUS(40);
 8000972:	2028      	movs	r0, #40	; 0x28
 8000974:	f7ff ff82 	bl	800087c <DelayUS>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40010c00 	.word	0x40010c00
 8000984:	40011000 	.word	0x40011000

08000988 <Init16X2LCD>:

void Init16X2LCD()
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	osDelay(40);
 800098c:	2028      	movs	r0, #40	; 0x28
 800098e:	f004 fb65 	bl	800505c <osDelay>
	LCD_SendCommand(LCD_FUNSTION_SET  | DB_4);
 8000992:	2030      	movs	r0, #48	; 0x30
 8000994:	f7ff ffac 	bl	80008f0 <LCD_SendCommand>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <vRedrawLCD>:



void vRedrawLCD()
{
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af02      	add	r7, sp, #8
	EventBits_t redraw_flags;
	redraw_flags = xEventGroupWaitBits(lcdFlags, UP_STRING | DOWN_STRING ,pdTRUE,pdFALSE,0);
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <vRedrawLCD+0xa0>)
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	2300      	movs	r3, #0
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2300      	movs	r3, #0
 80009ac:	2201      	movs	r2, #1
 80009ae:	2103      	movs	r1, #3
 80009b0:	f004 fc58 	bl	8005264 <xEventGroupWaitBits>
 80009b4:	6038      	str	r0, [r7, #0]
	if (redraw_flags & UP_STRING )
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d019      	beq.n	80009f4 <vRedrawLCD+0x58>
	{
		memcpy(LCD_OUT_BUFFER,LCD_BUFFER,LED_STRING_LEN);
 80009c0:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <vRedrawLCD+0xa4>)
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <vRedrawLCD+0xa8>)
 80009c4:	4614      	mov	r4, r2
 80009c6:	461d      	mov	r5, r3
 80009c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	6023      	str	r3, [r4, #0]
		LCD_SendCommand(0x80);  //Устаналвиаем адрес в начало верхней строки
 80009d0:	2080      	movs	r0, #128	; 0x80
 80009d2:	f7ff ff8d 	bl	80008f0 <LCD_SendCommand>
		for (uint8_t i = 0;i< LED_STRING_LEN;i++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	e008      	b.n	80009ee <vRedrawLCD+0x52>
		{
			LCD_SendData(LCD_OUT_BUFFER[i]);
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <vRedrawLCD+0xa4>)
 80009e0:	5cd3      	ldrb	r3, [r2, r3]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ffaa 	bl	800093c <LCD_SendData>
		for (uint8_t i = 0;i< LED_STRING_LEN;i++)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	3301      	adds	r3, #1
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b13      	cmp	r3, #19
 80009f2:	d9f3      	bls.n	80009dc <vRedrawLCD+0x40>
		}
	}
	if (redraw_flags & DOWN_STRING )
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d01a      	beq.n	8000a34 <vRedrawLCD+0x98>
	{
		memcpy(LCD_OUT_BUFFER,&LCD_BUFFER[LED_STRING_LEN ],LED_STRING_LEN);
 80009fe:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <vRedrawLCD+0xa4>)
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <vRedrawLCD+0xa8>)
 8000a02:	4615      	mov	r5, r2
 8000a04:	f103 0414 	add.w	r4, r3, #20
 8000a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	602b      	str	r3, [r5, #0]
		LCD_SendCommand(0x80 | 0x40);  //Устаналвиаем адрес в начало нижней строки
 8000a10:	20c0      	movs	r0, #192	; 0xc0
 8000a12:	f7ff ff6d 	bl	80008f0 <LCD_SendCommand>
		for (uint8_t i = 0;i< LED_STRING_LEN;i++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	71bb      	strb	r3, [r7, #6]
 8000a1a:	e008      	b.n	8000a2e <vRedrawLCD+0x92>
		{
			LCD_SendData(LCD_OUT_BUFFER[i]);
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <vRedrawLCD+0xa4>)
 8000a20:	5cd3      	ldrb	r3, [r2, r3]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff8a 	bl	800093c <LCD_SendData>
		for (uint8_t i = 0;i< LED_STRING_LEN;i++)
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	71bb      	strb	r3, [r7, #6]
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	2b13      	cmp	r3, #19
 8000a32:	d9f3      	bls.n	8000a1c <vRedrawLCD+0x80>
		}
	}
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3c:	20000158 	.word	0x20000158
 8000a40:	20000144 	.word	0x20000144
 8000a44:	2000011c 	.word	0x2000011c

08000a48 <LCD_Task>:
/*
 * Таск перерисовывет данные на LCD
 */
void LCD_Task(void *argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	Init16X2LCD();
 8000a50:	f7ff ff9a 	bl	8000988 <Init16X2LCD>
	while(1)
	{
		vTaskDelay(DISPALY_REDRAW_TIME);
 8000a54:	2032      	movs	r0, #50	; 0x32
 8000a56:	f005 fd1d 	bl	8006494 <vTaskDelay>
		vRedrawLCD();
 8000a5a:	f7ff ff9f 	bl	800099c <vRedrawLCD>
		vTaskDelay(DISPALY_REDRAW_TIME);
 8000a5e:	e7f9      	b.n	8000a54 <LCD_Task+0xc>

08000a60 <SetData>:


}

void SetData(uint16_t index, uint16_t data)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	460a      	mov	r2, r1
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	80bb      	strh	r3, [r7, #4]
	if (index < REGISTER_COUNT)
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	2be3      	cmp	r3, #227	; 0xe3
 8000a74:	d804      	bhi.n	8000a80 <SetData+0x20>
	{
		DATA_MODEL_REGISTER[index] = data;
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	4904      	ldr	r1, [pc, #16]	; (8000a8c <SetData+0x2c>)
 8000a7a:	88ba      	ldrh	r2, [r7, #4]
 8000a7c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}

}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	2000015c 	.word	0x2000015c

08000a90 <InitData>:
		}
}


void InitData()
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_LAMP_COUNT; i++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	e01a      	b.n	8000ad2 <InitData+0x42>
	{
		lamp_data[i].state = 0;
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	4911      	ldr	r1, [pc, #68]	; (8000ae4 <InitData+0x54>)
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	440b      	add	r3, r1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
		lamp_data[i].timer = 0;
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <InitData+0x54>)
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	440b      	add	r3, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	705a      	strb	r2, [r3, #1]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	709a      	strb	r2, [r3, #2]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	70da      	strb	r2, [r3, #3]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	711a      	strb	r2, [r3, #4]
	for (uint8_t i = 0; i < MAX_LAMP_COUNT; i++)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	71fb      	strb	r3, [r7, #7]
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b2b      	cmp	r3, #43	; 0x2b
 8000ad6:	d9e1      	bls.n	8000a9c <InitData+0xc>
	}
	//for (uint8_t i = 0; i < MAX_LAMP_COUNT; i++)
	//{
	//	lamp_data[i].index =
	//}
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000324 	.word	0x20000324

08000ae8 <LAMPstart>:
	}

}

void LAMPstart(void *argument)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	InitData();
 8000af0:	f7ff ffce 	bl	8000a90 <InitData>
	for(;;)
	{
		vTaskDelay(1000);
 8000af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af8:	f005 fccc 	bl	8006494 <vTaskDelay>

		for (uint8_t i = 0; i < MAX_LAMP_COUNT; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e01e      	b.n	8000b40 <LAMPstart+0x58>
		{
			//lamp_data[i].state =
			if (lamp_data[i].state == ACTIVE )
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	4910      	ldr	r1, [pc, #64]	; (8000b48 <LAMPstart+0x60>)
 8000b06:	4613      	mov	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4413      	add	r3, r2
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	440b      	add	r3, r1
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d111      	bne.n	8000b3a <LAMPstart+0x52>
			{
				lamp_data[i].timer++;
 8000b16:	7bfa      	ldrb	r2, [r7, #15]
 8000b18:	490b      	ldr	r1, [pc, #44]	; (8000b48 <LAMPstart+0x60>)
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4413      	add	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	440b      	add	r3, r1
 8000b24:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8000b28:	1c59      	adds	r1, r3, #1
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <LAMPstart+0x60>)
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4403      	add	r3, r0
 8000b36:	f8c3 1001 	str.w	r1, [r3, #1]
		for (uint8_t i = 0; i < MAX_LAMP_COUNT; i++)
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b2b      	cmp	r3, #43	; 0x2b
 8000b44:	d9dd      	bls.n	8000b02 <LAMPstart+0x1a>
		vTaskDelay(1000);
 8000b46:	e7d5      	b.n	8000af4 <LAMPstart+0xc>
 8000b48:	20000324 	.word	0x20000324

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f000 fe7a 	bl	8001848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f874 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f000 fac0 	bl	80010dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000b5c:	f000 faa0 	bl	80010a0 <MX_DMA_Init>
  MX_TIM7_Init();
 8000b60:	f000 fa40 	bl	8000fe4 <MX_TIM7_Init>
  MX_RTC_Init();
 8000b64:	f000 f988 	bl	8000e78 <MX_RTC_Init>
  MX_ADC1_Init();
 8000b68:	f000 f8cc 	bl	8000d04 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b6c:	f000 f956 	bl	8000e1c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000b70:	f000 f9cc 	bl	8000f0c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 fa6a 	bl	800104c <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8000b78:	f000 f912 	bl	8000da0 <MX_ADC3_Init>
  MX_TIM6_Init();
 8000b7c:	f000 f9fe 	bl	8000f7c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b80:	f004 f95c 	bl	8004e3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b84:	4a1b      	ldr	r2, [pc, #108]	; (8000bf4 <main+0xa8>)
 8000b86:	2100      	movs	r1, #0
 8000b88:	481b      	ldr	r0, [pc, #108]	; (8000bf8 <main+0xac>)
 8000b8a:	f004 f9bd 	bl	8004f08 <osThreadNew>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <main+0xb0>)
 8000b92:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(LCD_Task, NULL, &LCD_attributes);
 8000b94:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <main+0xb4>)
 8000b96:	2100      	movs	r1, #0
 8000b98:	481a      	ldr	r0, [pc, #104]	; (8000c04 <main+0xb8>)
 8000b9a:	f004 f9b5 	bl	8004f08 <osThreadNew>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <main+0xbc>)
 8000ba2:	6013      	str	r3, [r2, #0]

  /* creation of DIN_DOUT_Task */
  DIN_DOUT_TaskHandle = osThreadNew(StartDIN_DOUT, NULL, &DIN_DOUT_Task_attributes);
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <main+0xc0>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4819      	ldr	r0, [pc, #100]	; (8000c10 <main+0xc4>)
 8000baa:	f004 f9ad 	bl	8004f08 <osThreadNew>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <main+0xc8>)
 8000bb2:	6013      	str	r3, [r2, #0]

  /* creation of KeyboardTask */
  KeyboardTaskHandle = osThreadNew(vKeyboardTask, NULL, &KeyboardTask_attributes);
 8000bb4:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <main+0xcc>)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4818      	ldr	r0, [pc, #96]	; (8000c1c <main+0xd0>)
 8000bba:	f004 f9a5 	bl	8004f08 <osThreadNew>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <main+0xd4>)
 8000bc2:	6013      	str	r3, [r2, #0]

  /* creation of LAP_task */
  LAP_taskHandle = osThreadNew(LAMPstart, NULL, &LAP_task_attributes);
 8000bc4:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <main+0xd8>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4817      	ldr	r0, [pc, #92]	; (8000c28 <main+0xdc>)
 8000bca:	f004 f99d 	bl	8004f08 <osThreadNew>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <main+0xe0>)
 8000bd2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of TimersEvent */
  TimersEventHandle = osEventFlagsNew(&TimersEvent_attributes);
 8000bd4:	4816      	ldr	r0, [pc, #88]	; (8000c30 <main+0xe4>)
 8000bd6:	f004 fa6f 	bl	80050b8 <osEventFlagsNew>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <main+0xe8>)
 8000bde:	6013      	str	r3, [r2, #0]

  /* creation of DIN_DOUT_EVENT */
  DIN_DOUT_EVENTHandle = osEventFlagsNew(&DIN_DOUT_EVENT_attributes);
 8000be0:	4815      	ldr	r0, [pc, #84]	; (8000c38 <main+0xec>)
 8000be2:	f004 fa69 	bl	80050b8 <osEventFlagsNew>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <main+0xf0>)
 8000bea:	6013      	str	r3, [r2, #0]
 // vSetTimersEnvet( TimersEventHandle);
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bec:	f004 f958 	bl	8004ea0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <main+0xa4>
 8000bf2:	bf00      	nop
 8000bf4:	08008178 	.word	0x08008178
 8000bf8:	08001247 	.word	0x08001247
 8000bfc:	20000668 	.word	0x20000668
 8000c00:	0800819c 	.word	0x0800819c
 8000c04:	08000a49 	.word	0x08000a49
 8000c08:	2000066c 	.word	0x2000066c
 8000c0c:	080081c0 	.word	0x080081c0
 8000c10:	08000535 	.word	0x08000535
 8000c14:	20000918 	.word	0x20000918
 8000c18:	080081e4 	.word	0x080081e4
 8000c1c:	08000691 	.word	0x08000691
 8000c20:	20000bc4 	.word	0x20000bc4
 8000c24:	08008208 	.word	0x08008208
 8000c28:	08000ae9 	.word	0x08000ae9
 8000c2c:	20000e70 	.word	0x20000e70
 8000c30:	0800822c 	.word	0x0800822c
 8000c34:	2000111c 	.word	0x2000111c
 8000c38:	0800823c 	.word	0x0800823c
 8000c3c:	20001140 	.word	0x20001140

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b096      	sub	sp, #88	; 0x58
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c4a:	2228      	movs	r2, #40	; 0x28
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f007 f944 	bl	8007edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c74:	2305      	movs	r3, #5
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c82:	2301      	movs	r3, #1
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c86:	2301      	movs	r3, #1
 8000c88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c94:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 ff4a 	bl	8002b38 <HAL_RCC_OscConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000caa:	f000 fad4 	bl	8001256 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cae:	230f      	movs	r3, #15
 8000cb0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	2102      	movs	r1, #2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 f9b6 	bl	800303c <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cd6:	f000 fabe 	bl	8001256 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fb63 	bl	80033b8 <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000cf8:	f000 faad 	bl	8001256 <Error_Handler>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3758      	adds	r7, #88	; 0x58
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d14:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <MX_ADC1_Init+0x94>)
 8000d16:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <MX_ADC1_Init+0x98>)
 8000d18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_ADC1_Init+0x94>)
 8000d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_ADC1_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_ADC1_Init+0x94>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_ADC1_Init+0x94>)
 8000d30:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_ADC1_Init+0x94>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_ADC1_Init+0x94>)
 8000d3e:	2202      	movs	r2, #2
 8000d40:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d42:	4815      	ldr	r0, [pc, #84]	; (8000d98 <MX_ADC1_Init+0x94>)
 8000d44:	f000 fda0 	bl	8001888 <HAL_ADC_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000d4e:	f000 fa82 	bl	8001256 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_ADC1_Init+0x94>)
 8000d64:	f000 fe7a 	bl	8001a5c <HAL_ADC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d6e:	f000 fa72 	bl	8001256 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <MX_ADC1_Init+0x94>)
 8000d80:	f000 fe6c 	bl	8001a5c <HAL_ADC_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000d8a:	f000 fa64 	bl	8001256 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000042c 	.word	0x2000042c
 8000d9c:	40012400 	.word	0x40012400

08000da0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_ADC3_Init+0x74>)
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <MX_ADC3_Init+0x78>)
 8000db4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_ADC3_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_ADC3_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_ADC3_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_ADC3_Init+0x74>)
 8000dca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dce:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_ADC3_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_ADC3_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_ADC3_Init+0x74>)
 8000dde:	f000 fd53 	bl	8001888 <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 8000de8:	f000 fa35 	bl	8001256 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dec:	2303      	movs	r3, #3
 8000dee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_ADC3_Init+0x74>)
 8000dfe:	f000 fe2d 	bl	8001a5c <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 8000e08:	f000 fa25 	bl	8001256 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000045c 	.word	0x2000045c
 8000e18:	40013c00 	.word	0x40013c00

08000e1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_I2C1_Init+0x50>)
 8000e22:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <MX_I2C1_Init+0x54>)
 8000e24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_I2C1_Init+0x50>)
 8000e28:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <MX_I2C1_Init+0x58>)
 8000e2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_I2C1_Init+0x50>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_I2C1_Init+0x50>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_I2C1_Init+0x50>)
 8000e3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <MX_I2C1_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_I2C1_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <MX_I2C1_Init+0x50>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_I2C1_Init+0x50>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_I2C1_Init+0x50>)
 8000e5a:	f001 fd1d 	bl	8002898 <HAL_I2C_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e64:	f000 f9f7 	bl	8001256 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200004d0 	.word	0x200004d0
 8000e70:	40005400 	.word	0x40005400
 8000e74:	00061a80 	.word	0x00061a80

08000e78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2100      	movs	r1, #0
 8000e82:	460a      	mov	r2, r1
 8000e84:	801a      	strh	r2, [r3, #0]
 8000e86:	460a      	mov	r2, r1
 8000e88:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_RTC_Init+0x8c>)
 8000e90:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <MX_RTC_Init+0x90>)
 8000e92:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_RTC_Init+0x8c>)
 8000e96:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_RTC_Init+0x8c>)
 8000e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ea4:	4817      	ldr	r0, [pc, #92]	; (8000f04 <MX_RTC_Init+0x8c>)
 8000ea6:	f002 fc15 	bl	80036d4 <HAL_RTC_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000eb0:	f000 f9d1 	bl	8001256 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480f      	ldr	r0, [pc, #60]	; (8000f04 <MX_RTC_Init+0x8c>)
 8000ec8:	f002 fc90 	bl	80037ec <HAL_RTC_SetTime>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000ed2:	f000 f9c0 	bl	8001256 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000eda:	2301      	movs	r3, #1
 8000edc:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_RTC_Init+0x8c>)
 8000eee:	f002 fd15 	bl	800391c <HAL_RTC_SetDate>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000ef8:	f000 f9ad 	bl	8001256 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000524 	.word	0x20000524
 8000f08:	40002800 	.word	0x40002800

08000f0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f12:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <MX_SPI2_Init+0x6c>)
 8000f14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f24:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f5a:	220a      	movs	r2, #10
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_SPI2_Init+0x68>)
 8000f60:	f002 ff85 	bl	8003e6e <HAL_SPI_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000f6a:	f000 f974 	bl	8001256 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000538 	.word	0x20000538
 8000f78:	40003800 	.word	0x40003800

08000f7c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_TIM6_Init+0x60>)
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <MX_TIM6_Init+0x64>)
 8000f8e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_TIM6_Init+0x60>)
 8000f92:	2248      	movs	r2, #72	; 0x48
 8000f94:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_TIM6_Init+0x60>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_TIM6_Init+0x60>)
 8000f9e:	2264      	movs	r2, #100	; 0x64
 8000fa0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_TIM6_Init+0x60>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <MX_TIM6_Init+0x60>)
 8000faa:	f003 fb95 	bl	80046d8 <HAL_TIM_Base_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000fb4:	f000 f94f 	bl	8001256 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_TIM6_Init+0x60>)
 8000fc6:	f003 fddd 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000fd0:	f000 f941 	bl	8001256 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000590 	.word	0x20000590
 8000fe0:	40001000 	.word	0x40001000

08000fe4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_TIM7_Init+0x60>)
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <MX_TIM7_Init+0x64>)
 8000ff6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_TIM7_Init+0x60>)
 8000ffa:	2248      	movs	r2, #72	; 0x48
 8000ffc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_TIM7_Init+0x60>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 40;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_TIM7_Init+0x60>)
 8001006:	2228      	movs	r2, #40	; 0x28
 8001008:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_TIM7_Init+0x60>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <MX_TIM7_Init+0x60>)
 8001012:	f003 fb61 	bl	80046d8 <HAL_TIM_Base_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800101c:	f000 f91b 	bl	8001256 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_TIM7_Init+0x60>)
 800102e:	f003 fda9 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8001038:	f000 f90d 	bl	8001256 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200005d8 	.word	0x200005d8
 8001048:	40001400 	.word	0x40001400

0800104c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_USART1_UART_Init+0x50>)
 8001054:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_USART1_UART_Init+0x4c>)
 8001084:	f003 fdfc 	bl	8004c80 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800108e:	f000 f8e2 	bl	8001256 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000620 	.word	0x20000620
 800109c:	40013800 	.word	0x40013800

080010a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_DMA_Init+0x38>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <MX_DMA_Init+0x38>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_DMA_Init+0x38>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 5, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2105      	movs	r1, #5
 80010c2:	203b      	movs	r0, #59	; 0x3b
 80010c4:	f000 feb9 	bl	8001e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 80010c8:	203b      	movs	r0, #59	; 0x3b
 80010ca:	f000 fed2 	bl	8001e72 <HAL_NVIC_EnableIRQ>

}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f0:	4b4c      	ldr	r3, [pc, #304]	; (8001224 <MX_GPIO_Init+0x148>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a4b      	ldr	r2, [pc, #300]	; (8001224 <MX_GPIO_Init+0x148>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b49      	ldr	r3, [pc, #292]	; (8001224 <MX_GPIO_Init+0x148>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001108:	4b46      	ldr	r3, [pc, #280]	; (8001224 <MX_GPIO_Init+0x148>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a45      	ldr	r2, [pc, #276]	; (8001224 <MX_GPIO_Init+0x148>)
 800110e:	f043 0320 	orr.w	r3, r3, #32
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b43      	ldr	r3, [pc, #268]	; (8001224 <MX_GPIO_Init+0x148>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0320 	and.w	r3, r3, #32
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b40      	ldr	r3, [pc, #256]	; (8001224 <MX_GPIO_Init+0x148>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a3f      	ldr	r2, [pc, #252]	; (8001224 <MX_GPIO_Init+0x148>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b3d      	ldr	r3, [pc, #244]	; (8001224 <MX_GPIO_Init+0x148>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <MX_GPIO_Init+0x148>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a39      	ldr	r2, [pc, #228]	; (8001224 <MX_GPIO_Init+0x148>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <MX_GPIO_Init+0x148>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Fire_alarm_Pin|local_Pin|remote_Pin|IND_E_Pin
 8001150:	2200      	movs	r2, #0
 8001152:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8001156:	4834      	ldr	r0, [pc, #208]	; (8001228 <MX_GPIO_Init+0x14c>)
 8001158:	f001 fb85 	bl	8002866 <HAL_GPIO_WritePin>
                          |Ind_R_nW_Pin|POW_OUT1_Pin|POW_OUT2_Pin|Relay_Work_Pin
                          |Relay_Crash_Pin|LedR_FBO_accident_Pin|LedY_Local_Control_Pin|LedG_FBO_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_0_Pin|LCD_1_Pin|LCD_2_Pin|LampNPL_Pin
 800115c:	2200      	movs	r2, #0
 800115e:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8001162:	4832      	ldr	r0, [pc, #200]	; (800122c <MX_GPIO_Init+0x150>)
 8001164:	f001 fb7f 	bl	8002866 <HAL_GPIO_WritePin>
                          |LCD_3_Pin|LCD_4_Pin|LCD_5_Pin|LCD_6_Pin
                          |LCD_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN485_GPIO_Port, EN485_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116e:	4830      	ldr	r0, [pc, #192]	; (8001230 <MX_GPIO_Init+0x154>)
 8001170:	f001 fb79 	bl	8002866 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nDOOR_sens_Pin nRemote_activatio_Pin */
  GPIO_InitStruct.Pin = nDOOR_sens_Pin|nRemote_activatio_Pin;
 8001174:	f242 0301 	movw	r3, #8193	; 0x2001
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4619      	mov	r1, r3
 8001188:	4827      	ldr	r0, [pc, #156]	; (8001228 <MX_GPIO_Init+0x14c>)
 800118a:	f001 f9c1 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : Fire_alarm_Pin local_Pin remote_Pin IND_E_Pin
                           Ind_R_nW_Pin POW_OUT1_Pin POW_OUT2_Pin Relay_Work_Pin
                           Relay_Crash_Pin LedR_FBO_accident_Pin LedY_Local_Control_Pin LedG_FBO_ON_Pin */
  GPIO_InitStruct.Pin = Fire_alarm_Pin|local_Pin|remote_Pin|IND_E_Pin
 800118e:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001192:	613b      	str	r3, [r7, #16]
                          |Ind_R_nW_Pin|POW_OUT1_Pin|POW_OUT2_Pin|Relay_Work_Pin
                          |Relay_Crash_Pin|LedR_FBO_accident_Pin|LedY_Local_Control_Pin|LedG_FBO_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2302      	movs	r3, #2
 800119e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4619      	mov	r1, r3
 80011a6:	4820      	ldr	r0, [pc, #128]	; (8001228 <MX_GPIO_Init+0x14c>)
 80011a8:	f001 f9b2 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : KL1_Pin KL2_Pin KL3_Pin KL4_Pin */
  GPIO_InitStruct.Pin = KL1_Pin|KL2_Pin|KL3_Pin|KL4_Pin;
 80011ac:	23f0      	movs	r3, #240	; 0xf0
 80011ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	481c      	ldr	r0, [pc, #112]	; (8001230 <MX_GPIO_Init+0x154>)
 80011c0:	f001 f9a6 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_0_Pin LCD_1_Pin LCD_2_Pin LampNPL_Pin
                           LCD_3_Pin LCD_4_Pin LCD_5_Pin LCD_6_Pin
                           LCD_7_Pin */
  GPIO_InitStruct.Pin = LCD_0_Pin|LCD_1_Pin|LCD_2_Pin|LampNPL_Pin
 80011c4:	f241 03ff 	movw	r3, #4351	; 0x10ff
 80011c8:	613b      	str	r3, [r7, #16]
                          |LCD_3_Pin|LCD_4_Pin|LCD_5_Pin|LCD_6_Pin
                          |LCD_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4619      	mov	r1, r3
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <MX_GPIO_Init+0x150>)
 80011de:	f001 f997 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ind_RS_Pin Ind_LED_Pin */
  GPIO_InitStruct.Pin = Ind_RS_Pin|Ind_LED_Pin;
 80011e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_GPIO_Init+0x150>)
 80011f8:	f001 f98a 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN485_Pin */
  GPIO_InitStruct.Pin = EN485_Pin;
 80011fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN485_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_GPIO_Init+0x154>)
 8001216:	f001 f97b 	bl	8002510 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	40011000 	.word	0x40011000
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40010800 	.word	0x40010800

08001234 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 if (htim->Instance == TIM7)
 {
	// vTimeExpire();
 }
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f003 ff04 	bl	800505c <osDelay>
 8001254:	e7fb      	b.n	800124e <StartDefaultTask+0x8>

08001256 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125a:	b672      	cpsid	i
}
 800125c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125e:	e7fe      	b.n	800125e <Error_Handler+0x8>

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_MspInit+0x68>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <HAL_MspInit+0x68>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6193      	str	r3, [r2, #24]
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_MspInit+0x68>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_MspInit+0x68>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <HAL_MspInit+0x68>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_MspInit+0x68>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	210f      	movs	r1, #15
 800129a:	f06f 0001 	mvn.w	r0, #1
 800129e:	f000 fdcc 	bl	8001e3a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_MspInit+0x6c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_MspInit+0x6c>)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010000 	.word	0x40010000

080012d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a3c      	ldr	r2, [pc, #240]	; (80013dc <HAL_ADC_MspInit+0x10c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d122      	bne.n	8001336 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012f0:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a3a      	ldr	r2, [pc, #232]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 80012f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001320:	2307      	movs	r3, #7
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001324:	2303      	movs	r3, #3
 8001326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	4619      	mov	r1, r3
 800132e:	482d      	ldr	r0, [pc, #180]	; (80013e4 <HAL_ADC_MspInit+0x114>)
 8001330:	f001 f8ee 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001334:	e04e      	b.n	80013d4 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC3)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a2b      	ldr	r2, [pc, #172]	; (80013e8 <HAL_ADC_MspInit+0x118>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d149      	bne.n	80013d4 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a26      	ldr	r2, [pc, #152]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 8001346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_ADC_MspInit+0x110>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001370:	2308      	movs	r3, #8
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001374:	2303      	movs	r3, #3
 8001376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	4619      	mov	r1, r3
 800137e:	4819      	ldr	r0, [pc, #100]	; (80013e4 <HAL_ADC_MspInit+0x114>)
 8001380:	f001 f8c6 	bl	8002510 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_ADC_MspInit+0x11c>)
 8001386:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <HAL_ADC_MspInit+0x120>)
 8001388:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_ADC_MspInit+0x11c>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_ADC_MspInit+0x11c>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_ADC_MspInit+0x11c>)
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_ADC_MspInit+0x11c>)
 800139e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_ADC_MspInit+0x11c>)
 80013a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013aa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_ADC_MspInit+0x11c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_ADC_MspInit+0x11c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <HAL_ADC_MspInit+0x11c>)
 80013ba:	f000 fd69 	bl	8001e90 <HAL_DMA_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_ADC_MspInit+0xf8>
      Error_Handler();
 80013c4:	f7ff ff47 	bl	8001256 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_ADC_MspInit+0x11c>)
 80013cc:	621a      	str	r2, [r3, #32]
 80013ce:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_ADC_MspInit+0x11c>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40012400 	.word	0x40012400
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010800 	.word	0x40010800
 80013e8:	40013c00 	.word	0x40013c00
 80013ec:	2000048c 	.word	0x2000048c
 80013f0:	40020458 	.word	0x40020458

080013f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_I2C_MspInit+0x90>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d132      	bne.n	800147a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <HAL_I2C_MspInit+0x94>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <HAL_I2C_MspInit+0x94>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_I2C_MspInit+0x94>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800142c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001432:	2312      	movs	r3, #18
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4812      	ldr	r0, [pc, #72]	; (800148c <HAL_I2C_MspInit+0x98>)
 8001442:	f001 f865 	bl	8002510 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_I2C_MspInit+0x9c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
 800145c:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <HAL_I2C_MspInit+0x9c>)
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_I2C_MspInit+0x94>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_I2C_MspInit+0x94>)
 8001468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_I2C_MspInit+0x94>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40005400 	.word	0x40005400
 8001488:	40021000 	.word	0x40021000
 800148c:	40010c00 	.word	0x40010c00
 8001490:	40010000 	.word	0x40010000

08001494 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_RTC_MspInit+0x4c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d118      	bne.n	80014d8 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80014a6:	f001 fb3b 	bl	8002b20 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_RTC_MspInit+0x50>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_RTC_MspInit+0x50>)
 80014b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RTC_MspInit+0x50>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_RTC_MspInit+0x54>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2105      	movs	r1, #5
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 fcb4 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f000 fccd 	bl	8001e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40002800 	.word	0x40002800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	4242043c 	.word	0x4242043c

080014ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <HAL_SPI_MspInit+0x8c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d131      	bne.n	8001570 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_SPI_MspInit+0x90>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	4a1a      	ldr	r2, [pc, #104]	; (800157c <HAL_SPI_MspInit+0x90>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001516:	61d3      	str	r3, [r2, #28]
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_SPI_MspInit+0x90>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_SPI_MspInit+0x90>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <HAL_SPI_MspInit+0x90>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_SPI_MspInit+0x90>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800153c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001540:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	4619      	mov	r1, r3
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <HAL_SPI_MspInit+0x94>)
 8001552:	f000 ffdd 	bl	8002510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800155a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <HAL_SPI_MspInit+0x94>)
 800156c:	f000 ffd0 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40003800 	.word	0x40003800
 800157c:	40021000 	.word	0x40021000
 8001580:	40010c00 	.word	0x40010c00

08001584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a16      	ldr	r2, [pc, #88]	; (80015ec <HAL_TIM_Base_MspInit+0x68>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10c      	bne.n	80015b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a15      	ldr	r2, [pc, #84]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80015ae:	e018      	b.n	80015e2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <HAL_TIM_Base_MspInit+0x70>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d113      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2105      	movs	r1, #5
 80015d6:	2037      	movs	r0, #55	; 0x37
 80015d8:	f000 fc2f 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015dc:	2037      	movs	r0, #55	; 0x37
 80015de:	f000 fc48 	bl	8001e72 <HAL_NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40001000 	.word	0x40001000
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40001400 	.word	0x40001400

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <HAL_UART_MspInit+0x8c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d131      	bne.n	800167c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_UART_MspInit+0x90>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <HAL_UART_MspInit+0x90>)
 800161e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_UART_MspInit+0x90>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_UART_MspInit+0x90>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <HAL_UART_MspInit+0x90>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_UART_MspInit+0x90>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4619      	mov	r1, r3
 800165c:	480b      	ldr	r0, [pc, #44]	; (800168c <HAL_UART_MspInit+0x94>)
 800165e:	f000 ff57 	bl	8002510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_UART_MspInit+0x94>)
 8001678:	f000 ff4a 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40013800 	.word	0x40013800
 8001688:	40021000 	.word	0x40021000
 800168c:	40010800 	.word	0x40010800

08001690 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	; 0x30
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <HAL_InitTick+0xd0>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	4a2d      	ldr	r2, [pc, #180]	; (8001760 <HAL_InitTick+0xd0>)
 80016ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016b0:	6193      	str	r3, [r2, #24]
 80016b2:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_InitTick+0xd0>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016be:	f107 020c 	add.w	r2, r7, #12
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 fe27 	bl	800331c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016ce:	f001 fe11 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
 80016d2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d6:	4a23      	ldr	r2, [pc, #140]	; (8001764 <HAL_InitTick+0xd4>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0c9b      	lsrs	r3, r3, #18
 80016de:	3b01      	subs	r3, #1
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_InitTick+0xd8>)
 80016e4:	4a21      	ldr	r2, [pc, #132]	; (800176c <HAL_InitTick+0xdc>)
 80016e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <HAL_InitTick+0xd8>)
 80016ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ee:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016f0:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <HAL_InitTick+0xd8>)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_InitTick+0xd8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HAL_InitTick+0xd8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_InitTick+0xd8>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001708:	4817      	ldr	r0, [pc, #92]	; (8001768 <HAL_InitTick+0xd8>)
 800170a:	f002 ffe5 	bl	80046d8 <HAL_TIM_Base_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001718:	2b00      	cmp	r3, #0
 800171a:	d11b      	bne.n	8001754 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800171c:	4812      	ldr	r0, [pc, #72]	; (8001768 <HAL_InitTick+0xd8>)
 800171e:	f003 f82b 	bl	8004778 <HAL_TIM_Base_Start_IT>
 8001722:	4603      	mov	r3, r0
 8001724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800172c:	2b00      	cmp	r3, #0
 800172e:	d111      	bne.n	8001754 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001730:	2019      	movs	r0, #25
 8001732:	f000 fb9e 	bl	8001e72 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d808      	bhi.n	800174e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	2019      	movs	r0, #25
 8001742:	f000 fb7a 	bl	8001e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_InitTick+0xe0>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e002      	b.n	8001754 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001758:	4618      	mov	r0, r3
 800175a:	3730      	adds	r7, #48	; 0x30
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	431bde83 	.word	0x431bde83
 8001768:	20001164 	.word	0x20001164
 800176c:	40012c00 	.word	0x40012c00
 8001770:	20000008 	.word	0x20000008

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <NMI_Handler+0x4>

0800177a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <MemManage_Handler+0x4>

08001786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler+0x4>

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
	...

080017a0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <RTC_IRQHandler+0x10>)
 80017a6:	f002 fb19 	bl	8003ddc <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000524 	.word	0x20000524

080017b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <TIM1_UP_IRQHandler+0x10>)
 80017ba:	f003 f83d 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20001164 	.word	0x20001164

080017c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <TIM7_IRQHandler+0x10>)
 80017ce:	f003 f833 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200005d8 	.word	0x200005d8

080017dc <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA2_Channel4_5_IRQHandler+0x10>)
 80017e2:	f000 fc2b 	bl	800203c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000048c 	.word	0x2000048c

080017f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017fc:	f7ff fff8 	bl	80017f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001802:	490c      	ldr	r1, [pc, #48]	; (8001834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001804:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001818:	4c09      	ldr	r4, [pc, #36]	; (8001840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001826:	f006 fbb7 	bl	8007f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800182a:	f7ff f98f 	bl	8000b4c <main>
  bx lr
 800182e:	4770      	bx	lr
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001838:	08008294 	.word	0x08008294
  ldr r2, =_sbss
 800183c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001840:	20002cd0 	.word	0x20002cd0

08001844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC1_2_IRQHandler>
	...

08001848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_Init+0x28>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_Init+0x28>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 fae3 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	200f      	movs	r0, #15
 8001860:	f7ff ff16 	bl	8001690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff fcfc 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40022000 	.word	0x40022000

08001874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b02      	ldr	r3, [pc, #8]	; (8001884 <HAL_GetTick+0x10>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	200011ac 	.word	0x200011ac

08001888 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0ce      	b.n	8001a48 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fd02 	bl	80012d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f9bd 	bl	8001c4c <ADC_ConversionStop_Disable>
 80018d2:	4603      	mov	r3, r0
 80018d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 80a9 	bne.w	8001a36 <HAL_ADC_Init+0x1ae>
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 80a5 	bne.w	8001a36 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018f4:	f023 0302 	bic.w	r3, r3, #2
 80018f8:	f043 0202 	orr.w	r2, r3, #2
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4951      	ldr	r1, [pc, #324]	; (8001a50 <HAL_ADC_Init+0x1c8>)
 800190a:	428b      	cmp	r3, r1
 800190c:	d10a      	bne.n	8001924 <HAL_ADC_Init+0x9c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001916:	d002      	beq.n	800191e <HAL_ADC_Init+0x96>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	e004      	b.n	8001928 <HAL_ADC_Init+0xa0>
 800191e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001922:	e001      	b.n	8001928 <HAL_ADC_Init+0xa0>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001928:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7b1b      	ldrb	r3, [r3, #12]
 800192e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001930:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	4313      	orrs	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001940:	d003      	beq.n	800194a <HAL_ADC_Init+0xc2>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d102      	bne.n	8001950 <HAL_ADC_Init+0xc8>
 800194a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194e:	e000      	b.n	8001952 <HAL_ADC_Init+0xca>
 8001950:	2300      	movs	r3, #0
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7d1b      	ldrb	r3, [r3, #20]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d119      	bne.n	8001994 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7b1b      	ldrb	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	3b01      	subs	r3, #1
 800196e:	035a      	lsls	r2, r3, #13
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	e00b      	b.n	8001994 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_ADC_Init+0x1cc>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c4:	d003      	beq.n	80019ce <HAL_ADC_Init+0x146>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d104      	bne.n	80019d8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	051b      	lsls	r3, r3, #20
 80019d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_ADC_Init+0x1d0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d10b      	bne.n	8001a14 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	f023 0303 	bic.w	r3, r3, #3
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a12:	e018      	b.n	8001a46 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f023 0312 	bic.w	r3, r3, #18
 8001a1c:	f043 0210 	orr.w	r2, r3, #16
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a34:	e007      	b.n	8001a46 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	f043 0210 	orr.w	r2, r3, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40013c00 	.word	0x40013c00
 8001a54:	ffe1f7fd 	.word	0xffe1f7fd
 8001a58:	ff1f0efe 	.word	0xff1f0efe

08001a5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x20>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e0dc      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1da>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b06      	cmp	r3, #6
 8001a8a:	d81c      	bhi.n	8001ac6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b05      	subs	r3, #5
 8001a9e:	221f      	movs	r2, #31
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4019      	ands	r1, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3b05      	subs	r3, #5
 8001ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ac4:	e03c      	b.n	8001b40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d81c      	bhi.n	8001b08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	3b23      	subs	r3, #35	; 0x23
 8001ae0:	221f      	movs	r2, #31
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	4019      	ands	r1, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	3b23      	subs	r3, #35	; 0x23
 8001afa:	fa00 f203 	lsl.w	r2, r0, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
 8001b06:	e01b      	b.n	8001b40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b41      	subs	r3, #65	; 0x41
 8001b1a:	221f      	movs	r2, #31
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	4019      	ands	r1, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	3b41      	subs	r3, #65	; 0x41
 8001b34:	fa00 f203 	lsl.w	r2, r0, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b09      	cmp	r3, #9
 8001b46:	d91c      	bls.n	8001b82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68d9      	ldr	r1, [r3, #12]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	3b1e      	subs	r3, #30
 8001b5a:	2207      	movs	r2, #7
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	4019      	ands	r1, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6898      	ldr	r0, [r3, #8]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	3b1e      	subs	r3, #30
 8001b74:	fa00 f203 	lsl.w	r2, r0, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	e019      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6919      	ldr	r1, [r3, #16]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	2207      	movs	r2, #7
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	4019      	ands	r1, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6898      	ldr	r0, [r3, #8]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b10      	cmp	r3, #16
 8001bbc:	d003      	beq.n	8001bc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bc2:	2b11      	cmp	r3, #17
 8001bc4:	d132      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d125      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d126      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b10      	cmp	r3, #16
 8001bf4:	d11a      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <HAL_ADC_ConfigChannel+0x1ec>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	0c9a      	lsrs	r2, r3, #18
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c0c:	e002      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f9      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x1b2>
 8001c1a:	e007      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40012400 	.word	0x40012400
 8001c44:	20000004 	.word	0x20000004
 8001c48:	431bde83 	.word	0x431bde83

08001c4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d12e      	bne.n	8001cc4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c76:	f7ff fdfd 	bl	8001874 <HAL_GetTick>
 8001c7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c7c:	e01b      	b.n	8001cb6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c7e:	f7ff fdf9 	bl	8001874 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d914      	bls.n	8001cb6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d10d      	bne.n	8001cb6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	f043 0210 	orr.w	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e007      	b.n	8001cc6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d0dc      	beq.n	8001c7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4906      	ldr	r1, [pc, #24]	; (8001d68 <__NVIC_EnableIRQ+0x34>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
         );
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff4f 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4c:	f7ff ff64 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	6978      	ldr	r0, [r7, #20]
 8001e58:	f7ff ffb2 	bl	8001dc0 <NVIC_EncodePriority>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff81 	bl	8001d6c <__NVIC_SetPriority>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff57 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e059      	b.n	8001f5a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_DMA_Init+0xd4>)
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d80f      	bhi.n	8001ed2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_DMA_Init+0xd8>)
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <HAL_DMA_Init+0xdc>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	009a      	lsls	r2, r3, #2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <HAL_DMA_Init+0xe0>)
 8001ece:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ed0:	e00e      	b.n	8001ef0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <HAL_DMA_Init+0xe4>)
 8001eda:	4413      	add	r3, r2
 8001edc:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <HAL_DMA_Init+0xdc>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	009a      	lsls	r2, r3, #2
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <HAL_DMA_Init+0xe8>)
 8001eee:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40020407 	.word	0x40020407
 8001f68:	bffdfff8 	.word	0xbffdfff8
 8001f6c:	cccccccd 	.word	0xcccccccd
 8001f70:	40020000 	.word	0x40020000
 8001f74:	bffdfbf8 	.word	0xbffdfbf8
 8001f78:	40020400 	.word	0x40020400

08001f7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_DMA_Start_IT+0x20>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e04b      	b.n	8002034 <HAL_DMA_Start_IT+0xb8>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d13a      	bne.n	8002026 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fa6d 	bl	80024b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 020e 	orr.w	r2, r2, #14
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e00f      	b.n	8002014 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 020a 	orr.w	r2, r2, #10
 8002012:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e005      	b.n	8002032 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800202e:	2302      	movs	r3, #2
 8002030:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002032:	7dfb      	ldrb	r3, [r7, #23]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	2204      	movs	r2, #4
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80f1 	beq.w	8002248 <HAL_DMA_IRQHandler+0x20c>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80eb 	beq.w	8002248 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0204 	bic.w	r2, r2, #4
 800208e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b5f      	ldr	r3, [pc, #380]	; (8002214 <HAL_DMA_IRQHandler+0x1d8>)
 8002098:	429a      	cmp	r2, r3
 800209a:	d958      	bls.n	800214e <HAL_DMA_IRQHandler+0x112>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a5d      	ldr	r2, [pc, #372]	; (8002218 <HAL_DMA_IRQHandler+0x1dc>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d04f      	beq.n	8002146 <HAL_DMA_IRQHandler+0x10a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5c      	ldr	r2, [pc, #368]	; (800221c <HAL_DMA_IRQHandler+0x1e0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d048      	beq.n	8002142 <HAL_DMA_IRQHandler+0x106>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a5a      	ldr	r2, [pc, #360]	; (8002220 <HAL_DMA_IRQHandler+0x1e4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d040      	beq.n	800213c <HAL_DMA_IRQHandler+0x100>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a59      	ldr	r2, [pc, #356]	; (8002224 <HAL_DMA_IRQHandler+0x1e8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d038      	beq.n	8002136 <HAL_DMA_IRQHandler+0xfa>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a57      	ldr	r2, [pc, #348]	; (8002228 <HAL_DMA_IRQHandler+0x1ec>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d030      	beq.n	8002130 <HAL_DMA_IRQHandler+0xf4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a56      	ldr	r2, [pc, #344]	; (800222c <HAL_DMA_IRQHandler+0x1f0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d028      	beq.n	800212a <HAL_DMA_IRQHandler+0xee>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a4d      	ldr	r2, [pc, #308]	; (8002214 <HAL_DMA_IRQHandler+0x1d8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d020      	beq.n	8002124 <HAL_DMA_IRQHandler+0xe8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a52      	ldr	r2, [pc, #328]	; (8002230 <HAL_DMA_IRQHandler+0x1f4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d019      	beq.n	8002120 <HAL_DMA_IRQHandler+0xe4>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a50      	ldr	r2, [pc, #320]	; (8002234 <HAL_DMA_IRQHandler+0x1f8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d012      	beq.n	800211c <HAL_DMA_IRQHandler+0xe0>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a4f      	ldr	r2, [pc, #316]	; (8002238 <HAL_DMA_IRQHandler+0x1fc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00a      	beq.n	8002116 <HAL_DMA_IRQHandler+0xda>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a4d      	ldr	r2, [pc, #308]	; (800223c <HAL_DMA_IRQHandler+0x200>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d102      	bne.n	8002110 <HAL_DMA_IRQHandler+0xd4>
 800210a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800210e:	e01b      	b.n	8002148 <HAL_DMA_IRQHandler+0x10c>
 8002110:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002114:	e018      	b.n	8002148 <HAL_DMA_IRQHandler+0x10c>
 8002116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211a:	e015      	b.n	8002148 <HAL_DMA_IRQHandler+0x10c>
 800211c:	2340      	movs	r3, #64	; 0x40
 800211e:	e013      	b.n	8002148 <HAL_DMA_IRQHandler+0x10c>
 8002120:	2304      	movs	r3, #4
 8002122:	e011      	b.n	8002148 <HAL_DMA_IRQHandler+0x10c>
 8002124:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002128:	e00e      	b.n	8002148 <HAL_DMA_IRQHandler+0x10c>
 800212a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800212e:	e00b      	b.n	8002148 <HAL_DMA_IRQHandler+0x10c>
 8002130:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002134:	e008      	b.n	8002148 <HAL_DMA_IRQHandler+0x10c>
 8002136:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800213a:	e005      	b.n	8002148 <HAL_DMA_IRQHandler+0x10c>
 800213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002140:	e002      	b.n	8002148 <HAL_DMA_IRQHandler+0x10c>
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	e000      	b.n	8002148 <HAL_DMA_IRQHandler+0x10c>
 8002146:	2304      	movs	r3, #4
 8002148:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <HAL_DMA_IRQHandler+0x204>)
 800214a:	6053      	str	r3, [r2, #4]
 800214c:	e057      	b.n	80021fe <HAL_DMA_IRQHandler+0x1c2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a31      	ldr	r2, [pc, #196]	; (8002218 <HAL_DMA_IRQHandler+0x1dc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d04f      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x1bc>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2f      	ldr	r2, [pc, #188]	; (800221c <HAL_DMA_IRQHandler+0x1e0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d048      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x1b8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2e      	ldr	r2, [pc, #184]	; (8002220 <HAL_DMA_IRQHandler+0x1e4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d040      	beq.n	80021ee <HAL_DMA_IRQHandler+0x1b2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <HAL_DMA_IRQHandler+0x1e8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d038      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x1ac>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2b      	ldr	r2, [pc, #172]	; (8002228 <HAL_DMA_IRQHandler+0x1ec>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d030      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x1a6>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a29      	ldr	r2, [pc, #164]	; (800222c <HAL_DMA_IRQHandler+0x1f0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d028      	beq.n	80021dc <HAL_DMA_IRQHandler+0x1a0>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a21      	ldr	r2, [pc, #132]	; (8002214 <HAL_DMA_IRQHandler+0x1d8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d020      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x19a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a25      	ldr	r2, [pc, #148]	; (8002230 <HAL_DMA_IRQHandler+0x1f4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d019      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x196>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a24      	ldr	r2, [pc, #144]	; (8002234 <HAL_DMA_IRQHandler+0x1f8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d012      	beq.n	80021ce <HAL_DMA_IRQHandler+0x192>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a22      	ldr	r2, [pc, #136]	; (8002238 <HAL_DMA_IRQHandler+0x1fc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00a      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x18c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a21      	ldr	r2, [pc, #132]	; (800223c <HAL_DMA_IRQHandler+0x200>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d102      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x186>
 80021bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021c0:	e01b      	b.n	80021fa <HAL_DMA_IRQHandler+0x1be>
 80021c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021c6:	e018      	b.n	80021fa <HAL_DMA_IRQHandler+0x1be>
 80021c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021cc:	e015      	b.n	80021fa <HAL_DMA_IRQHandler+0x1be>
 80021ce:	2340      	movs	r3, #64	; 0x40
 80021d0:	e013      	b.n	80021fa <HAL_DMA_IRQHandler+0x1be>
 80021d2:	2304      	movs	r3, #4
 80021d4:	e011      	b.n	80021fa <HAL_DMA_IRQHandler+0x1be>
 80021d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021da:	e00e      	b.n	80021fa <HAL_DMA_IRQHandler+0x1be>
 80021dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021e0:	e00b      	b.n	80021fa <HAL_DMA_IRQHandler+0x1be>
 80021e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021e6:	e008      	b.n	80021fa <HAL_DMA_IRQHandler+0x1be>
 80021e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021ec:	e005      	b.n	80021fa <HAL_DMA_IRQHandler+0x1be>
 80021ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f2:	e002      	b.n	80021fa <HAL_DMA_IRQHandler+0x1be>
 80021f4:	2340      	movs	r3, #64	; 0x40
 80021f6:	e000      	b.n	80021fa <HAL_DMA_IRQHandler+0x1be>
 80021f8:	2304      	movs	r3, #4
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <HAL_DMA_IRQHandler+0x208>)
 80021fc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8136 	beq.w	8002474 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002210:	e130      	b.n	8002474 <HAL_DMA_IRQHandler+0x438>
 8002212:	bf00      	nop
 8002214:	40020080 	.word	0x40020080
 8002218:	40020008 	.word	0x40020008
 800221c:	4002001c 	.word	0x4002001c
 8002220:	40020030 	.word	0x40020030
 8002224:	40020044 	.word	0x40020044
 8002228:	40020058 	.word	0x40020058
 800222c:	4002006c 	.word	0x4002006c
 8002230:	40020408 	.word	0x40020408
 8002234:	4002041c 	.word	0x4002041c
 8002238:	40020430 	.word	0x40020430
 800223c:	40020444 	.word	0x40020444
 8002240:	40020400 	.word	0x40020400
 8002244:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	2202      	movs	r2, #2
 800224e:	409a      	lsls	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80dd 	beq.w	8002414 <HAL_DMA_IRQHandler+0x3d8>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80d7 	beq.w	8002414 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10b      	bne.n	800228c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 020a 	bic.w	r2, r2, #10
 8002282:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4b7b      	ldr	r3, [pc, #492]	; (8002480 <HAL_DMA_IRQHandler+0x444>)
 8002294:	429a      	cmp	r2, r3
 8002296:	d958      	bls.n	800234a <HAL_DMA_IRQHandler+0x30e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a79      	ldr	r2, [pc, #484]	; (8002484 <HAL_DMA_IRQHandler+0x448>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d04f      	beq.n	8002342 <HAL_DMA_IRQHandler+0x306>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a78      	ldr	r2, [pc, #480]	; (8002488 <HAL_DMA_IRQHandler+0x44c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d048      	beq.n	800233e <HAL_DMA_IRQHandler+0x302>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a76      	ldr	r2, [pc, #472]	; (800248c <HAL_DMA_IRQHandler+0x450>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d040      	beq.n	8002338 <HAL_DMA_IRQHandler+0x2fc>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a75      	ldr	r2, [pc, #468]	; (8002490 <HAL_DMA_IRQHandler+0x454>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d038      	beq.n	8002332 <HAL_DMA_IRQHandler+0x2f6>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a73      	ldr	r2, [pc, #460]	; (8002494 <HAL_DMA_IRQHandler+0x458>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d030      	beq.n	800232c <HAL_DMA_IRQHandler+0x2f0>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a72      	ldr	r2, [pc, #456]	; (8002498 <HAL_DMA_IRQHandler+0x45c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d028      	beq.n	8002326 <HAL_DMA_IRQHandler+0x2ea>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a69      	ldr	r2, [pc, #420]	; (8002480 <HAL_DMA_IRQHandler+0x444>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d020      	beq.n	8002320 <HAL_DMA_IRQHandler+0x2e4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6e      	ldr	r2, [pc, #440]	; (800249c <HAL_DMA_IRQHandler+0x460>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d019      	beq.n	800231c <HAL_DMA_IRQHandler+0x2e0>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6c      	ldr	r2, [pc, #432]	; (80024a0 <HAL_DMA_IRQHandler+0x464>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d012      	beq.n	8002318 <HAL_DMA_IRQHandler+0x2dc>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6b      	ldr	r2, [pc, #428]	; (80024a4 <HAL_DMA_IRQHandler+0x468>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00a      	beq.n	8002312 <HAL_DMA_IRQHandler+0x2d6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a69      	ldr	r2, [pc, #420]	; (80024a8 <HAL_DMA_IRQHandler+0x46c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d102      	bne.n	800230c <HAL_DMA_IRQHandler+0x2d0>
 8002306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800230a:	e01b      	b.n	8002344 <HAL_DMA_IRQHandler+0x308>
 800230c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002310:	e018      	b.n	8002344 <HAL_DMA_IRQHandler+0x308>
 8002312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002316:	e015      	b.n	8002344 <HAL_DMA_IRQHandler+0x308>
 8002318:	2320      	movs	r3, #32
 800231a:	e013      	b.n	8002344 <HAL_DMA_IRQHandler+0x308>
 800231c:	2302      	movs	r3, #2
 800231e:	e011      	b.n	8002344 <HAL_DMA_IRQHandler+0x308>
 8002320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002324:	e00e      	b.n	8002344 <HAL_DMA_IRQHandler+0x308>
 8002326:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800232a:	e00b      	b.n	8002344 <HAL_DMA_IRQHandler+0x308>
 800232c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002330:	e008      	b.n	8002344 <HAL_DMA_IRQHandler+0x308>
 8002332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002336:	e005      	b.n	8002344 <HAL_DMA_IRQHandler+0x308>
 8002338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800233c:	e002      	b.n	8002344 <HAL_DMA_IRQHandler+0x308>
 800233e:	2320      	movs	r3, #32
 8002340:	e000      	b.n	8002344 <HAL_DMA_IRQHandler+0x308>
 8002342:	2302      	movs	r3, #2
 8002344:	4a59      	ldr	r2, [pc, #356]	; (80024ac <HAL_DMA_IRQHandler+0x470>)
 8002346:	6053      	str	r3, [r2, #4]
 8002348:	e057      	b.n	80023fa <HAL_DMA_IRQHandler+0x3be>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a4d      	ldr	r2, [pc, #308]	; (8002484 <HAL_DMA_IRQHandler+0x448>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d04f      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x3b8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a4b      	ldr	r2, [pc, #300]	; (8002488 <HAL_DMA_IRQHandler+0x44c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d048      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x3b4>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a4a      	ldr	r2, [pc, #296]	; (800248c <HAL_DMA_IRQHandler+0x450>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d040      	beq.n	80023ea <HAL_DMA_IRQHandler+0x3ae>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a48      	ldr	r2, [pc, #288]	; (8002490 <HAL_DMA_IRQHandler+0x454>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d038      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x3a8>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a47      	ldr	r2, [pc, #284]	; (8002494 <HAL_DMA_IRQHandler+0x458>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d030      	beq.n	80023de <HAL_DMA_IRQHandler+0x3a2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a45      	ldr	r2, [pc, #276]	; (8002498 <HAL_DMA_IRQHandler+0x45c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d028      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x39c>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3d      	ldr	r2, [pc, #244]	; (8002480 <HAL_DMA_IRQHandler+0x444>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d020      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x396>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a41      	ldr	r2, [pc, #260]	; (800249c <HAL_DMA_IRQHandler+0x460>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d019      	beq.n	80023ce <HAL_DMA_IRQHandler+0x392>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a40      	ldr	r2, [pc, #256]	; (80024a0 <HAL_DMA_IRQHandler+0x464>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d012      	beq.n	80023ca <HAL_DMA_IRQHandler+0x38e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a3e      	ldr	r2, [pc, #248]	; (80024a4 <HAL_DMA_IRQHandler+0x468>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x388>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a3d      	ldr	r2, [pc, #244]	; (80024a8 <HAL_DMA_IRQHandler+0x46c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d102      	bne.n	80023be <HAL_DMA_IRQHandler+0x382>
 80023b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023bc:	e01b      	b.n	80023f6 <HAL_DMA_IRQHandler+0x3ba>
 80023be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c2:	e018      	b.n	80023f6 <HAL_DMA_IRQHandler+0x3ba>
 80023c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c8:	e015      	b.n	80023f6 <HAL_DMA_IRQHandler+0x3ba>
 80023ca:	2320      	movs	r3, #32
 80023cc:	e013      	b.n	80023f6 <HAL_DMA_IRQHandler+0x3ba>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e011      	b.n	80023f6 <HAL_DMA_IRQHandler+0x3ba>
 80023d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d6:	e00e      	b.n	80023f6 <HAL_DMA_IRQHandler+0x3ba>
 80023d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023dc:	e00b      	b.n	80023f6 <HAL_DMA_IRQHandler+0x3ba>
 80023de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e2:	e008      	b.n	80023f6 <HAL_DMA_IRQHandler+0x3ba>
 80023e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e8:	e005      	b.n	80023f6 <HAL_DMA_IRQHandler+0x3ba>
 80023ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ee:	e002      	b.n	80023f6 <HAL_DMA_IRQHandler+0x3ba>
 80023f0:	2320      	movs	r3, #32
 80023f2:	e000      	b.n	80023f6 <HAL_DMA_IRQHandler+0x3ba>
 80023f4:	2302      	movs	r3, #2
 80023f6:	4a2e      	ldr	r2, [pc, #184]	; (80024b0 <HAL_DMA_IRQHandler+0x474>)
 80023f8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	2b00      	cmp	r3, #0
 8002408:	d034      	beq.n	8002474 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002412:	e02f      	b.n	8002474 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2208      	movs	r2, #8
 800241a:	409a      	lsls	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d028      	beq.n	8002476 <HAL_DMA_IRQHandler+0x43a>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d023      	beq.n	8002476 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 020e 	bic.w	r2, r2, #14
 800243c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
    }
  }
  return;
 8002474:	bf00      	nop
 8002476:	bf00      	nop
}
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40020080 	.word	0x40020080
 8002484:	40020008 	.word	0x40020008
 8002488:	4002001c 	.word	0x4002001c
 800248c:	40020030 	.word	0x40020030
 8002490:	40020044 	.word	0x40020044
 8002494:	40020058 	.word	0x40020058
 8002498:	4002006c 	.word	0x4002006c
 800249c:	40020408 	.word	0x40020408
 80024a0:	4002041c 	.word	0x4002041c
 80024a4:	40020430 	.word	0x40020430
 80024a8:	40020444 	.word	0x40020444
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020000 	.word	0x40020000

080024b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d108      	bne.n	80024f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024f2:	e007      	b.n	8002504 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
	...

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b08b      	sub	sp, #44	; 0x2c
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002522:	e179      	b.n	8002818 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002524:	2201      	movs	r2, #1
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 8168 	bne.w	8002812 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4a96      	ldr	r2, [pc, #600]	; (80027a0 <HAL_GPIO_Init+0x290>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d05e      	beq.n	800260a <HAL_GPIO_Init+0xfa>
 800254c:	4a94      	ldr	r2, [pc, #592]	; (80027a0 <HAL_GPIO_Init+0x290>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d875      	bhi.n	800263e <HAL_GPIO_Init+0x12e>
 8002552:	4a94      	ldr	r2, [pc, #592]	; (80027a4 <HAL_GPIO_Init+0x294>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d058      	beq.n	800260a <HAL_GPIO_Init+0xfa>
 8002558:	4a92      	ldr	r2, [pc, #584]	; (80027a4 <HAL_GPIO_Init+0x294>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d86f      	bhi.n	800263e <HAL_GPIO_Init+0x12e>
 800255e:	4a92      	ldr	r2, [pc, #584]	; (80027a8 <HAL_GPIO_Init+0x298>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d052      	beq.n	800260a <HAL_GPIO_Init+0xfa>
 8002564:	4a90      	ldr	r2, [pc, #576]	; (80027a8 <HAL_GPIO_Init+0x298>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d869      	bhi.n	800263e <HAL_GPIO_Init+0x12e>
 800256a:	4a90      	ldr	r2, [pc, #576]	; (80027ac <HAL_GPIO_Init+0x29c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d04c      	beq.n	800260a <HAL_GPIO_Init+0xfa>
 8002570:	4a8e      	ldr	r2, [pc, #568]	; (80027ac <HAL_GPIO_Init+0x29c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d863      	bhi.n	800263e <HAL_GPIO_Init+0x12e>
 8002576:	4a8e      	ldr	r2, [pc, #568]	; (80027b0 <HAL_GPIO_Init+0x2a0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d046      	beq.n	800260a <HAL_GPIO_Init+0xfa>
 800257c:	4a8c      	ldr	r2, [pc, #560]	; (80027b0 <HAL_GPIO_Init+0x2a0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d85d      	bhi.n	800263e <HAL_GPIO_Init+0x12e>
 8002582:	2b12      	cmp	r3, #18
 8002584:	d82a      	bhi.n	80025dc <HAL_GPIO_Init+0xcc>
 8002586:	2b12      	cmp	r3, #18
 8002588:	d859      	bhi.n	800263e <HAL_GPIO_Init+0x12e>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <HAL_GPIO_Init+0x80>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	0800260b 	.word	0x0800260b
 8002594:	080025e5 	.word	0x080025e5
 8002598:	080025f7 	.word	0x080025f7
 800259c:	08002639 	.word	0x08002639
 80025a0:	0800263f 	.word	0x0800263f
 80025a4:	0800263f 	.word	0x0800263f
 80025a8:	0800263f 	.word	0x0800263f
 80025ac:	0800263f 	.word	0x0800263f
 80025b0:	0800263f 	.word	0x0800263f
 80025b4:	0800263f 	.word	0x0800263f
 80025b8:	0800263f 	.word	0x0800263f
 80025bc:	0800263f 	.word	0x0800263f
 80025c0:	0800263f 	.word	0x0800263f
 80025c4:	0800263f 	.word	0x0800263f
 80025c8:	0800263f 	.word	0x0800263f
 80025cc:	0800263f 	.word	0x0800263f
 80025d0:	0800263f 	.word	0x0800263f
 80025d4:	080025ed 	.word	0x080025ed
 80025d8:	08002601 	.word	0x08002601
 80025dc:	4a75      	ldr	r2, [pc, #468]	; (80027b4 <HAL_GPIO_Init+0x2a4>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025e2:	e02c      	b.n	800263e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	623b      	str	r3, [r7, #32]
          break;
 80025ea:	e029      	b.n	8002640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	3304      	adds	r3, #4
 80025f2:	623b      	str	r3, [r7, #32]
          break;
 80025f4:	e024      	b.n	8002640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	3308      	adds	r3, #8
 80025fc:	623b      	str	r3, [r7, #32]
          break;
 80025fe:	e01f      	b.n	8002640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	330c      	adds	r3, #12
 8002606:	623b      	str	r3, [r7, #32]
          break;
 8002608:	e01a      	b.n	8002640 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002612:	2304      	movs	r3, #4
 8002614:	623b      	str	r3, [r7, #32]
          break;
 8002616:	e013      	b.n	8002640 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002620:	2308      	movs	r3, #8
 8002622:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	611a      	str	r2, [r3, #16]
          break;
 800262a:	e009      	b.n	8002640 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800262c:	2308      	movs	r3, #8
 800262e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	615a      	str	r2, [r3, #20]
          break;
 8002636:	e003      	b.n	8002640 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002638:	2300      	movs	r3, #0
 800263a:	623b      	str	r3, [r7, #32]
          break;
 800263c:	e000      	b.n	8002640 <HAL_GPIO_Init+0x130>
          break;
 800263e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2bff      	cmp	r3, #255	; 0xff
 8002644:	d801      	bhi.n	800264a <HAL_GPIO_Init+0x13a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	e001      	b.n	800264e <HAL_GPIO_Init+0x13e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3304      	adds	r3, #4
 800264e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2bff      	cmp	r3, #255	; 0xff
 8002654:	d802      	bhi.n	800265c <HAL_GPIO_Init+0x14c>
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	e002      	b.n	8002662 <HAL_GPIO_Init+0x152>
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	3b08      	subs	r3, #8
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	210f      	movs	r1, #15
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	401a      	ands	r2, r3
 8002674:	6a39      	ldr	r1, [r7, #32]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	431a      	orrs	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80c1 	beq.w	8002812 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002690:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <HAL_GPIO_Init+0x2a8>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a48      	ldr	r2, [pc, #288]	; (80027b8 <HAL_GPIO_Init+0x2a8>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b46      	ldr	r3, [pc, #280]	; (80027b8 <HAL_GPIO_Init+0x2a8>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026a8:	4a44      	ldr	r2, [pc, #272]	; (80027bc <HAL_GPIO_Init+0x2ac>)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	220f      	movs	r2, #15
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4013      	ands	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a3c      	ldr	r2, [pc, #240]	; (80027c0 <HAL_GPIO_Init+0x2b0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d01f      	beq.n	8002714 <HAL_GPIO_Init+0x204>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a3b      	ldr	r2, [pc, #236]	; (80027c4 <HAL_GPIO_Init+0x2b4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d019      	beq.n	8002710 <HAL_GPIO_Init+0x200>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a3a      	ldr	r2, [pc, #232]	; (80027c8 <HAL_GPIO_Init+0x2b8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d013      	beq.n	800270c <HAL_GPIO_Init+0x1fc>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a39      	ldr	r2, [pc, #228]	; (80027cc <HAL_GPIO_Init+0x2bc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00d      	beq.n	8002708 <HAL_GPIO_Init+0x1f8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a38      	ldr	r2, [pc, #224]	; (80027d0 <HAL_GPIO_Init+0x2c0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d007      	beq.n	8002704 <HAL_GPIO_Init+0x1f4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a37      	ldr	r2, [pc, #220]	; (80027d4 <HAL_GPIO_Init+0x2c4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d101      	bne.n	8002700 <HAL_GPIO_Init+0x1f0>
 80026fc:	2305      	movs	r3, #5
 80026fe:	e00a      	b.n	8002716 <HAL_GPIO_Init+0x206>
 8002700:	2306      	movs	r3, #6
 8002702:	e008      	b.n	8002716 <HAL_GPIO_Init+0x206>
 8002704:	2304      	movs	r3, #4
 8002706:	e006      	b.n	8002716 <HAL_GPIO_Init+0x206>
 8002708:	2303      	movs	r3, #3
 800270a:	e004      	b.n	8002716 <HAL_GPIO_Init+0x206>
 800270c:	2302      	movs	r3, #2
 800270e:	e002      	b.n	8002716 <HAL_GPIO_Init+0x206>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_GPIO_Init+0x206>
 8002714:	2300      	movs	r3, #0
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	f002 0203 	and.w	r2, r2, #3
 800271c:	0092      	lsls	r2, r2, #2
 800271e:	4093      	lsls	r3, r2
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002726:	4925      	ldr	r1, [pc, #148]	; (80027bc <HAL_GPIO_Init+0x2ac>)
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_GPIO_Init+0x2c8>)
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	4924      	ldr	r1, [pc, #144]	; (80027d8 <HAL_GPIO_Init+0x2c8>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800274e:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_GPIO_Init+0x2c8>)
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	43db      	mvns	r3, r3
 8002756:	4920      	ldr	r1, [pc, #128]	; (80027d8 <HAL_GPIO_Init+0x2c8>)
 8002758:	4013      	ands	r3, r2
 800275a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d006      	beq.n	8002776 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_GPIO_Init+0x2c8>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	491a      	ldr	r1, [pc, #104]	; (80027d8 <HAL_GPIO_Init+0x2c8>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	60cb      	str	r3, [r1, #12]
 8002774:	e006      	b.n	8002784 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_GPIO_Init+0x2c8>)
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	43db      	mvns	r3, r3
 800277e:	4916      	ldr	r1, [pc, #88]	; (80027d8 <HAL_GPIO_Init+0x2c8>)
 8002780:	4013      	ands	r3, r2
 8002782:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d025      	beq.n	80027dc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_GPIO_Init+0x2c8>)
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4910      	ldr	r1, [pc, #64]	; (80027d8 <HAL_GPIO_Init+0x2c8>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
 800279c:	e025      	b.n	80027ea <HAL_GPIO_Init+0x2da>
 800279e:	bf00      	nop
 80027a0:	10320000 	.word	0x10320000
 80027a4:	10310000 	.word	0x10310000
 80027a8:	10220000 	.word	0x10220000
 80027ac:	10210000 	.word	0x10210000
 80027b0:	10120000 	.word	0x10120000
 80027b4:	10110000 	.word	0x10110000
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40010800 	.word	0x40010800
 80027c4:	40010c00 	.word	0x40010c00
 80027c8:	40011000 	.word	0x40011000
 80027cc:	40011400 	.word	0x40011400
 80027d0:	40011800 	.word	0x40011800
 80027d4:	40011c00 	.word	0x40011c00
 80027d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_GPIO_Init+0x324>)
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	4913      	ldr	r1, [pc, #76]	; (8002834 <HAL_GPIO_Init+0x324>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d006      	beq.n	8002804 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027f6:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <HAL_GPIO_Init+0x324>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	490e      	ldr	r1, [pc, #56]	; (8002834 <HAL_GPIO_Init+0x324>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
 8002802:	e006      	b.n	8002812 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_GPIO_Init+0x324>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	43db      	mvns	r3, r3
 800280c:	4909      	ldr	r1, [pc, #36]	; (8002834 <HAL_GPIO_Init+0x324>)
 800280e:	4013      	ands	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	3301      	adds	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	f47f ae7e 	bne.w	8002524 <HAL_GPIO_Init+0x14>
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	372c      	adds	r7, #44	; 0x2c
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	e001      	b.n	800285a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	807b      	strh	r3, [r7, #2]
 8002872:	4613      	mov	r3, r2
 8002874:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002876:	787b      	ldrb	r3, [r7, #1]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287c:	887a      	ldrh	r2, [r7, #2]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002882:	e003      	b.n	800288c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	041a      	lsls	r2, r3, #16
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	611a      	str	r2, [r3, #16]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
	...

08002898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e12b      	b.n	8002b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fd98 	bl	80013f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028fc:	f000 fce6 	bl	80032cc <HAL_RCC_GetPCLK1Freq>
 8002900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4a81      	ldr	r2, [pc, #516]	; (8002b0c <HAL_I2C_Init+0x274>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d807      	bhi.n	800291c <HAL_I2C_Init+0x84>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a80      	ldr	r2, [pc, #512]	; (8002b10 <HAL_I2C_Init+0x278>)
 8002910:	4293      	cmp	r3, r2
 8002912:	bf94      	ite	ls
 8002914:	2301      	movls	r3, #1
 8002916:	2300      	movhi	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e006      	b.n	800292a <HAL_I2C_Init+0x92>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a7d      	ldr	r2, [pc, #500]	; (8002b14 <HAL_I2C_Init+0x27c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	bf94      	ite	ls
 8002924:	2301      	movls	r3, #1
 8002926:	2300      	movhi	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0e7      	b.n	8002b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4a78      	ldr	r2, [pc, #480]	; (8002b18 <HAL_I2C_Init+0x280>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	0c9b      	lsrs	r3, r3, #18
 800293c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a6a      	ldr	r2, [pc, #424]	; (8002b0c <HAL_I2C_Init+0x274>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d802      	bhi.n	800296c <HAL_I2C_Init+0xd4>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3301      	adds	r3, #1
 800296a:	e009      	b.n	8002980 <HAL_I2C_Init+0xe8>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	4a69      	ldr	r2, [pc, #420]	; (8002b1c <HAL_I2C_Init+0x284>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	3301      	adds	r3, #1
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	430b      	orrs	r3, r1
 8002986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	495c      	ldr	r1, [pc, #368]	; (8002b0c <HAL_I2C_Init+0x274>)
 800299c:	428b      	cmp	r3, r1
 800299e:	d819      	bhi.n	80029d4 <HAL_I2C_Init+0x13c>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1e59      	subs	r1, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ae:	1c59      	adds	r1, r3, #1
 80029b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029b4:	400b      	ands	r3, r1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_I2C_Init+0x138>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1e59      	subs	r1, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ce:	e051      	b.n	8002a74 <HAL_I2C_Init+0x1dc>
 80029d0:	2304      	movs	r3, #4
 80029d2:	e04f      	b.n	8002a74 <HAL_I2C_Init+0x1dc>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d111      	bne.n	8002a00 <HAL_I2C_Init+0x168>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1e58      	subs	r0, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6859      	ldr	r1, [r3, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	440b      	add	r3, r1
 80029ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e012      	b.n	8002a26 <HAL_I2C_Init+0x18e>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	0099      	lsls	r1, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Init+0x196>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e022      	b.n	8002a74 <HAL_I2C_Init+0x1dc>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10e      	bne.n	8002a54 <HAL_I2C_Init+0x1bc>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1e58      	subs	r0, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	440b      	add	r3, r1
 8002a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a52:	e00f      	b.n	8002a74 <HAL_I2C_Init+0x1dc>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1e58      	subs	r0, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	0099      	lsls	r1, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	6809      	ldr	r1, [r1, #0]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6911      	ldr	r1, [r2, #16]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68d2      	ldr	r2, [r2, #12]
 8002aae:	4311      	orrs	r1, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	000186a0 	.word	0x000186a0
 8002b10:	001e847f 	.word	0x001e847f
 8002b14:	003d08ff 	.word	0x003d08ff
 8002b18:	431bde83 	.word	0x431bde83
 8002b1c:	10624dd3 	.word	0x10624dd3

08002b20 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	420e0020 	.word	0x420e0020

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e272      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8087 	beq.w	8002c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b58:	4b92      	ldr	r3, [pc, #584]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d00c      	beq.n	8002b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b64:	4b8f      	ldr	r3, [pc, #572]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d112      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
 8002b70:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7e:	4b89      	ldr	r3, [pc, #548]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x12c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d168      	bne.n	8002c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e24c      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x76>
 8002ba0:	4b80      	ldr	r3, [pc, #512]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a7f      	ldr	r2, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e02e      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b7b      	ldr	r3, [pc, #492]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7a      	ldr	r2, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a77      	ldr	r2, [pc, #476]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xbc>
 8002bda:	4b72      	ldr	r3, [pc, #456]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a71      	ldr	r2, [pc, #452]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6f      	ldr	r3, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6e      	ldr	r2, [pc, #440]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bf4:	4b6b      	ldr	r3, [pc, #428]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6a      	ldr	r2, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a67      	ldr	r2, [pc, #412]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fe2e 	bl	8001874 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fe2a 	bl	8001874 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e200      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe4>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fe1a 	bl	8001874 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe fe16 	bl	8001874 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1ec      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x10c>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c72:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c7e:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1c0      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4939      	ldr	r1, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fe fdcf 	bl	8001874 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe fdcb 	bl	8001874 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1a1      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4927      	ldr	r1, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fdae 	bl	8001874 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fdaa 	bl	8001874 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e180      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03a      	beq.n	8002dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7fe fd8e 	bl	8001874 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fd8a 	bl	8001874 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e160      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f000 fafe 	bl	800337c <RCC_Delay>
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fe fd74 	bl	8001874 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8e:	e00f      	b.n	8002db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe fd70 	bl	8001874 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e146      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	42420000 	.word	0x42420000
 8002dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b92      	ldr	r3, [pc, #584]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e9      	bne.n	8002d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a6 	beq.w	8002f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b8b      	ldr	r3, [pc, #556]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4b88      	ldr	r3, [pc, #544]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a87      	ldr	r2, [pc, #540]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]
 8002de6:	4b85      	ldr	r3, [pc, #532]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b82      	ldr	r3, [pc, #520]	; (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d118      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e02:	4b7f      	ldr	r3, [pc, #508]	; (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a7e      	ldr	r2, [pc, #504]	; (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fd31 	bl	8001874 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e16:	f7fe fd2d 	bl	8001874 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b64      	cmp	r3, #100	; 0x64
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e103      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	4b75      	ldr	r3, [pc, #468]	; (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x312>
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4a6e      	ldr	r2, [pc, #440]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6213      	str	r3, [r2, #32]
 8002e48:	e02d      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x334>
 8002e52:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a69      	ldr	r2, [pc, #420]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	6213      	str	r3, [r2, #32]
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a66      	ldr	r2, [pc, #408]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	6213      	str	r3, [r2, #32]
 8002e6a:	e01c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_OscConfig+0x356>
 8002e74:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4a60      	ldr	r2, [pc, #384]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	4b5e      	ldr	r3, [pc, #376]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a5d      	ldr	r2, [pc, #372]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e8e:	4b5b      	ldr	r3, [pc, #364]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a5a      	ldr	r2, [pc, #360]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	4b58      	ldr	r3, [pc, #352]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a57      	ldr	r2, [pc, #348]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d015      	beq.n	8002eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe fce1 	bl	8001874 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fe fcdd 	bl	8001874 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0b1      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ee      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7fe fccb 	bl	8001874 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fe fcc7 	bl	8001874 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e09b      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8087 	beq.w	800302e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d061      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d146      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b33      	ldr	r3, [pc, #204]	; (8003004 <HAL_RCC_OscConfig+0x4cc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fc9b 	bl	8001874 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe fc97 	bl	8001874 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e06d      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d108      	bne.n	8002f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4921      	ldr	r1, [pc, #132]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7c:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a19      	ldr	r1, [r3, #32]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	491b      	ldr	r1, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fc6b 	bl	8001874 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fe fc67 	bl	8001874 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e03d      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x46a>
 8002fc0:	e035      	b.n	800302e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_RCC_OscConfig+0x4cc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fc54 	bl	8001874 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fc50 	bl	8001874 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e026      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x498>
 8002fee:	e01e      	b.n	800302e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e019      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
 8003004:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x500>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	429a      	cmp	r2, r3
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000

0800303c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0d0      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003050:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d910      	bls.n	8003080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b67      	ldr	r3, [pc, #412]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0207 	bic.w	r2, r3, #7
 8003066:	4965      	ldr	r1, [pc, #404]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b63      	ldr	r3, [pc, #396]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0b8      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003098:	4b59      	ldr	r3, [pc, #356]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a58      	ldr	r2, [pc, #352]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b0:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a52      	ldr	r2, [pc, #328]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030bc:	4b50      	ldr	r3, [pc, #320]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	494d      	ldr	r1, [pc, #308]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d040      	beq.n	800315c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d115      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e07f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e073      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06b      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311a:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4936      	ldr	r1, [pc, #216]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312c:	f7fe fba2 	bl	8001874 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	e00a      	b.n	800314a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7fe fb9e 	bl	8001874 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e053      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 020c 	and.w	r2, r3, #12
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	429a      	cmp	r2, r3
 800315a:	d1eb      	bne.n	8003134 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d210      	bcs.n	800318c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b24      	ldr	r3, [pc, #144]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 0207 	bic.w	r2, r3, #7
 8003172:	4922      	ldr	r1, [pc, #136]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e032      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4916      	ldr	r1, [pc, #88]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	490e      	ldr	r1, [pc, #56]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ca:	f000 f821 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	490a      	ldr	r1, [pc, #40]	; (8003204 <HAL_RCC_ClockConfig+0x1c8>)
 80031dc:	5ccb      	ldrb	r3, [r1, r3]
 80031de:	fa22 f303 	lsr.w	r3, r2, r3
 80031e2:	4a09      	ldr	r2, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1cc>)
 80031e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_ClockConfig+0x1d0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe fa50 	bl	8001690 <HAL_InitTick>

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40022000 	.word	0x40022000
 8003200:	40021000 	.word	0x40021000
 8003204:	0800824c 	.word	0x0800824c
 8003208:	20000004 	.word	0x20000004
 800320c:	20000008 	.word	0x20000008

08003210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800322a:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b04      	cmp	r3, #4
 8003238:	d002      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x30>
 800323a:	2b08      	cmp	r3, #8
 800323c:	d003      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0x36>
 800323e:	e027      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003242:	613b      	str	r3, [r7, #16]
      break;
 8003244:	e027      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	0c9b      	lsrs	r3, r3, #18
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	4a17      	ldr	r2, [pc, #92]	; (80032ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003250:	5cd3      	ldrb	r3, [r2, r3]
 8003252:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d010      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	0c5b      	lsrs	r3, r3, #17
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800326a:	5cd3      	ldrb	r3, [r2, r3]
 800326c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003272:	fb03 f202 	mul.w	r2, r3, r2
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	e004      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	613b      	str	r3, [r7, #16]
      break;
 800328e:	e002      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003292:	613b      	str	r3, [r7, #16]
      break;
 8003294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003296:	693b      	ldr	r3, [r7, #16]
}
 8003298:	4618      	mov	r0, r3
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	007a1200 	.word	0x007a1200
 80032ac:	08008264 	.word	0x08008264
 80032b0:	08008274 	.word	0x08008274
 80032b4:	003d0900 	.word	0x003d0900

080032b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032bc:	4b02      	ldr	r3, [pc, #8]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	20000004 	.word	0x20000004

080032cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d0:	f7ff fff2 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	0a1b      	lsrs	r3, r3, #8
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4903      	ldr	r1, [pc, #12]	; (80032f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	0800825c 	.word	0x0800825c

080032f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032f8:	f7ff ffde 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	0adb      	lsrs	r3, r3, #11
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4903      	ldr	r1, [pc, #12]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021000 	.word	0x40021000
 8003318:	0800825c 	.word	0x0800825c

0800331c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	220f      	movs	r2, #15
 800332a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_RCC_GetClockConfig+0x58>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 0203 	and.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_RCC_GetClockConfig+0x58>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCC_GetClockConfig+0x58>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003350:	4b08      	ldr	r3, [pc, #32]	; (8003374 <HAL_RCC_GetClockConfig+0x58>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	08db      	lsrs	r3, r3, #3
 8003356:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40021000 	.word	0x40021000
 8003378:	40022000 	.word	0x40022000

0800337c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <RCC_Delay+0x34>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <RCC_Delay+0x38>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0a5b      	lsrs	r3, r3, #9
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003398:	bf00      	nop
  }
  while (Delay --);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1e5a      	subs	r2, r3, #1
 800339e:	60fa      	str	r2, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f9      	bne.n	8003398 <RCC_Delay+0x1c>
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	20000004 	.word	0x20000004
 80033b4:	10624dd3 	.word	0x10624dd3

080033b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d07d      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d8:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e4:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4a4b      	ldr	r2, [pc, #300]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ee:	61d3      	str	r3, [r2, #28]
 80033f0:	4b49      	ldr	r3, [pc, #292]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fc:	2301      	movs	r3, #1
 80033fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d118      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340c:	4b43      	ldr	r3, [pc, #268]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a42      	ldr	r2, [pc, #264]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003416:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003418:	f7fe fa2c 	bl	8001874 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	e008      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003420:	f7fe fa28 	bl	8001874 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b64      	cmp	r3, #100	; 0x64
 800342c:	d901      	bls.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e06d      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	4b3a      	ldr	r3, [pc, #232]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800343e:	4b36      	ldr	r3, [pc, #216]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d02e      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	429a      	cmp	r2, r3
 800345a:	d027      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800345c:	4b2e      	ldr	r3, [pc, #184]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003464:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003466:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800346c:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003472:	4a29      	ldr	r2, [pc, #164]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d014      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7fe f9f7 	bl	8001874 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe f9f3 	bl	8001874 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e036      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4917      	ldr	r1, [pc, #92]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034dc:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	490b      	ldr	r1, [pc, #44]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034fa:	4b07      	ldr	r3, [pc, #28]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	4904      	ldr	r1, [pc, #16]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003508:	4313      	orrs	r3, r2
 800350a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
 8003520:	42420440 	.word	0x42420440

08003524 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	2300      	movs	r3, #0
 800353e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	2b0f      	cmp	r3, #15
 8003546:	f200 80af 	bhi.w	80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800354a:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003627 	.word	0x08003627
 8003554:	0800368d 	.word	0x0800368d
 8003558:	080036a9 	.word	0x080036a9
 800355c:	08003617 	.word	0x08003617
 8003560:	080036a9 	.word	0x080036a9
 8003564:	080036a9 	.word	0x080036a9
 8003568:	080036a9 	.word	0x080036a9
 800356c:	0800361f 	.word	0x0800361f
 8003570:	080036a9 	.word	0x080036a9
 8003574:	080036a9 	.word	0x080036a9
 8003578:	080036a9 	.word	0x080036a9
 800357c:	080036a9 	.word	0x080036a9
 8003580:	080036a9 	.word	0x080036a9
 8003584:	080036a9 	.word	0x080036a9
 8003588:	080036a9 	.word	0x080036a9
 800358c:	08003591 	.word	0x08003591
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003590:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003596:	4b49      	ldr	r3, [pc, #292]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8084 	beq.w	80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	0c9b      	lsrs	r3, r3, #18
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	4a44      	ldr	r2, [pc, #272]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d015      	beq.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035bc:	4b3f      	ldr	r3, [pc, #252]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	0c5b      	lsrs	r3, r3, #17
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	4a3f      	ldr	r2, [pc, #252]	; (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80035c8:	5cd3      	ldrb	r3, [r2, r3]
 80035ca:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80035d6:	4a3c      	ldr	r2, [pc, #240]	; (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fbb2 f2f3 	udiv	r2, r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	61fb      	str	r3, [r7, #28]
 80035e6:	e004      	b.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4a38      	ldr	r2, [pc, #224]	; (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80035ec:	fb02 f303 	mul.w	r3, r2, r3
 80035f0:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80035f2:	4b32      	ldr	r3, [pc, #200]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035fe:	d102      	bne.n	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003604:	e052      	b.n	80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4a31      	ldr	r2, [pc, #196]	; (80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	61bb      	str	r3, [r7, #24]
      break;
 8003614:	e04a      	b.n	80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003616:	f7ff fdfb 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 800361a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800361c:	e049      	b.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800361e:	f7ff fdf7 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 8003622:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003624:	e045      	b.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003626:	4b25      	ldr	r3, [pc, #148]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003636:	d108      	bne.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8003642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e01f      	b.n	800368a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d109      	bne.n	800366a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003656:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8003662:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	e00f      	b.n	800368a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003674:	d11c      	bne.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d016      	beq.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8003682:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003686:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003688:	e012      	b.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800368a:	e011      	b.n	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800368c:	f7ff fe32 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	0b9b      	lsrs	r3, r3, #14
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	3301      	adds	r3, #1
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	61bb      	str	r3, [r7, #24]
      break;
 80036a6:	e004      	b.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80036a8:	bf00      	nop
 80036aa:	e002      	b.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80036ac:	bf00      	nop
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80036b0:	bf00      	nop
    }
  }
  return (frequency);
 80036b2:	69bb      	ldr	r3, [r7, #24]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08008278 	.word	0x08008278
 80036c4:	08008288 	.word	0x08008288
 80036c8:	007a1200 	.word	0x007a1200
 80036cc:	003d0900 	.word	0x003d0900
 80036d0:	aaaaaaab 	.word	0xaaaaaaab

080036d4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e07a      	b.n	80037e0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7c5b      	ldrb	r3, [r3, #17]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d105      	bne.n	8003700 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd feca 	bl	8001494 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f9be 	bl	8003a88 <HAL_RTC_WaitForSynchro>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2204      	movs	r2, #4
 8003716:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e061      	b.n	80037e0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fa77 	bl	8003c10 <RTC_EnterInitMode>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2204      	movs	r2, #4
 800372c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e056      	b.n	80037e0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0207 	bic.w	r2, r2, #7
 8003740:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800374a:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_RTC_Init+0x114>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <HAL_RTC_Init+0x114>)
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003756:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <HAL_RTC_Init+0x114>)
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	4921      	ldr	r1, [pc, #132]	; (80037e8 <HAL_RTC_Init+0x114>)
 8003764:	4313      	orrs	r3, r2
 8003766:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d003      	beq.n	800377a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e00e      	b.n	8003798 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800377a:	2001      	movs	r0, #1
 800377c:	f7ff fed2 	bl	8003524 <HAL_RCCEx_GetPeriphCLKFreq>
 8003780:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2204      	movs	r2, #4
 800378c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e026      	b.n	80037e0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3b01      	subs	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	0c1a      	lsrs	r2, r3, #16
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f002 020f 	and.w	r2, r2, #15
 80037a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	b292      	uxth	r2, r2
 80037ae:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fa55 	bl	8003c60 <RTC_ExitInitMode>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2204      	movs	r2, #4
 80037c0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e00c      	b.n	80037e0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80037de:	2300      	movs	r3, #0
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40006c00 	.word	0x40006c00

080037ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_RTC_SetTime+0x20>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e080      	b.n	8003912 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	7c1b      	ldrb	r3, [r3, #16]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_RTC_SetTime+0x30>
 8003818:	2302      	movs	r3, #2
 800381a:	e07a      	b.n	8003912 <HAL_RTC_SetTime+0x126>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2202      	movs	r2, #2
 8003826:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d113      	bne.n	8003856 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003838:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	785b      	ldrb	r3, [r3, #1]
 8003840:	4619      	mov	r1, r3
 8003842:	460b      	mov	r3, r1
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a5b      	subs	r3, r3, r1
 8003848:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800384a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003850:	4413      	add	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e01e      	b.n	8003894 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fa28 	bl	8003cb0 <RTC_Bcd2ToByte>
 8003860:	4603      	mov	r3, r0
 8003862:	461a      	mov	r2, r3
 8003864:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003868:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	785b      	ldrb	r3, [r3, #1]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fa1d 	bl	8003cb0 <RTC_Bcd2ToByte>
 8003876:	4603      	mov	r3, r0
 8003878:	461a      	mov	r2, r3
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003882:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	789b      	ldrb	r3, [r3, #2]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fa11 	bl	8003cb0 <RTC_Bcd2ToByte>
 800388e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003890:	4423      	add	r3, r4
 8003892:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003894:	6979      	ldr	r1, [r7, #20]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f953 	bl	8003b42 <RTC_WriteTimeCounter>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2204      	movs	r2, #4
 80038a6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e02f      	b.n	8003912 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0205 	bic.w	r2, r2, #5
 80038c0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f964 	bl	8003b90 <RTC_ReadAlarmCounter>
 80038c8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d018      	beq.n	8003904 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d214      	bcs.n	8003904 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80038e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80038e4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80038e6:	6939      	ldr	r1, [r7, #16]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f96a 	bl	8003bc2 <RTC_WriteAlarmCounter>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2204      	movs	r2, #4
 80038f8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e006      	b.n	8003912 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003910:	2300      	movs	r3, #0
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd90      	pop	{r4, r7, pc}
	...

0800391c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_RTC_SetDate+0x24>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e097      	b.n	8003a74 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	7c1b      	ldrb	r3, [r3, #16]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_RTC_SetDate+0x34>
 800394c:	2302      	movs	r3, #2
 800394e:	e091      	b.n	8003a74 <HAL_RTC_SetDate+0x158>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2202      	movs	r2, #2
 800395a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	78da      	ldrb	r2, [r3, #3]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	785a      	ldrb	r2, [r3, #1]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	789a      	ldrb	r2, [r3, #2]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	739a      	strb	r2, [r3, #14]
 800397a:	e01a      	b.n	80039b2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	78db      	ldrb	r3, [r3, #3]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 f995 	bl	8003cb0 <RTC_Bcd2ToByte>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	785b      	ldrb	r3, [r3, #1]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f98c 	bl	8003cb0 <RTC_Bcd2ToByte>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	789b      	ldrb	r3, [r3, #2]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f983 	bl	8003cb0 <RTC_Bcd2ToByte>
 80039aa:	4603      	mov	r3, r0
 80039ac:	461a      	mov	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	7bdb      	ldrb	r3, [r3, #15]
 80039b6:	4618      	mov	r0, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	7b59      	ldrb	r1, [r3, #13]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	7b9b      	ldrb	r3, [r3, #14]
 80039c0:	461a      	mov	r2, r3
 80039c2:	f000 f993 	bl	8003cec <RTC_WeekDayNum>
 80039c6:	4603      	mov	r3, r0
 80039c8:	461a      	mov	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	7b1a      	ldrb	r2, [r3, #12]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f883 	bl	8003ae2 <RTC_ReadTimeCounter>
 80039dc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4a26      	ldr	r2, [pc, #152]	; (8003a7c <HAL_RTC_SetDate+0x160>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0adb      	lsrs	r3, r3, #11
 80039e8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b18      	cmp	r3, #24
 80039ee:	d93a      	bls.n	8003a66 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4a23      	ldr	r2, [pc, #140]	; (8003a80 <HAL_RTC_SetDate+0x164>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	4a22      	ldr	r2, [pc, #136]	; (8003a84 <HAL_RTC_SetDate+0x168>)
 80039fc:	fb02 f303 	mul.w	r3, r2, r3
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003a06:	69f9      	ldr	r1, [r7, #28]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f89a 	bl	8003b42 <RTC_WriteTimeCounter>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2204      	movs	r2, #4
 8003a18:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e027      	b.n	8003a74 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f8b3 	bl	8003b90 <RTC_ReadAlarmCounter>
 8003a2a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d018      	beq.n	8003a66 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d214      	bcs.n	8003a66 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003a42:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a46:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003a48:	69b9      	ldr	r1, [r7, #24]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f8b9 	bl	8003bc2 <RTC_WriteAlarmCounter>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e006      	b.n	8003a74 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	91a2b3c5 	.word	0x91a2b3c5
 8003a80:	aaaaaaab 	.word	0xaaaaaaab
 8003a84:	00015180 	.word	0x00015180

08003a88 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e01d      	b.n	8003ada <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0208 	bic.w	r2, r2, #8
 8003aac:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003aae:	f7fd fee1 	bl	8001874 <HAL_GetTick>
 8003ab2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003ab4:	e009      	b.n	8003aca <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ab6:	f7fd fedd 	bl	8001874 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac4:	d901      	bls.n	8003aca <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e007      	b.n	8003ada <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0ee      	beq.n	8003ab6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b087      	sub	sp, #28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	827b      	strh	r3, [r7, #18]
 8003aee:	2300      	movs	r3, #0
 8003af0:	823b      	strh	r3, [r7, #16]
 8003af2:	2300      	movs	r3, #0
 8003af4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003b12:	8a7a      	ldrh	r2, [r7, #18]
 8003b14:	8a3b      	ldrh	r3, [r7, #16]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d008      	beq.n	8003b2c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003b1a:	8a3b      	ldrh	r3, [r7, #16]
 8003b1c:	041a      	lsls	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	e004      	b.n	8003b36 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003b2c:	8a7b      	ldrh	r3, [r7, #18]
 8003b2e:	041a      	lsls	r2, r3, #16
 8003b30:	89fb      	ldrh	r3, [r7, #14]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003b36:	697b      	ldr	r3, [r7, #20]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f85d 	bl	8003c10 <RTC_EnterInitMode>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	e011      	b.n	8003b86 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	0c12      	lsrs	r2, r2, #16
 8003b6a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	b292      	uxth	r2, r2
 8003b74:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f872 	bl	8003c60 <RTC_ExitInitMode>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	81fb      	strh	r3, [r7, #14]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003bb0:	89fb      	ldrh	r3, [r7, #14]
 8003bb2:	041a      	lsls	r2, r3, #16
 8003bb4:	89bb      	ldrh	r3, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f81d 	bl	8003c10 <RTC_EnterInitMode>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
 8003be0:	e011      	b.n	8003c06 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	0c12      	lsrs	r2, r2, #16
 8003bea:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	b292      	uxth	r2, r2
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f832 	bl	8003c60 <RTC_ExitInitMode>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003c1c:	f7fd fe2a 	bl	8001874 <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c22:	e009      	b.n	8003c38 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c24:	f7fd fe26 	bl	8001874 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c32:	d901      	bls.n	8003c38 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e00f      	b.n	8003c58 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0ee      	beq.n	8003c24 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0210 	orr.w	r2, r2, #16
 8003c54:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0210 	bic.w	r2, r2, #16
 8003c7a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003c7c:	f7fd fdfa 	bl	8001874 <HAL_GetTick>
 8003c80:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c82:	e009      	b.n	8003c98 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c84:	f7fd fdf6 	bl	8001874 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c92:	d901      	bls.n	8003c98 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e007      	b.n	8003ca8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ee      	beq.n	8003c84 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	b2db      	uxtb	r3, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
	...

08003cec <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003d0a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d82d      	bhi.n	8003d6e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	4a2c      	ldr	r2, [pc, #176]	; (8003dd0 <RTC_WeekDayNum+0xe4>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	085a      	lsrs	r2, r3, #1
 8003d26:	78bb      	ldrb	r3, [r7, #2]
 8003d28:	441a      	add	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	441a      	add	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	441a      	add	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	4926      	ldr	r1, [pc, #152]	; (8003dd4 <RTC_WeekDayNum+0xe8>)
 8003d3c:	fba1 1303 	umull	r1, r3, r1, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	1ad2      	subs	r2, r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	4922      	ldr	r1, [pc, #136]	; (8003dd4 <RTC_WeekDayNum+0xe8>)
 8003d4a:	fba1 1303 	umull	r1, r3, r1, r3
 8003d4e:	09db      	lsrs	r3, r3, #7
 8003d50:	4413      	add	r3, r2
 8003d52:	1d1a      	adds	r2, r3, #4
 8003d54:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <RTC_WeekDayNum+0xec>)
 8003d56:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5a:	1ad1      	subs	r1, r2, r3
 8003d5c:	0849      	lsrs	r1, r1, #1
 8003d5e:	440b      	add	r3, r1
 8003d60:	0899      	lsrs	r1, r3, #2
 8003d62:	460b      	mov	r3, r1
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	1a5b      	subs	r3, r3, r1
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	e029      	b.n	8003dc2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <RTC_WeekDayNum+0xe4>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	085a      	lsrs	r2, r3, #1
 8003d82:	78bb      	ldrb	r3, [r7, #2]
 8003d84:	441a      	add	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	441a      	add	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	089b      	lsrs	r3, r3, #2
 8003d8e:	441a      	add	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4910      	ldr	r1, [pc, #64]	; (8003dd4 <RTC_WeekDayNum+0xe8>)
 8003d94:	fba1 1303 	umull	r1, r3, r1, r3
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	1ad2      	subs	r2, r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	490d      	ldr	r1, [pc, #52]	; (8003dd4 <RTC_WeekDayNum+0xe8>)
 8003da0:	fba1 1303 	umull	r1, r3, r1, r3
 8003da4:	09db      	lsrs	r3, r3, #7
 8003da6:	4413      	add	r3, r2
 8003da8:	1c9a      	adds	r2, r3, #2
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <RTC_WeekDayNum+0xec>)
 8003dac:	fba3 1302 	umull	r1, r3, r3, r2
 8003db0:	1ad1      	subs	r1, r2, r3
 8003db2:	0849      	lsrs	r1, r1, #1
 8003db4:	440b      	add	r3, r1
 8003db6:	0899      	lsrs	r1, r3, #2
 8003db8:	460b      	mov	r3, r1
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	1a5b      	subs	r3, r3, r1
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	b2db      	uxtb	r3, r3
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	38e38e39 	.word	0x38e38e39
 8003dd4:	51eb851f 	.word	0x51eb851f
 8003dd8:	24924925 	.word	0x24924925

08003ddc <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d027      	beq.n	8003e42 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f824 	bl	8003e5c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0204 	mvn.w	r2, #4
 8003e1c:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	745a      	strb	r2, [r3, #17]
 8003e24:	e005      	b.n	8003e32 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f80f 	bl	8003e4a <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e076      	b.n	8003f6e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d108      	bne.n	8003e9a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e90:	d009      	beq.n	8003ea6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	61da      	str	r2, [r3, #28]
 8003e98:	e005      	b.n	8003ea6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d106      	bne.n	8003ec6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fd fb13 	bl	80014ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003edc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	ea42 0103 	orr.w	r1, r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	0c1a      	lsrs	r2, r3, #16
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f002 0204 	and.w	r2, r2, #4
 8003f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d002      	beq.n	8003f9c <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
 8003f98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f9a:	e0a2      	b.n	80040e2 <HAL_SPI_Receive_DMA+0x16a>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d110      	bne.n	8003fc6 <HAL_SPI_Receive_DMA+0x4e>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fac:	d10b      	bne.n	8003fc6 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f89f 	bl	8004100 <HAL_SPI_TransmitReceive_DMA>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	e092      	b.n	80040ec <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_SPI_Receive_DMA+0x5c>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e08b      	b.n	80040ec <HAL_SPI_Receive_DMA+0x174>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_SPI_Receive_DMA+0x70>
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fec:	e079      	b.n	80040e2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	88fa      	ldrh	r2, [r7, #6]
 8004006:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402e:	d10f      	bne.n	8004050 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800404e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004054:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <HAL_SPI_Receive_DMA+0x17c>)
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <HAL_SPI_Receive_DMA+0x180>)
 800405e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <HAL_SPI_Receive_DMA+0x184>)
 8004066:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406c:	2200      	movs	r2, #0
 800406e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	4619      	mov	r1, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004086:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004088:	f7fd ff78 	bl	8001f7c <HAL_DMA_Start_IT>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f043 0210 	orr.w	r2, r3, #16
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]

    goto error;
 80040a2:	e01e      	b.n	80040e2 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d007      	beq.n	80040c2 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0220 	orr.w	r2, r2, #32
 80040d0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	08004471 	.word	0x08004471
 80040f8:	0800433d 	.word	0x0800433d
 80040fc:	080044a9 	.word	0x080044a9

08004100 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_SPI_TransmitReceive_DMA+0x20>
 800411c:	2302      	movs	r3, #2
 800411e:	e0db      	b.n	80042d8 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800412e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004136:	7dbb      	ldrb	r3, [r7, #22]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d00d      	beq.n	8004158 <HAL_SPI_TransmitReceive_DMA+0x58>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004142:	d106      	bne.n	8004152 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <HAL_SPI_TransmitReceive_DMA+0x52>
 800414c:	7dbb      	ldrb	r3, [r7, #22]
 800414e:	2b04      	cmp	r3, #4
 8004150:	d002      	beq.n	8004158 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004152:	2302      	movs	r3, #2
 8004154:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004156:	e0ba      	b.n	80042ce <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004164:	887b      	ldrh	r3, [r7, #2]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d102      	bne.n	8004170 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800416e:	e0ae      	b.n	80042ce <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b04      	cmp	r3, #4
 800417a:	d003      	beq.n	8004184 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2205      	movs	r2, #5
 8004180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	887a      	ldrh	r2, [r7, #2]
 800419a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d108      	bne.n	80041d8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	4a45      	ldr	r2, [pc, #276]	; (80042e0 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 80041cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	4a44      	ldr	r2, [pc, #272]	; (80042e4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80041d4:	629a      	str	r2, [r3, #40]	; 0x28
 80041d6:	e007      	b.n	80041e8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041dc:	4a42      	ldr	r2, [pc, #264]	; (80042e8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e4:	4a41      	ldr	r2, [pc, #260]	; (80042ec <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ec:	4a40      	ldr	r2, [pc, #256]	; (80042f0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f4:	2200      	movs	r2, #0
 80041f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	4619      	mov	r1, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004210:	f7fd feb4 	bl	8001f7c <HAL_DMA_Start_IT>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f043 0210 	orr.w	r2, r3, #16
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	75fb      	strb	r3, [r7, #23]

    goto error;
 800422a:	e050      	b.n	80042ce <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004240:	2200      	movs	r2, #0
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004248:	2200      	movs	r2, #0
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004258:	2200      	movs	r2, #0
 800425a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	4619      	mov	r1, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004272:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004274:	f7fd fe82 	bl	8001f7c <HAL_DMA_Start_IT>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	f043 0210 	orr.w	r2, r3, #16
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800428e:	e01e      	b.n	80042ce <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	d007      	beq.n	80042ae <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ac:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0220 	orr.w	r2, r2, #32
 80042bc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0202 	orr.w	r2, r2, #2
 80042cc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	08004471 	.word	0x08004471
 80042e4:	0800433d 	.word	0x0800433d
 80042e8:	0800448d 	.word	0x0800448d
 80042ec:	080043e3 	.word	0x080043e3
 80042f0:	080044a9 	.word	0x080044a9

080042f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800434a:	f7fd fa93 	bl	8001874 <HAL_GetTick>
 800434e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b20      	cmp	r3, #32
 800435c:	d03b      	beq.n	80043d6 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0220 	bic.w	r2, r2, #32
 800436c:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10d      	bne.n	8004392 <SPI_DMAReceiveCplt+0x56>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800437e:	d108      	bne.n	8004392 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0203 	bic.w	r2, r2, #3
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	e007      	b.n	80043a2 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0201 	bic.w	r2, r2, #1
 80043a0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	2164      	movs	r1, #100	; 0x64
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f926 	bl	80045f8 <SPI_EndRxTransaction>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff ffab 	bl	800432a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80043d4:	e002      	b.n	80043dc <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7fb ffec 	bl	80003b4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f0:	f7fd fa40 	bl	8001874 <HAL_GetTick>
 80043f4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b20      	cmp	r3, #32
 8004402:	d02f      	beq.n	8004464 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0220 	bic.w	r2, r2, #32
 8004412:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	2164      	movs	r1, #100	; 0x64
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f93f 	bl	800469c <SPI_EndRxTxTransaction>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004428:	f043 0220 	orr.w	r2, r3, #32
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0203 	bic.w	r2, r2, #3
 800443e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff ff64 	bl	800432a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004462:	e002      	b.n	800446a <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff ff45 	bl	80042f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff ff41 	bl	8004306 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ff3c 	bl	8004318 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0203 	bic.w	r2, r2, #3
 80044c4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	f043 0210 	orr.w	r2, r3, #16
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff ff25 	bl	800432a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	4613      	mov	r3, r2
 80044f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044f8:	f7fd f9bc 	bl	8001874 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	4413      	add	r3, r2
 8004506:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004508:	f7fd f9b4 	bl	8001874 <HAL_GetTick>
 800450c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800450e:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	015b      	lsls	r3, r3, #5
 8004514:	0d1b      	lsrs	r3, r3, #20
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	fb02 f303 	mul.w	r3, r2, r3
 800451c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800451e:	e054      	b.n	80045ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d050      	beq.n	80045ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004528:	f7fd f9a4 	bl	8001874 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	429a      	cmp	r2, r3
 8004536:	d902      	bls.n	800453e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d13d      	bne.n	80045ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800454c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004556:	d111      	bne.n	800457c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004560:	d004      	beq.n	800456c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456a:	d107      	bne.n	800457c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800457a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004584:	d10f      	bne.n	80045a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e017      	b.n	80045ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4013      	ands	r3, r2
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	bf0c      	ite	eq
 80045da:	2301      	moveq	r3, #1
 80045dc:	2300      	movne	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d19b      	bne.n	8004520 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000004 	.word	0x20000004

080045f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800460c:	d111      	bne.n	8004632 <SPI_EndRxTransaction+0x3a>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004616:	d004      	beq.n	8004622 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004620:	d107      	bne.n	8004632 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004630:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463a:	d117      	bne.n	800466c <SPI_EndRxTransaction+0x74>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004644:	d112      	bne.n	800466c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2200      	movs	r2, #0
 800464e:	2101      	movs	r1, #1
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff ff49 	bl	80044e8 <SPI_WaitFlagStateUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01a      	beq.n	8004692 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e013      	b.n	8004694 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2200      	movs	r2, #0
 8004674:	2180      	movs	r1, #128	; 0x80
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7ff ff36 	bl	80044e8 <SPI_WaitFlagStateUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004686:	f043 0220 	orr.w	r2, r3, #32
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e000      	b.n	8004694 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2200      	movs	r2, #0
 80046b0:	2180      	movs	r1, #128	; 0x80
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff ff18 	bl	80044e8 <SPI_WaitFlagStateUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	f043 0220 	orr.w	r2, r3, #32
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e000      	b.n	80046d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e041      	b.n	800476e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fc ff40 	bl	8001584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f000 f9ba 	bl	8004a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d001      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e044      	b.n	800481a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_TIM_Base_Start_IT+0xac>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d018      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x6c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <HAL_TIM_Base_Start_IT+0xb0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x6c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c4:	d00e      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x6c>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_TIM_Base_Start_IT+0xb4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d009      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x6c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_TIM_Base_Start_IT+0xb8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d004      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x6c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a15      	ldr	r2, [pc, #84]	; (8004834 <HAL_TIM_Base_Start_IT+0xbc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d111      	bne.n	8004808 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b06      	cmp	r3, #6
 80047f4:	d010      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	e007      	b.n	8004818 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40013400 	.word	0x40013400
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00

08004838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d122      	bne.n	8004894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b02      	cmp	r3, #2
 800485a:	d11b      	bne.n	8004894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0202 	mvn.w	r2, #2
 8004864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8ed 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 8004880:	e005      	b.n	800488e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8e0 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f8ef 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d122      	bne.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d11b      	bne.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0204 	mvn.w	r2, #4
 80048b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f8c3 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8b6 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f8c5 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b08      	cmp	r3, #8
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0208 	mvn.w	r2, #8
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2204      	movs	r2, #4
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f899 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f88c 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f89b 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b10      	cmp	r3, #16
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0210 	mvn.w	r2, #16
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2208      	movs	r2, #8
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f86f 	bl	8004a5a <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f862 	bl	8004a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f871 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0201 	mvn.w	r2, #1
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc fc3c 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b80      	cmp	r3, #128	; 0x80
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b80      	cmp	r3, #128	; 0x80
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f943 	bl	8004c6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d10e      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f835 	bl	8004a7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d10e      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0220 	mvn.w	r2, #32
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f90e 	bl	8004c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr

08004a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a33      	ldr	r2, [pc, #204]	; (8004b70 <TIM_Base_SetConfig+0xe0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d013      	beq.n	8004ad0 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a32      	ldr	r2, [pc, #200]	; (8004b74 <TIM_Base_SetConfig+0xe4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00f      	beq.n	8004ad0 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab6:	d00b      	beq.n	8004ad0 <TIM_Base_SetConfig+0x40>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a2f      	ldr	r2, [pc, #188]	; (8004b78 <TIM_Base_SetConfig+0xe8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d007      	beq.n	8004ad0 <TIM_Base_SetConfig+0x40>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a2e      	ldr	r2, [pc, #184]	; (8004b7c <TIM_Base_SetConfig+0xec>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_Base_SetConfig+0x40>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a2d      	ldr	r2, [pc, #180]	; (8004b80 <TIM_Base_SetConfig+0xf0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d108      	bne.n	8004ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <TIM_Base_SetConfig+0xe0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <TIM_Base_SetConfig+0x82>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <TIM_Base_SetConfig+0xe4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00f      	beq.n	8004b12 <TIM_Base_SetConfig+0x82>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af8:	d00b      	beq.n	8004b12 <TIM_Base_SetConfig+0x82>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <TIM_Base_SetConfig+0xe8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <TIM_Base_SetConfig+0x82>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <TIM_Base_SetConfig+0xec>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_Base_SetConfig+0x82>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <TIM_Base_SetConfig+0xf0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d108      	bne.n	8004b24 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <TIM_Base_SetConfig+0xe0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_Base_SetConfig+0xc8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <TIM_Base_SetConfig+0xe4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d103      	bne.n	8004b60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	615a      	str	r2, [r3, #20]
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40013400 	.word	0x40013400
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00

08004b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e050      	b.n	8004c3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d018      	beq.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf2:	d00e      	beq.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a14      	ldr	r2, [pc, #80]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a12      	ldr	r2, [pc, #72]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d10c      	bne.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40013400 	.word	0x40013400
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40000c00 	.word	0x40000c00

08004c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e042      	b.n	8004d18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc fca6 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2224      	movs	r2, #36	; 0x24
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f82b 	bl	8004d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d5a:	f023 030c 	bic.w	r3, r3, #12
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	430b      	orrs	r3, r1
 8004d66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a2c      	ldr	r2, [pc, #176]	; (8004e34 <UART_SetConfig+0x114>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d103      	bne.n	8004d90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7fe fab4 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	e002      	b.n	8004d96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d90:	f7fe fa9c 	bl	80032cc <HAL_RCC_GetPCLK1Freq>
 8004d94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009a      	lsls	r2, r3, #2
 8004da0:	441a      	add	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	4a22      	ldr	r2, [pc, #136]	; (8004e38 <UART_SetConfig+0x118>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	0119      	lsls	r1, r3, #4
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009a      	lsls	r2, r3, #2
 8004dc0:	441a      	add	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <UART_SetConfig+0x118>)
 8004dce:	fba3 0302 	umull	r0, r3, r3, r2
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	2064      	movs	r0, #100	; 0x64
 8004dd6:	fb00 f303 	mul.w	r3, r0, r3
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	3332      	adds	r3, #50	; 0x32
 8004de0:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <UART_SetConfig+0x118>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dec:	4419      	add	r1, r3
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	009a      	lsls	r2, r3, #2
 8004df8:	441a      	add	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <UART_SetConfig+0x118>)
 8004e06:	fba3 0302 	umull	r0, r3, r3, r2
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	2064      	movs	r0, #100	; 0x64
 8004e0e:	fb00 f303 	mul.w	r3, r0, r3
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	3332      	adds	r3, #50	; 0x32
 8004e18:	4a07      	ldr	r2, [pc, #28]	; (8004e38 <UART_SetConfig+0x118>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	f003 020f 	and.w	r2, r3, #15
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	440a      	add	r2, r1
 8004e2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40013800 	.word	0x40013800
 8004e38:	51eb851f 	.word	0x51eb851f

08004e3c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e42:	f3ef 8305 	mrs	r3, IPSR
 8004e46:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10f      	bne.n	8004e6e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e52:	607b      	str	r3, [r7, #4]
  return(result);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <osKernelInitialize+0x32>
 8004e5a:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <osKernelInitialize+0x60>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d109      	bne.n	8004e76 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e62:	f3ef 8311 	mrs	r3, BASEPRI
 8004e66:	603b      	str	r3, [r7, #0]
  return(result);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004e6e:	f06f 0305 	mvn.w	r3, #5
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e00c      	b.n	8004e90 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <osKernelInitialize+0x60>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d105      	bne.n	8004e8a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <osKernelInitialize+0x60>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e002      	b.n	8004e90 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e90:	68fb      	ldr	r3, [r7, #12]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr
 8004e9c:	200011b0 	.word	0x200011b0

08004ea0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ea6:	f3ef 8305 	mrs	r3, IPSR
 8004eaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10f      	bne.n	8004ed2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb6:	607b      	str	r3, [r7, #4]
  return(result);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <osKernelStart+0x32>
 8004ebe:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <osKernelStart+0x64>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d109      	bne.n	8004eda <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eca:	603b      	str	r3, [r7, #0]
  return(result);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <osKernelStart+0x3a>
    stat = osErrorISR;
 8004ed2:	f06f 0305 	mvn.w	r3, #5
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e00e      	b.n	8004ef8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004eda:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <osKernelStart+0x64>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d107      	bne.n	8004ef2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <osKernelStart+0x64>)
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004ee8:	f001 fb08 	bl	80064fc <vTaskStartScheduler>
      stat = osOK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e002      	b.n	8004ef8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200011b0 	.word	0x200011b0

08004f08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b092      	sub	sp, #72	; 0x48
 8004f0c:	af04      	add	r7, sp, #16
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f18:	f3ef 8305 	mrs	r3, IPSR
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f040 8094 	bne.w	800504e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f26:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2a:	623b      	str	r3, [r7, #32]
  return(result);
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 808d 	bne.w	800504e <osThreadNew+0x146>
 8004f34:	4b48      	ldr	r3, [pc, #288]	; (8005058 <osThreadNew+0x150>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d106      	bne.n	8004f4a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f40:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f040 8082 	bne.w	800504e <osThreadNew+0x146>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d07e      	beq.n	800504e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004f54:	2318      	movs	r3, #24
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004f58:	2300      	movs	r3, #0
 8004f5a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004f5c:	f107 031b 	add.w	r3, r7, #27
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004f62:	f04f 33ff 	mov.w	r3, #4294967295
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d045      	beq.n	8004ffa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <osThreadNew+0x74>
        name = attr->name;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <osThreadNew+0x9a>
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	2b38      	cmp	r3, #56	; 0x38
 8004f94:	d805      	bhi.n	8004fa2 <osThreadNew+0x9a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <osThreadNew+0x9e>
        return (NULL);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e054      	b.n	8005050 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00e      	beq.n	8004fdc <osThreadNew+0xd4>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2ba7      	cmp	r3, #167	; 0xa7
 8004fc4:	d90a      	bls.n	8004fdc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <osThreadNew+0xd4>
        mem = 1;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fda:	e010      	b.n	8004ffe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10c      	bne.n	8004ffe <osThreadNew+0xf6>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d108      	bne.n	8004ffe <osThreadNew+0xf6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d104      	bne.n	8004ffe <osThreadNew+0xf6>
          mem = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff8:	e001      	b.n	8004ffe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	2b01      	cmp	r3, #1
 8005002:	d110      	bne.n	8005026 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800500c:	9202      	str	r2, [sp, #8]
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005018:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f001 f88a 	bl	8006134 <xTaskCreateStatic>
 8005020:	4603      	mov	r3, r0
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e013      	b.n	800504e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	d110      	bne.n	800504e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	b29a      	uxth	r2, r3
 8005030:	f107 0314 	add.w	r3, r7, #20
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f001 f8d4 	bl	80061ec <xTaskCreate>
 8005044:	4603      	mov	r3, r0
 8005046:	2b01      	cmp	r3, #1
 8005048:	d001      	beq.n	800504e <osThreadNew+0x146>
          hTask = NULL;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800504e:	697b      	ldr	r3, [r7, #20]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3738      	adds	r7, #56	; 0x38
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	200011b0 	.word	0x200011b0

0800505c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005064:	f3ef 8305 	mrs	r3, IPSR
 8005068:	613b      	str	r3, [r7, #16]
  return(result);
 800506a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10f      	bne.n	8005090 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005070:	f3ef 8310 	mrs	r3, PRIMASK
 8005074:	60fb      	str	r3, [r7, #12]
  return(result);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <osDelay+0x34>
 800507c:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <osDelay+0x58>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d109      	bne.n	8005098 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005084:	f3ef 8311 	mrs	r3, BASEPRI
 8005088:	60bb      	str	r3, [r7, #8]
  return(result);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <osDelay+0x3c>
    stat = osErrorISR;
 8005090:	f06f 0305 	mvn.w	r3, #5
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e007      	b.n	80050a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 f9f6 	bl	8006494 <vTaskDelay>
    }
  }

  return (stat);
 80050a8:	697b      	ldr	r3, [r7, #20]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200011b0 	.word	0x200011b0

080050b8 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050c4:	f3ef 8305 	mrs	r3, IPSR
 80050c8:	617b      	str	r3, [r7, #20]
  return(result);
 80050ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d13d      	bne.n	800514c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d0:	f3ef 8310 	mrs	r3, PRIMASK
 80050d4:	613b      	str	r3, [r7, #16]
  return(result);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d137      	bne.n	800514c <osEventFlagsNew+0x94>
 80050dc:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <osEventFlagsNew+0xa0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d105      	bne.n	80050f0 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050e4:	f3ef 8311 	mrs	r3, BASEPRI
 80050e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d12d      	bne.n	800514c <osEventFlagsNew+0x94>
    mem = -1;
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295
 80050f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d015      	beq.n	8005128 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d006      	beq.n	8005112 <osEventFlagsNew+0x5a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	2b1f      	cmp	r3, #31
 800510a:	d902      	bls.n	8005112 <osEventFlagsNew+0x5a>
        mem = 1;
 800510c:	2301      	movs	r3, #1
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	e00c      	b.n	800512c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d108      	bne.n	800512c <osEventFlagsNew+0x74>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <osEventFlagsNew+0x74>
          mem = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	e001      	b.n	800512c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d106      	bne.n	8005140 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 f842 	bl	80051c0 <xEventGroupCreateStatic>
 800513c:	61f8      	str	r0, [r7, #28]
 800513e:	e005      	b.n	800514c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8005146:	f000 f872 	bl	800522e <xEventGroupCreate>
 800514a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800514c:	69fb      	ldr	r3, [r7, #28]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	200011b0 	.word	0x200011b0

0800515c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4a06      	ldr	r2, [pc, #24]	; (8005184 <vApplicationGetIdleTaskMemory+0x28>)
 800516c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4a05      	ldr	r2, [pc, #20]	; (8005188 <vApplicationGetIdleTaskMemory+0x2c>)
 8005172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2280      	movs	r2, #128	; 0x80
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr
 8005184:	200011b4 	.word	0x200011b4
 8005188:	2000125c 	.word	0x2000125c

0800518c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4a07      	ldr	r2, [pc, #28]	; (80051b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800519c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4a06      	ldr	r2, [pc, #24]	; (80051bc <vApplicationGetTimerTaskMemory+0x30>)
 80051a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051aa:	601a      	str	r2, [r3, #0]
}
 80051ac:	bf00      	nop
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	2000145c 	.word	0x2000145c
 80051bc:	20001504 	.word	0x20001504

080051c0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10a      	bne.n	80051e4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051e0:	bf00      	nop
 80051e2:	e7fe      	b.n	80051e2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80051e4:	2320      	movs	r3, #32
 80051e6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d00a      	beq.n	8005204 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	60fb      	str	r3, [r7, #12]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	3304      	adds	r3, #4
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f9f7 	bl	800560c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2201      	movs	r2, #1
 8005222:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005224:	697b      	ldr	r3, [r7, #20]
	}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005234:	2020      	movs	r0, #32
 8005236:	f002 fc79 	bl	8007b2c <pvPortMalloc>
 800523a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4618      	mov	r0, r3
 800524e:	f000 f9dd 	bl	800560c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005258:	687b      	ldr	r3, [r7, #4]
	}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b090      	sub	sp, #64	; 0x40
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800527a:	2300      	movs	r3, #0
 800527c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <xEventGroupWaitBits+0x36>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	623b      	str	r3, [r7, #32]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <xEventGroupWaitBits+0x56>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	61fb      	str	r3, [r7, #28]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	61bb      	str	r3, [r7, #24]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052d6:	f001 fe11 	bl	8006efc <xTaskGetSchedulerState>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d102      	bne.n	80052e6 <xEventGroupWaitBits+0x82>
 80052e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <xEventGroupWaitBits+0x86>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <xEventGroupWaitBits+0x88>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	617b      	str	r3, [r7, #20]
}
 8005302:	bf00      	nop
 8005304:	e7fe      	b.n	8005304 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8005306:	f001 f969 	bl	80065dc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005316:	f000 f943 	bl	80055a0 <prvTestWaitCondition>
 800531a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00e      	beq.n	8005340 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005326:	2300      	movs	r3, #0
 8005328:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d028      	beq.n	8005382 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	43db      	mvns	r3, r3
 8005338:	401a      	ands	r2, r3
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e020      	b.n	8005382 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005342:	2b00      	cmp	r3, #0
 8005344:	d104      	bne.n	8005350 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800534a:	2301      	movs	r3, #1
 800534c:	633b      	str	r3, [r7, #48]	; 0x30
 800534e:	e018      	b.n	8005382 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800535c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800536a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536e:	1d18      	adds	r0, r3, #4
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	4313      	orrs	r3, r2
 8005376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005378:	4619      	mov	r1, r3
 800537a:	f001 fb2f 	bl	80069dc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005382:	f001 f939 	bl	80065f8 <xTaskResumeAll>
 8005386:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800538a:	2b00      	cmp	r3, #0
 800538c:	d031      	beq.n	80053f2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d107      	bne.n	80053a4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005394:	4b19      	ldr	r3, [pc, #100]	; (80053fc <xEventGroupWaitBits+0x198>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80053a4:	f001 fe36 	bl	8007014 <uxTaskResetEventItemValue>
 80053a8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80053aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d11a      	bne.n	80053ea <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80053b4:	f002 faba 	bl	800792c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80053c4:	f000 f8ec 	bl	80055a0 <prvTestWaitCondition>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d006      	beq.n	80053e2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80053d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	43db      	mvns	r3, r3
 80053dc:	401a      	ands	r2, r3
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80053e2:	2301      	movs	r3, #1
 80053e4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80053e6:	f002 fad1 	bl	800798c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80053f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3740      	adds	r7, #64	; 0x40
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	e000ed04 	.word	0xe000ed04

08005400 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <xEventGroupClearBits+0x2a>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60fb      	str	r3, [r7, #12]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <xEventGroupClearBits+0x4a>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	60bb      	str	r3, [r7, #8]
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800544a:	f002 fa6f 	bl	800792c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	43db      	mvns	r3, r3
 800545c:	401a      	ands	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005462:	f002 fa93 	bl	800798c <vPortExitCritical>

	return uxReturn;
 8005466:	693b      	ldr	r3, [r7, #16]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08e      	sub	sp, #56	; 0x38
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800547a:	2300      	movs	r3, #0
 800547c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005482:	2300      	movs	r3, #0
 8005484:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <xEventGroupSetBits+0x32>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	613b      	str	r3, [r7, #16]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <xEventGroupSetBits+0x52>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60fb      	str	r3, [r7, #12]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	3304      	adds	r3, #4
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	3308      	adds	r3, #8
 80054cc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80054ce:	f001 f885 	bl	80065dc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	431a      	orrs	r2, r3
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80054e4:	e03c      	b.n	8005560 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80054ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054fc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005504:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d108      	bne.n	8005522 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	4013      	ands	r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800551c:	2301      	movs	r3, #1
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005520:	e008      	b.n	8005534 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	4013      	ands	r3, r2
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	429a      	cmp	r2, r3
 800552e:	d101      	bne.n	8005534 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005530:	2301      	movs	r3, #1
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d010      	beq.n	800555c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005554:	4619      	mov	r1, r3
 8005556:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005558:	f001 fb0c 	bl	8006b74 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	429a      	cmp	r2, r3
 8005566:	d1be      	bne.n	80054e6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	43db      	mvns	r3, r3
 8005570:	401a      	ands	r2, r3
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005576:	f001 f83f 	bl	80065f8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	681b      	ldr	r3, [r3, #0]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3738      	adds	r7, #56	; 0x38
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff ff6c 	bl	8005470 <xEventGroupSetBits>
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d107      	bne.n	80055c6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e007      	b.n	80055d6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4013      	ands	r3, r2
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d101      	bne.n	80055d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80055d2:	2301      	movs	r3, #1
 80055d4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80055d6:	697b      	ldr	r3, [r7, #20]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
	...

080055e4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	68f9      	ldr	r1, [r7, #12]
 80055f6:	4804      	ldr	r0, [pc, #16]	; (8005608 <xEventGroupSetBitsFromISR+0x24>)
 80055f8:	f002 f88a 	bl	8007710 <xTimerPendFunctionCallFromISR>
 80055fc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80055fe:	697b      	ldr	r3, [r7, #20]
	}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	08005587 	.word	0x08005587

0800560c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f103 0208 	add.w	r2, r3, #8
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f04f 32ff 	mov.w	r2, #4294967295
 8005624:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f103 0208 	add.w	r2, r3, #8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f103 0208 	add.w	r2, r3, #8
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr

08005662 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005662:	b480      	push	{r7}
 8005664:	b085      	sub	sp, #20
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]
}
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056be:	d103      	bne.n	80056c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	e00c      	b.n	80056e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3308      	adds	r3, #8
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	e002      	b.n	80056d6 <vListInsert+0x2e>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d2f6      	bcs.n	80056d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	601a      	str	r2, [r3, #0]
}
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6892      	ldr	r2, [r2, #8]
 800572e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6852      	ldr	r2, [r2, #4]
 8005738:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	d103      	bne.n	800574c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	1e5a      	subs	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr
	...

0800576c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xQueueGenericReset+0x2a>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	60bb      	str	r3, [r7, #8]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005796:	f002 f8c9 	bl	800792c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	441a      	add	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	3b01      	subs	r3, #1
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057cc:	fb01 f303 	mul.w	r3, r1, r3
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	22ff      	movs	r2, #255	; 0xff
 80057da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	22ff      	movs	r2, #255	; 0xff
 80057e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d114      	bne.n	8005816 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01a      	beq.n	800582a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3310      	adds	r3, #16
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 f957 	bl	8006aac <xTaskRemoveFromEventList>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d012      	beq.n	800582a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005804:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <xQueueGenericReset+0xcc>)
 8005806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	e009      	b.n	800582a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3310      	adds	r3, #16
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fef6 	bl	800560c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3324      	adds	r3, #36	; 0x24
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff fef1 	bl	800560c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800582a:	f002 f8af 	bl	800798c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800582e:	2301      	movs	r3, #1
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	e000ed04 	.word	0xe000ed04

0800583c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08e      	sub	sp, #56	; 0x38
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <xQueueGenericCreateStatic+0x52>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <xQueueGenericCreateStatic+0x56>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <xQueueGenericCreateStatic+0x58>
 8005892:	2300      	movs	r3, #0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	623b      	str	r3, [r7, #32]
}
 80058aa:	bf00      	nop
 80058ac:	e7fe      	b.n	80058ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <xQueueGenericCreateStatic+0x7e>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <xQueueGenericCreateStatic+0x82>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueGenericCreateStatic+0x84>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	61fb      	str	r3, [r7, #28]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058da:	2350      	movs	r3, #80	; 0x50
 80058dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b50      	cmp	r3, #80	; 0x50
 80058e2:	d00a      	beq.n	80058fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	61bb      	str	r3, [r7, #24]
}
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800590c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	4613      	mov	r3, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 f805 	bl	800592a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005922:	4618      	mov	r0, r3
 8005924:	3730      	adds	r7, #48	; 0x30
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	e002      	b.n	800594c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005958:	2101      	movs	r1, #1
 800595a:	69b8      	ldr	r0, [r7, #24]
 800595c:	f7ff ff06 	bl	800576c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08e      	sub	sp, #56	; 0x38
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800597e:	2300      	movs	r3, #0
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <xQueueGenericSend+0x32>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d103      	bne.n	80059b0 <xQueueGenericSend+0x40>
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <xQueueGenericSend+0x44>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <xQueueGenericSend+0x46>
 80059b4:	2300      	movs	r3, #0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <xQueueGenericSend+0x60>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d103      	bne.n	80059de <xQueueGenericSend+0x6e>
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <xQueueGenericSend+0x72>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueGenericSend+0x74>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueGenericSend+0x8e>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	623b      	str	r3, [r7, #32]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059fe:	f001 fa7d 	bl	8006efc <xTaskGetSchedulerState>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <xQueueGenericSend+0x9e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <xQueueGenericSend+0xa2>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <xQueueGenericSend+0xa4>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xQueueGenericSend+0xbe>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	61fb      	str	r3, [r7, #28]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a2e:	f001 ff7d 	bl	800792c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d302      	bcc.n	8005a44 <xQueueGenericSend+0xd4>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d129      	bne.n	8005a98 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a4a:	f000 fa07 	bl	8005e5c <prvCopyDataToQueue>
 8005a4e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d010      	beq.n	8005a7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	3324      	adds	r3, #36	; 0x24
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 f825 	bl	8006aac <xTaskRemoveFromEventList>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d013      	beq.n	8005a90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a68:	4b3f      	ldr	r3, [pc, #252]	; (8005b68 <xQueueGenericSend+0x1f8>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	e00a      	b.n	8005a90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a80:	4b39      	ldr	r3, [pc, #228]	; (8005b68 <xQueueGenericSend+0x1f8>)
 8005a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a90:	f001 ff7c 	bl	800798c <vPortExitCritical>
				return pdPASS;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e063      	b.n	8005b60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a9e:	f001 ff75 	bl	800798c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e05c      	b.n	8005b60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aac:	f107 0314 	add.w	r3, r7, #20
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 f8c1 	bl	8006c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aba:	f001 ff67 	bl	800798c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005abe:	f000 fd8d 	bl	80065dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ac2:	f001 ff33 	bl	800792c <vPortEnterCritical>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d103      	bne.n	8005adc <xQueueGenericSend+0x16c>
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ae2:	b25b      	sxtb	r3, r3
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d103      	bne.n	8005af2 <xQueueGenericSend+0x182>
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005af2:	f001 ff4b 	bl	800798c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005af6:	1d3a      	adds	r2, r7, #4
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	4611      	mov	r1, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f8b0 	bl	8006c64 <xTaskCheckForTimeOut>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d124      	bne.n	8005b54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b0c:	f000 fa9e 	bl	800604c <prvIsQueueFull>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d018      	beq.n	8005b48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	3310      	adds	r3, #16
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 ff38 	bl	8006994 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b26:	f000 fa29 	bl	8005f7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b2a:	f000 fd65 	bl	80065f8 <xTaskResumeAll>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f47f af7c 	bne.w	8005a2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b36:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <xQueueGenericSend+0x1f8>)
 8005b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	e772      	b.n	8005a2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b4a:	f000 fa17 	bl	8005f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b4e:	f000 fd53 	bl	80065f8 <xTaskResumeAll>
 8005b52:	e76c      	b.n	8005a2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b56:	f000 fa11 	bl	8005f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b5a:	f000 fd4d 	bl	80065f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b5e:	2300      	movs	r3, #0
		}
	}
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3738      	adds	r7, #56	; 0x38
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08e      	sub	sp, #56	; 0x38
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10a      	bne.n	8005b9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b96:	bf00      	nop
 8005b98:	e7fe      	b.n	8005b98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d103      	bne.n	8005ba8 <xQueueGenericSendFromISR+0x3c>
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <xQueueGenericSendFromISR+0x40>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <xQueueGenericSendFromISR+0x42>
 8005bac:	2300      	movs	r3, #0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	623b      	str	r3, [r7, #32]
}
 8005bc4:	bf00      	nop
 8005bc6:	e7fe      	b.n	8005bc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d103      	bne.n	8005bd6 <xQueueGenericSendFromISR+0x6a>
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <xQueueGenericSendFromISR+0x6e>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <xQueueGenericSendFromISR+0x70>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	61fb      	str	r3, [r7, #28]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bf6:	f001 ff5b 	bl	8007ab0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bfa:	f3ef 8211 	mrs	r2, BASEPRI
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	61ba      	str	r2, [r7, #24]
 8005c10:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c12:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <xQueueGenericSendFromISR+0xbc>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d12c      	bne.n	8005c82 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c38:	f000 f910 	bl	8005e5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d112      	bne.n	8005c6c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	3324      	adds	r3, #36	; 0x24
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 ff2a 	bl	8006aac <xTaskRemoveFromEventList>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00e      	beq.n	8005c7c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00b      	beq.n	8005c7c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e007      	b.n	8005c7c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c70:	3301      	adds	r3, #1
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	b25a      	sxtb	r2, r3
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005c80:	e001      	b.n	8005c86 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3738      	adds	r7, #56	; 0x38
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08c      	sub	sp, #48	; 0x30
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <xQueueReceive+0x30>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	623b      	str	r3, [r7, #32]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <xQueueReceive+0x3e>
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <xQueueReceive+0x42>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <xQueueReceive+0x44>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xQueueReceive+0x5e>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	61fb      	str	r3, [r7, #28]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cfa:	f001 f8ff 	bl	8006efc <xTaskGetSchedulerState>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <xQueueReceive+0x6e>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <xQueueReceive+0x72>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueReceive+0x74>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <xQueueReceive+0x8e>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	61bb      	str	r3, [r7, #24]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d2a:	f001 fdff 	bl	800792c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d01f      	beq.n	8005d7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d3e:	f000 f8f7 	bl	8005f30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	1e5a      	subs	r2, r3, #1
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00f      	beq.n	8005d72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	3310      	adds	r3, #16
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fea8 	bl	8006aac <xTaskRemoveFromEventList>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d62:	4b3d      	ldr	r3, [pc, #244]	; (8005e58 <xQueueReceive+0x1bc>)
 8005d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d72:	f001 fe0b 	bl	800798c <vPortExitCritical>
				return pdPASS;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e069      	b.n	8005e4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d103      	bne.n	8005d88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d80:	f001 fe04 	bl	800798c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e062      	b.n	8005e4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d8e:	f107 0310 	add.w	r3, r7, #16
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 ff50 	bl	8006c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d9c:	f001 fdf6 	bl	800798c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005da0:	f000 fc1c 	bl	80065dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005da4:	f001 fdc2 	bl	800792c <vPortEnterCritical>
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dae:	b25b      	sxtb	r3, r3
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d103      	bne.n	8005dbe <xQueueReceive+0x122>
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dc4:	b25b      	sxtb	r3, r3
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d103      	bne.n	8005dd4 <xQueueReceive+0x138>
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd4:	f001 fdda 	bl	800798c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dd8:	1d3a      	adds	r2, r7, #4
 8005dda:	f107 0310 	add.w	r3, r7, #16
 8005dde:	4611      	mov	r1, r2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 ff3f 	bl	8006c64 <xTaskCheckForTimeOut>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d123      	bne.n	8005e34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dee:	f000 f917 	bl	8006020 <prvIsQueueEmpty>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d017      	beq.n	8005e28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	3324      	adds	r3, #36	; 0x24
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fdc7 	bl	8006994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e08:	f000 f8b8 	bl	8005f7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e0c:	f000 fbf4 	bl	80065f8 <xTaskResumeAll>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d189      	bne.n	8005d2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e16:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <xQueueReceive+0x1bc>)
 8005e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	e780      	b.n	8005d2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e2a:	f000 f8a7 	bl	8005f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e2e:	f000 fbe3 	bl	80065f8 <xTaskResumeAll>
 8005e32:	e77a      	b.n	8005d2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e36:	f000 f8a1 	bl	8005f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e3a:	f000 fbdd 	bl	80065f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e40:	f000 f8ee 	bl	8006020 <prvIsQueueEmpty>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f43f af6f 	beq.w	8005d2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3730      	adds	r7, #48	; 0x30
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10d      	bne.n	8005e96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d14d      	bne.n	8005f1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f856 	bl	8006f38 <xTaskPriorityDisinherit>
 8005e8c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	605a      	str	r2, [r3, #4]
 8005e94:	e043      	b.n	8005f1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d119      	bne.n	8005ed0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6898      	ldr	r0, [r3, #8]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	f002 f89c 	bl	8007fe4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d32b      	bcc.n	8005f1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	609a      	str	r2, [r3, #8]
 8005ece:	e026      	b.n	8005f1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68d8      	ldr	r0, [r3, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	f002 f882 	bl	8007fe4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	425b      	negs	r3, r3
 8005eea:	441a      	add	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d207      	bcs.n	8005f0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	425b      	negs	r3, r3
 8005f06:	441a      	add	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d105      	bne.n	8005f1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f26:	697b      	ldr	r3, [r7, #20]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d018      	beq.n	8005f74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	441a      	add	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d303      	bcc.n	8005f64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68d9      	ldr	r1, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6838      	ldr	r0, [r7, #0]
 8005f70:	f002 f838 	bl	8007fe4 <memcpy>
	}
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f84:	f001 fcd2 	bl	800792c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f90:	e011      	b.n	8005fb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d012      	beq.n	8005fc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3324      	adds	r3, #36	; 0x24
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fd84 	bl	8006aac <xTaskRemoveFromEventList>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005faa:	f000 febd 	bl	8006d28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dce9      	bgt.n	8005f92 <prvUnlockQueue+0x16>
 8005fbe:	e000      	b.n	8005fc2 <prvUnlockQueue+0x46>
					break;
 8005fc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	22ff      	movs	r2, #255	; 0xff
 8005fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fca:	f001 fcdf 	bl	800798c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fce:	f001 fcad 	bl	800792c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fda:	e011      	b.n	8006000 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d012      	beq.n	800600a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3310      	adds	r3, #16
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fd5f 	bl	8006aac <xTaskRemoveFromEventList>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ff4:	f000 fe98 	bl	8006d28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006004:	2b00      	cmp	r3, #0
 8006006:	dce9      	bgt.n	8005fdc <prvUnlockQueue+0x60>
 8006008:	e000      	b.n	800600c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800600a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	22ff      	movs	r2, #255	; 0xff
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006014:	f001 fcba 	bl	800798c <vPortExitCritical>
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006028:	f001 fc80 	bl	800792c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006034:	2301      	movs	r3, #1
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e001      	b.n	800603e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800603e:	f001 fca5 	bl	800798c <vPortExitCritical>

	return xReturn;
 8006042:	68fb      	ldr	r3, [r7, #12]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006054:	f001 fc6a 	bl	800792c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006060:	429a      	cmp	r2, r3
 8006062:	d102      	bne.n	800606a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e001      	b.n	800606e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800606e:	f001 fc8d 	bl	800798c <vPortExitCritical>

	return xReturn;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	e014      	b.n	80060b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800608c:	4a0e      	ldr	r2, [pc, #56]	; (80060c8 <vQueueAddToRegistry+0x4c>)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10b      	bne.n	80060b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006098:	490b      	ldr	r1, [pc, #44]	; (80060c8 <vQueueAddToRegistry+0x4c>)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060a2:	4a09      	ldr	r2, [pc, #36]	; (80060c8 <vQueueAddToRegistry+0x4c>)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060ae:	e006      	b.n	80060be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b07      	cmp	r3, #7
 80060ba:	d9e7      	bls.n	800608c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	20001904 	.word	0x20001904

080060cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060dc:	f001 fc26 	bl	800792c <vPortEnterCritical>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060e6:	b25b      	sxtb	r3, r3
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d103      	bne.n	80060f6 <vQueueWaitForMessageRestricted+0x2a>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d103      	bne.n	800610c <vQueueWaitForMessageRestricted+0x40>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800610c:	f001 fc3e 	bl	800798c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	3324      	adds	r3, #36	; 0x24
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fc97 	bl	8006a54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006126:	6978      	ldr	r0, [r7, #20]
 8006128:	f7ff ff28 	bl	8005f7c <prvUnlockQueue>
	}
 800612c:	bf00      	nop
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08e      	sub	sp, #56	; 0x38
 8006138:	af04      	add	r7, sp, #16
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	623b      	str	r3, [r7, #32]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <xTaskCreateStatic+0x46>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	61fb      	str	r3, [r7, #28]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800617a:	23a8      	movs	r3, #168	; 0xa8
 800617c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2ba8      	cmp	r3, #168	; 0xa8
 8006182:	d00a      	beq.n	800619a <xTaskCreateStatic+0x66>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	61bb      	str	r3, [r7, #24]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01e      	beq.n	80061de <xTaskCreateStatic+0xaa>
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01b      	beq.n	80061de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061b8:	2300      	movs	r3, #0
 80061ba:	9303      	str	r3, [sp, #12]
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	9302      	str	r3, [sp, #8]
 80061c0:	f107 0314 	add.w	r3, r7, #20
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f851 	bl	8006278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061d8:	f000 f8ec 	bl	80063b4 <prvAddNewTaskToReadyList>
 80061dc:	e001      	b.n	80061e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061e2:	697b      	ldr	r3, [r7, #20]
	}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3728      	adds	r7, #40	; 0x28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08c      	sub	sp, #48	; 0x30
 80061f0:	af04      	add	r7, sp, #16
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4618      	mov	r0, r3
 8006202:	f001 fc93 	bl	8007b2c <pvPortMalloc>
 8006206:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00e      	beq.n	800622c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800620e:	20a8      	movs	r0, #168	; 0xa8
 8006210:	f001 fc8c 	bl	8007b2c <pvPortMalloc>
 8006214:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	631a      	str	r2, [r3, #48]	; 0x30
 8006222:	e005      	b.n	8006230 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006224:	6978      	ldr	r0, [r7, #20]
 8006226:	f001 fd45 	bl	8007cb4 <vPortFree>
 800622a:	e001      	b.n	8006230 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800622c:	2300      	movs	r3, #0
 800622e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d017      	beq.n	8006266 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800623e:	88fa      	ldrh	r2, [r7, #6]
 8006240:	2300      	movs	r3, #0
 8006242:	9303      	str	r3, [sp, #12]
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	9302      	str	r3, [sp, #8]
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	9301      	str	r3, [sp, #4]
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f80f 	bl	8006278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800625a:	69f8      	ldr	r0, [r7, #28]
 800625c:	f000 f8aa 	bl	80063b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006260:	2301      	movs	r3, #1
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	e002      	b.n	800626c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006266:	f04f 33ff 	mov.w	r3, #4294967295
 800626a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800626c:	69bb      	ldr	r3, [r7, #24]
	}
 800626e:	4618      	mov	r0, r3
 8006270:	3720      	adds	r7, #32
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	461a      	mov	r2, r3
 8006290:	21a5      	movs	r1, #165	; 0xa5
 8006292:	f001 fe23 	bl	8007edc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062a0:	3b01      	subs	r3, #1
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	617b      	str	r3, [r7, #20]
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	e012      	b.n	80062fc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	4413      	add	r3, r2
 80062dc:	7819      	ldrb	r1, [r3, #0]
 80062de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	3334      	adds	r3, #52	; 0x34
 80062e6:	460a      	mov	r2, r1
 80062e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4413      	add	r3, r2
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d006      	beq.n	8006304 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	3301      	adds	r3, #1
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	2b0f      	cmp	r3, #15
 8006300:	d9e9      	bls.n	80062d6 <prvInitialiseNewTask+0x5e>
 8006302:	e000      	b.n	8006306 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006304:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	2b37      	cmp	r3, #55	; 0x37
 8006312:	d901      	bls.n	8006318 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006314:	2337      	movs	r3, #55	; 0x37
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006322:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	2200      	movs	r2, #0
 8006328:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	3304      	adds	r3, #4
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff f98b 	bl	800564a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	3318      	adds	r3, #24
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff f986 	bl	800564a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	2200      	movs	r2, #0
 8006360:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	3354      	adds	r3, #84	; 0x54
 8006368:	224c      	movs	r2, #76	; 0x4c
 800636a:	2100      	movs	r1, #0
 800636c:	4618      	mov	r0, r3
 800636e:	f001 fdb5 	bl	8007edc <memset>
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	4a0c      	ldr	r2, [pc, #48]	; (80063a8 <prvInitialiseNewTask+0x130>)
 8006376:	659a      	str	r2, [r3, #88]	; 0x58
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	4a0c      	ldr	r2, [pc, #48]	; (80063ac <prvInitialiseNewTask+0x134>)
 800637c:	65da      	str	r2, [r3, #92]	; 0x5c
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	4a0b      	ldr	r2, [pc, #44]	; (80063b0 <prvInitialiseNewTask+0x138>)
 8006382:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	69b8      	ldr	r0, [r7, #24]
 800638a:	f001 f9e1 	bl	8007750 <pxPortInitialiseStack>
 800638e:	4602      	mov	r2, r0
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a0:	bf00      	nop
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20002b90 	.word	0x20002b90
 80063ac:	20002bf8 	.word	0x20002bf8
 80063b0:	20002c60 	.word	0x20002c60

080063b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063bc:	f001 fab6 	bl	800792c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063c0:	4b2d      	ldr	r3, [pc, #180]	; (8006478 <prvAddNewTaskToReadyList+0xc4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	4a2c      	ldr	r2, [pc, #176]	; (8006478 <prvAddNewTaskToReadyList+0xc4>)
 80063c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063ca:	4b2c      	ldr	r3, [pc, #176]	; (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063d2:	4a2a      	ldr	r2, [pc, #168]	; (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063d8:	4b27      	ldr	r3, [pc, #156]	; (8006478 <prvAddNewTaskToReadyList+0xc4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d110      	bne.n	8006402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063e0:	f000 fcc6 	bl	8006d70 <prvInitialiseTaskLists>
 80063e4:	e00d      	b.n	8006402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063e6:	4b26      	ldr	r3, [pc, #152]	; (8006480 <prvAddNewTaskToReadyList+0xcc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063ee:	4b23      	ldr	r3, [pc, #140]	; (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d802      	bhi.n	8006402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063fc:	4a1f      	ldr	r2, [pc, #124]	; (800647c <prvAddNewTaskToReadyList+0xc8>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006402:	4b20      	ldr	r3, [pc, #128]	; (8006484 <prvAddNewTaskToReadyList+0xd0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3301      	adds	r3, #1
 8006408:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <prvAddNewTaskToReadyList+0xd0>)
 800640a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800640c:	4b1d      	ldr	r3, [pc, #116]	; (8006484 <prvAddNewTaskToReadyList+0xd0>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <prvAddNewTaskToReadyList+0xd4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d903      	bls.n	8006428 <prvAddNewTaskToReadyList+0x74>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	4a18      	ldr	r2, [pc, #96]	; (8006488 <prvAddNewTaskToReadyList+0xd4>)
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4a15      	ldr	r2, [pc, #84]	; (800648c <prvAddNewTaskToReadyList+0xd8>)
 8006436:	441a      	add	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7ff f90f 	bl	8005662 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006444:	f001 faa2 	bl	800798c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <prvAddNewTaskToReadyList+0xcc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00e      	beq.n	800646e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <prvAddNewTaskToReadyList+0xc8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	429a      	cmp	r2, r3
 800645c:	d207      	bcs.n	800646e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <prvAddNewTaskToReadyList+0xdc>)
 8006460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20001e18 	.word	0x20001e18
 800647c:	20001944 	.word	0x20001944
 8006480:	20001e24 	.word	0x20001e24
 8006484:	20001e34 	.word	0x20001e34
 8006488:	20001e20 	.word	0x20001e20
 800648c:	20001948 	.word	0x20001948
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d017      	beq.n	80064d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064a6:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <vTaskDelay+0x60>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <vTaskDelay+0x30>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60bb      	str	r3, [r7, #8]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064c4:	f000 f88a 	bl	80065dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064c8:	2100      	movs	r1, #0
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fdba 	bl	8007044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064d0:	f000 f892 	bl	80065f8 <xTaskResumeAll>
 80064d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d107      	bne.n	80064ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <vTaskDelay+0x64>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064ec:	bf00      	nop
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20001e40 	.word	0x20001e40
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800650a:	463a      	mov	r2, r7
 800650c:	1d39      	adds	r1, r7, #4
 800650e:	f107 0308 	add.w	r3, r7, #8
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fe22 	bl	800515c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	9202      	str	r2, [sp, #8]
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	2300      	movs	r3, #0
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	2300      	movs	r3, #0
 8006528:	460a      	mov	r2, r1
 800652a:	4924      	ldr	r1, [pc, #144]	; (80065bc <vTaskStartScheduler+0xc0>)
 800652c:	4824      	ldr	r0, [pc, #144]	; (80065c0 <vTaskStartScheduler+0xc4>)
 800652e:	f7ff fe01 	bl	8006134 <xTaskCreateStatic>
 8006532:	4603      	mov	r3, r0
 8006534:	4a23      	ldr	r2, [pc, #140]	; (80065c4 <vTaskStartScheduler+0xc8>)
 8006536:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006538:	4b22      	ldr	r3, [pc, #136]	; (80065c4 <vTaskStartScheduler+0xc8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006540:	2301      	movs	r3, #1
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	e001      	b.n	800654a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d102      	bne.n	8006556 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006550:	f000 fdcc 	bl	80070ec <xTimerCreateTimerTask>
 8006554:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d11b      	bne.n	8006594 <vTaskStartScheduler+0x98>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	613b      	str	r3, [r7, #16]
}
 800656e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006570:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <vTaskStartScheduler+0xcc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3354      	adds	r3, #84	; 0x54
 8006576:	4a15      	ldr	r2, [pc, #84]	; (80065cc <vTaskStartScheduler+0xd0>)
 8006578:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <vTaskStartScheduler+0xd4>)
 800657c:	f04f 32ff 	mov.w	r2, #4294967295
 8006580:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006582:	4b14      	ldr	r3, [pc, #80]	; (80065d4 <vTaskStartScheduler+0xd8>)
 8006584:	2201      	movs	r2, #1
 8006586:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006588:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <vTaskStartScheduler+0xdc>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800658e:	f001 f95b 	bl	8007848 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006592:	e00e      	b.n	80065b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d10a      	bne.n	80065b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	60fb      	str	r3, [r7, #12]
}
 80065ae:	bf00      	nop
 80065b0:	e7fe      	b.n	80065b0 <vTaskStartScheduler+0xb4>
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	08008118 	.word	0x08008118
 80065c0:	08006d41 	.word	0x08006d41
 80065c4:	20001e3c 	.word	0x20001e3c
 80065c8:	20001944 	.word	0x20001944
 80065cc:	2000005c 	.word	0x2000005c
 80065d0:	20001e38 	.word	0x20001e38
 80065d4:	20001e24 	.word	0x20001e24
 80065d8:	20001e1c 	.word	0x20001e1c

080065dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065e0:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <vTaskSuspendAll+0x18>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	4a03      	ldr	r2, [pc, #12]	; (80065f4 <vTaskSuspendAll+0x18>)
 80065e8:	6013      	str	r3, [r2, #0]
}
 80065ea:	bf00      	nop
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	20001e40 	.word	0x20001e40

080065f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006602:	2300      	movs	r3, #0
 8006604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006606:	4b42      	ldr	r3, [pc, #264]	; (8006710 <xTaskResumeAll+0x118>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <xTaskResumeAll+0x2c>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	603b      	str	r3, [r7, #0]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006624:	f001 f982 	bl	800792c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006628:	4b39      	ldr	r3, [pc, #228]	; (8006710 <xTaskResumeAll+0x118>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3b01      	subs	r3, #1
 800662e:	4a38      	ldr	r2, [pc, #224]	; (8006710 <xTaskResumeAll+0x118>)
 8006630:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006632:	4b37      	ldr	r3, [pc, #220]	; (8006710 <xTaskResumeAll+0x118>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d162      	bne.n	8006700 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800663a:	4b36      	ldr	r3, [pc, #216]	; (8006714 <xTaskResumeAll+0x11c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d05e      	beq.n	8006700 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006642:	e02f      	b.n	80066a4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006644:	4b34      	ldr	r3, [pc, #208]	; (8006718 <xTaskResumeAll+0x120>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3318      	adds	r3, #24
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff f861 	bl	8005718 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3304      	adds	r3, #4
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff f85c 	bl	8005718 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006664:	4b2d      	ldr	r3, [pc, #180]	; (800671c <xTaskResumeAll+0x124>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d903      	bls.n	8006674 <xTaskResumeAll+0x7c>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	4a2a      	ldr	r2, [pc, #168]	; (800671c <xTaskResumeAll+0x124>)
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4a27      	ldr	r2, [pc, #156]	; (8006720 <xTaskResumeAll+0x128>)
 8006682:	441a      	add	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3304      	adds	r3, #4
 8006688:	4619      	mov	r1, r3
 800668a:	4610      	mov	r0, r2
 800668c:	f7fe ffe9 	bl	8005662 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006694:	4b23      	ldr	r3, [pc, #140]	; (8006724 <xTaskResumeAll+0x12c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	429a      	cmp	r2, r3
 800669c:	d302      	bcc.n	80066a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800669e:	4b22      	ldr	r3, [pc, #136]	; (8006728 <xTaskResumeAll+0x130>)
 80066a0:	2201      	movs	r2, #1
 80066a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066a4:	4b1c      	ldr	r3, [pc, #112]	; (8006718 <xTaskResumeAll+0x120>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1cb      	bne.n	8006644 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066b2:	f000 fbff 	bl	8006eb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066b6:	4b1d      	ldr	r3, [pc, #116]	; (800672c <xTaskResumeAll+0x134>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d010      	beq.n	80066e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066c2:	f000 f845 	bl	8006750 <xTaskIncrementTick>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066cc:	4b16      	ldr	r3, [pc, #88]	; (8006728 <xTaskResumeAll+0x130>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f1      	bne.n	80066c2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <xTaskResumeAll+0x134>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066e4:	4b10      	ldr	r3, [pc, #64]	; (8006728 <xTaskResumeAll+0x130>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d009      	beq.n	8006700 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066ec:	2301      	movs	r3, #1
 80066ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066f0:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <xTaskResumeAll+0x138>)
 80066f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006700:	f001 f944 	bl	800798c <vPortExitCritical>

	return xAlreadyYielded;
 8006704:	68bb      	ldr	r3, [r7, #8]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20001e40 	.word	0x20001e40
 8006714:	20001e18 	.word	0x20001e18
 8006718:	20001dd8 	.word	0x20001dd8
 800671c:	20001e20 	.word	0x20001e20
 8006720:	20001948 	.word	0x20001948
 8006724:	20001944 	.word	0x20001944
 8006728:	20001e2c 	.word	0x20001e2c
 800672c:	20001e28 	.word	0x20001e28
 8006730:	e000ed04 	.word	0xe000ed04

08006734 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800673a:	4b04      	ldr	r3, [pc, #16]	; (800674c <xTaskGetTickCount+0x18>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006740:	687b      	ldr	r3, [r7, #4]
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr
 800674c:	20001e1c 	.word	0x20001e1c

08006750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800675a:	4b51      	ldr	r3, [pc, #324]	; (80068a0 <xTaskIncrementTick+0x150>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f040 808e 	bne.w	8006880 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006764:	4b4f      	ldr	r3, [pc, #316]	; (80068a4 <xTaskIncrementTick+0x154>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3301      	adds	r3, #1
 800676a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800676c:	4a4d      	ldr	r2, [pc, #308]	; (80068a4 <xTaskIncrementTick+0x154>)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d120      	bne.n	80067ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006778:	4b4b      	ldr	r3, [pc, #300]	; (80068a8 <xTaskIncrementTick+0x158>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <xTaskIncrementTick+0x48>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	603b      	str	r3, [r7, #0]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <xTaskIncrementTick+0x46>
 8006798:	4b43      	ldr	r3, [pc, #268]	; (80068a8 <xTaskIncrementTick+0x158>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	4b43      	ldr	r3, [pc, #268]	; (80068ac <xTaskIncrementTick+0x15c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a41      	ldr	r2, [pc, #260]	; (80068a8 <xTaskIncrementTick+0x158>)
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	4a41      	ldr	r2, [pc, #260]	; (80068ac <xTaskIncrementTick+0x15c>)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	4b40      	ldr	r3, [pc, #256]	; (80068b0 <xTaskIncrementTick+0x160>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3301      	adds	r3, #1
 80067b2:	4a3f      	ldr	r2, [pc, #252]	; (80068b0 <xTaskIncrementTick+0x160>)
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	f000 fb7d 	bl	8006eb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067ba:	4b3e      	ldr	r3, [pc, #248]	; (80068b4 <xTaskIncrementTick+0x164>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d34e      	bcc.n	8006862 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067c4:	4b38      	ldr	r3, [pc, #224]	; (80068a8 <xTaskIncrementTick+0x158>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <xTaskIncrementTick+0x82>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <xTaskIncrementTick+0x84>
 80067d2:	2300      	movs	r3, #0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d8:	4b36      	ldr	r3, [pc, #216]	; (80068b4 <xTaskIncrementTick+0x164>)
 80067da:	f04f 32ff 	mov.w	r2, #4294967295
 80067de:	601a      	str	r2, [r3, #0]
					break;
 80067e0:	e03f      	b.n	8006862 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067e2:	4b31      	ldr	r3, [pc, #196]	; (80068a8 <xTaskIncrementTick+0x158>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d203      	bcs.n	8006802 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067fa:	4a2e      	ldr	r2, [pc, #184]	; (80068b4 <xTaskIncrementTick+0x164>)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6013      	str	r3, [r2, #0]
						break;
 8006800:	e02f      	b.n	8006862 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	3304      	adds	r3, #4
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe ff86 	bl	8005718 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	3318      	adds	r3, #24
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe ff7d 	bl	8005718 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006822:	4b25      	ldr	r3, [pc, #148]	; (80068b8 <xTaskIncrementTick+0x168>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d903      	bls.n	8006832 <xTaskIncrementTick+0xe2>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	4a22      	ldr	r2, [pc, #136]	; (80068b8 <xTaskIncrementTick+0x168>)
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4a1f      	ldr	r2, [pc, #124]	; (80068bc <xTaskIncrementTick+0x16c>)
 8006840:	441a      	add	r2, r3
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	3304      	adds	r3, #4
 8006846:	4619      	mov	r1, r3
 8006848:	4610      	mov	r0, r2
 800684a:	f7fe ff0a 	bl	8005662 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006852:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <xTaskIncrementTick+0x170>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	429a      	cmp	r2, r3
 800685a:	d3b3      	bcc.n	80067c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800685c:	2301      	movs	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006860:	e7b0      	b.n	80067c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006862:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <xTaskIncrementTick+0x170>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006868:	4914      	ldr	r1, [pc, #80]	; (80068bc <xTaskIncrementTick+0x16c>)
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	440b      	add	r3, r1
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d907      	bls.n	800688a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800687a:	2301      	movs	r3, #1
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	e004      	b.n	800688a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006880:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <xTaskIncrementTick+0x174>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	4a0f      	ldr	r2, [pc, #60]	; (80068c4 <xTaskIncrementTick+0x174>)
 8006888:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800688a:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <xTaskIncrementTick+0x178>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006892:	2301      	movs	r3, #1
 8006894:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006896:	697b      	ldr	r3, [r7, #20]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20001e40 	.word	0x20001e40
 80068a4:	20001e1c 	.word	0x20001e1c
 80068a8:	20001dd0 	.word	0x20001dd0
 80068ac:	20001dd4 	.word	0x20001dd4
 80068b0:	20001e30 	.word	0x20001e30
 80068b4:	20001e38 	.word	0x20001e38
 80068b8:	20001e20 	.word	0x20001e20
 80068bc:	20001948 	.word	0x20001948
 80068c0:	20001944 	.word	0x20001944
 80068c4:	20001e28 	.word	0x20001e28
 80068c8:	20001e2c 	.word	0x20001e2c

080068cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068d2:	4b2a      	ldr	r3, [pc, #168]	; (800697c <vTaskSwitchContext+0xb0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068da:	4b29      	ldr	r3, [pc, #164]	; (8006980 <vTaskSwitchContext+0xb4>)
 80068dc:	2201      	movs	r2, #1
 80068de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068e0:	e046      	b.n	8006970 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80068e2:	4b27      	ldr	r3, [pc, #156]	; (8006980 <vTaskSwitchContext+0xb4>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80068e8:	4b26      	ldr	r3, [pc, #152]	; (8006984 <vTaskSwitchContext+0xb8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	e010      	b.n	8006912 <vTaskSwitchContext+0x46>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <vTaskSwitchContext+0x40>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	607b      	str	r3, [r7, #4]
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <vTaskSwitchContext+0x3e>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3b01      	subs	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	491d      	ldr	r1, [pc, #116]	; (8006988 <vTaskSwitchContext+0xbc>)
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0e4      	beq.n	80068f0 <vTaskSwitchContext+0x24>
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4a15      	ldr	r2, [pc, #84]	; (8006988 <vTaskSwitchContext+0xbc>)
 8006932:	4413      	add	r3, r2
 8006934:	60bb      	str	r3, [r7, #8]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	605a      	str	r2, [r3, #4]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	3308      	adds	r3, #8
 8006948:	429a      	cmp	r2, r3
 800694a:	d104      	bne.n	8006956 <vTaskSwitchContext+0x8a>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	605a      	str	r2, [r3, #4]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	4a0b      	ldr	r2, [pc, #44]	; (800698c <vTaskSwitchContext+0xc0>)
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	4a08      	ldr	r2, [pc, #32]	; (8006984 <vTaskSwitchContext+0xb8>)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006966:	4b09      	ldr	r3, [pc, #36]	; (800698c <vTaskSwitchContext+0xc0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3354      	adds	r3, #84	; 0x54
 800696c:	4a08      	ldr	r2, [pc, #32]	; (8006990 <vTaskSwitchContext+0xc4>)
 800696e:	6013      	str	r3, [r2, #0]
}
 8006970:	bf00      	nop
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20001e40 	.word	0x20001e40
 8006980:	20001e2c 	.word	0x20001e2c
 8006984:	20001e20 	.word	0x20001e20
 8006988:	20001948 	.word	0x20001948
 800698c:	20001944 	.word	0x20001944
 8006990:	2000005c 	.word	0x2000005c

08006994 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10a      	bne.n	80069ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	60fb      	str	r3, [r7, #12]
}
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069ba:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <vTaskPlaceOnEventList+0x44>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3318      	adds	r3, #24
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fe fe70 	bl	80056a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069c8:	2101      	movs	r1, #1
 80069ca:	6838      	ldr	r0, [r7, #0]
 80069cc:	f000 fb3a 	bl	8007044 <prvAddCurrentTaskToDelayedList>
}
 80069d0:	bf00      	nop
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	20001944 	.word	0x20001944

080069dc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10a      	bne.n	8006a04 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	617b      	str	r3, [r7, #20]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006a04:	4b11      	ldr	r3, [pc, #68]	; (8006a4c <vTaskPlaceOnUnorderedEventList+0x70>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10a      	bne.n	8006a22 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	613b      	str	r3, [r7, #16]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006a22:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a2c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a2e:	4b08      	ldr	r3, [pc, #32]	; (8006a50 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3318      	adds	r3, #24
 8006a34:	4619      	mov	r1, r3
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7fe fe13 	bl	8005662 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fb00 	bl	8007044 <prvAddCurrentTaskToDelayedList>
}
 8006a44:	bf00      	nop
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	20001e40 	.word	0x20001e40
 8006a50:	20001944 	.word	0x20001944

08006a54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10a      	bne.n	8006a7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	617b      	str	r3, [r7, #20]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3318      	adds	r3, #24
 8006a82:	4619      	mov	r1, r3
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f7fe fdec 	bl	8005662 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a90:	f04f 33ff 	mov.w	r3, #4294967295
 8006a94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	68b8      	ldr	r0, [r7, #8]
 8006a9a:	f000 fad3 	bl	8007044 <prvAddCurrentTaskToDelayedList>
	}
 8006a9e:	bf00      	nop
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20001944 	.word	0x20001944

08006aac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	60fb      	str	r3, [r7, #12]
}
 8006ad4:	bf00      	nop
 8006ad6:	e7fe      	b.n	8006ad6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	3318      	adds	r3, #24
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe fe1b 	bl	8005718 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ae2:	4b1e      	ldr	r3, [pc, #120]	; (8006b5c <xTaskRemoveFromEventList+0xb0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d11d      	bne.n	8006b26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	3304      	adds	r3, #4
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe fe12 	bl	8005718 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af8:	4b19      	ldr	r3, [pc, #100]	; (8006b60 <xTaskRemoveFromEventList+0xb4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d903      	bls.n	8006b08 <xTaskRemoveFromEventList+0x5c>
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	4a16      	ldr	r2, [pc, #88]	; (8006b60 <xTaskRemoveFromEventList+0xb4>)
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4a13      	ldr	r2, [pc, #76]	; (8006b64 <xTaskRemoveFromEventList+0xb8>)
 8006b16:	441a      	add	r2, r3
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f7fe fd9f 	bl	8005662 <vListInsertEnd>
 8006b24:	e005      	b.n	8006b32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3318      	adds	r3, #24
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	480e      	ldr	r0, [pc, #56]	; (8006b68 <xTaskRemoveFromEventList+0xbc>)
 8006b2e:	f7fe fd98 	bl	8005662 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b36:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <xTaskRemoveFromEventList+0xc0>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d905      	bls.n	8006b4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b44:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <xTaskRemoveFromEventList+0xc4>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e001      	b.n	8006b50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006b50:	697b      	ldr	r3, [r7, #20]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20001e40 	.word	0x20001e40
 8006b60:	20001e20 	.word	0x20001e20
 8006b64:	20001948 	.word	0x20001948
 8006b68:	20001dd8 	.word	0x20001dd8
 8006b6c:	20001944 	.word	0x20001944
 8006b70:	20001e2c 	.word	0x20001e2c

08006b74 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006b7e:	4b29      	ldr	r3, [pc, #164]	; (8006c24 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	613b      	str	r3, [r7, #16]
}
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	60fb      	str	r3, [r7, #12]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7fe fda5 	bl	8005718 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fda0 	bl	8005718 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bdc:	4b12      	ldr	r3, [pc, #72]	; (8006c28 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d903      	bls.n	8006bec <vTaskRemoveFromUnorderedEventList+0x78>
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	4a0f      	ldr	r2, [pc, #60]	; (8006c28 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006bfa:	441a      	add	r2, r3
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f7fe fd2d 	bl	8005662 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d902      	bls.n	8006c1c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006c16:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
	}
}
 8006c1c:	bf00      	nop
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20001e40 	.word	0x20001e40
 8006c28:	20001e20 	.word	0x20001e20
 8006c2c:	20001948 	.word	0x20001948
 8006c30:	20001944 	.word	0x20001944
 8006c34:	20001e2c 	.word	0x20001e2c

08006c38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c40:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <vTaskInternalSetTimeOutState+0x24>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <vTaskInternalSetTimeOutState+0x28>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	605a      	str	r2, [r3, #4]
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bc80      	pop	{r7}
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20001e30 	.word	0x20001e30
 8006c60:	20001e1c 	.word	0x20001e1c

08006c64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10a      	bne.n	8006c8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	613b      	str	r3, [r7, #16]
}
 8006c86:	bf00      	nop
 8006c88:	e7fe      	b.n	8006c88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	60fb      	str	r3, [r7, #12]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006ca6:	f000 fe41 	bl	800792c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006caa:	4b1d      	ldr	r3, [pc, #116]	; (8006d20 <xTaskCheckForTimeOut+0xbc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc2:	d102      	bne.n	8006cca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	e023      	b.n	8006d12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <xTaskCheckForTimeOut+0xc0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d007      	beq.n	8006ce6 <xTaskCheckForTimeOut+0x82>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d302      	bcc.n	8006ce6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	61fb      	str	r3, [r7, #28]
 8006ce4:	e015      	b.n	8006d12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d20b      	bcs.n	8006d08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	1ad2      	subs	r2, r2, r3
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff ff9b 	bl	8006c38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61fb      	str	r3, [r7, #28]
 8006d06:	e004      	b.n	8006d12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d12:	f000 fe3b 	bl	800798c <vPortExitCritical>

	return xReturn;
 8006d16:	69fb      	ldr	r3, [r7, #28]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3720      	adds	r7, #32
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20001e1c 	.word	0x20001e1c
 8006d24:	20001e30 	.word	0x20001e30

08006d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d2c:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <vTaskMissedYield+0x14>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	601a      	str	r2, [r3, #0]
}
 8006d32:	bf00      	nop
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20001e2c 	.word	0x20001e2c

08006d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d48:	f000 f852 	bl	8006df0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <prvIdleTask+0x28>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d9f9      	bls.n	8006d48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d54:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <prvIdleTask+0x2c>)
 8006d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d64:	e7f0      	b.n	8006d48 <prvIdleTask+0x8>
 8006d66:	bf00      	nop
 8006d68:	20001948 	.word	0x20001948
 8006d6c:	e000ed04 	.word	0xe000ed04

08006d70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d76:	2300      	movs	r3, #0
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	e00c      	b.n	8006d96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4a12      	ldr	r2, [pc, #72]	; (8006dd0 <prvInitialiseTaskLists+0x60>)
 8006d88:	4413      	add	r3, r2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fe fc3e 	bl	800560c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3301      	adds	r3, #1
 8006d94:	607b      	str	r3, [r7, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b37      	cmp	r3, #55	; 0x37
 8006d9a:	d9ef      	bls.n	8006d7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d9c:	480d      	ldr	r0, [pc, #52]	; (8006dd4 <prvInitialiseTaskLists+0x64>)
 8006d9e:	f7fe fc35 	bl	800560c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006da2:	480d      	ldr	r0, [pc, #52]	; (8006dd8 <prvInitialiseTaskLists+0x68>)
 8006da4:	f7fe fc32 	bl	800560c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006da8:	480c      	ldr	r0, [pc, #48]	; (8006ddc <prvInitialiseTaskLists+0x6c>)
 8006daa:	f7fe fc2f 	bl	800560c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dae:	480c      	ldr	r0, [pc, #48]	; (8006de0 <prvInitialiseTaskLists+0x70>)
 8006db0:	f7fe fc2c 	bl	800560c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006db4:	480b      	ldr	r0, [pc, #44]	; (8006de4 <prvInitialiseTaskLists+0x74>)
 8006db6:	f7fe fc29 	bl	800560c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dba:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <prvInitialiseTaskLists+0x78>)
 8006dbc:	4a05      	ldr	r2, [pc, #20]	; (8006dd4 <prvInitialiseTaskLists+0x64>)
 8006dbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <prvInitialiseTaskLists+0x7c>)
 8006dc2:	4a05      	ldr	r2, [pc, #20]	; (8006dd8 <prvInitialiseTaskLists+0x68>)
 8006dc4:	601a      	str	r2, [r3, #0]
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20001948 	.word	0x20001948
 8006dd4:	20001da8 	.word	0x20001da8
 8006dd8:	20001dbc 	.word	0x20001dbc
 8006ddc:	20001dd8 	.word	0x20001dd8
 8006de0:	20001dec 	.word	0x20001dec
 8006de4:	20001e04 	.word	0x20001e04
 8006de8:	20001dd0 	.word	0x20001dd0
 8006dec:	20001dd4 	.word	0x20001dd4

08006df0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006df6:	e019      	b.n	8006e2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006df8:	f000 fd98 	bl	800792c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006dfc:	4b10      	ldr	r3, [pc, #64]	; (8006e40 <prvCheckTasksWaitingTermination+0x50>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3304      	adds	r3, #4
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fe fc85 	bl	8005718 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <prvCheckTasksWaitingTermination+0x54>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	4a0b      	ldr	r2, [pc, #44]	; (8006e44 <prvCheckTasksWaitingTermination+0x54>)
 8006e16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e18:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <prvCheckTasksWaitingTermination+0x58>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	4a0a      	ldr	r2, [pc, #40]	; (8006e48 <prvCheckTasksWaitingTermination+0x58>)
 8006e20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e22:	f000 fdb3 	bl	800798c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f810 	bl	8006e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e2c:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <prvCheckTasksWaitingTermination+0x58>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e1      	bne.n	8006df8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20001dec 	.word	0x20001dec
 8006e44:	20001e18 	.word	0x20001e18
 8006e48:	20001e00 	.word	0x20001e00

08006e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3354      	adds	r3, #84	; 0x54
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 f847 	bl	8007eec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d108      	bne.n	8006e7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 ff21 	bl	8007cb4 <vPortFree>
				vPortFree( pxTCB );
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 ff1e 	bl	8007cb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e78:	e018      	b.n	8006eac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d103      	bne.n	8006e8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 ff15 	bl	8007cb4 <vPortFree>
	}
 8006e8a:	e00f      	b.n	8006eac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d00a      	beq.n	8006eac <prvDeleteTCB+0x60>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	60fb      	str	r3, [r7, #12]
}
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <prvDeleteTCB+0x5e>
	}
 8006eac:	bf00      	nop
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eba:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <prvResetNextTaskUnblockTime+0x40>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <prvResetNextTaskUnblockTime+0x14>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <prvResetNextTaskUnblockTime+0x16>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ece:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <prvResetNextTaskUnblockTime+0x44>)
 8006ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ed6:	e008      	b.n	8006eea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <prvResetNextTaskUnblockTime+0x40>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	4a04      	ldr	r2, [pc, #16]	; (8006ef8 <prvResetNextTaskUnblockTime+0x44>)
 8006ee8:	6013      	str	r3, [r2, #0]
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr
 8006ef4:	20001dd0 	.word	0x20001dd0
 8006ef8:	20001e38 	.word	0x20001e38

08006efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f02:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <xTaskGetSchedulerState+0x34>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	607b      	str	r3, [r7, #4]
 8006f0e:	e008      	b.n	8006f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f10:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <xTaskGetSchedulerState+0x38>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d102      	bne.n	8006f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	607b      	str	r3, [r7, #4]
 8006f1c:	e001      	b.n	8006f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f22:	687b      	ldr	r3, [r7, #4]
	}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	20001e24 	.word	0x20001e24
 8006f34:	20001e40 	.word	0x20001e40

08006f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d056      	beq.n	8006ffc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f4e:	4b2e      	ldr	r3, [pc, #184]	; (8007008 <xTaskPriorityDisinherit+0xd0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d00a      	beq.n	8006f6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	60fb      	str	r3, [r7, #12]
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60bb      	str	r3, [r7, #8]
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	1e5a      	subs	r2, r3, #1
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d02c      	beq.n	8006ffc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d128      	bne.n	8006ffc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe fbb2 	bl	8005718 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fcc:	4b0f      	ldr	r3, [pc, #60]	; (800700c <xTaskPriorityDisinherit+0xd4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d903      	bls.n	8006fdc <xTaskPriorityDisinherit+0xa4>
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	4a0c      	ldr	r2, [pc, #48]	; (800700c <xTaskPriorityDisinherit+0xd4>)
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4a09      	ldr	r2, [pc, #36]	; (8007010 <xTaskPriorityDisinherit+0xd8>)
 8006fea:	441a      	add	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	f7fe fb35 	bl	8005662 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ffc:	697b      	ldr	r3, [r7, #20]
	}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20001944 	.word	0x20001944
 800700c:	20001e20 	.word	0x20001e20
 8007010:	20001948 	.word	0x20001948

08007014 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800701a:	4b09      	ldr	r3, [pc, #36]	; (8007040 <uxTaskResetEventItemValue+0x2c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007022:	4b07      	ldr	r3, [pc, #28]	; (8007040 <uxTaskResetEventItemValue+0x2c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007028:	4b05      	ldr	r3, [pc, #20]	; (8007040 <uxTaskResetEventItemValue+0x2c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007030:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007032:	687b      	ldr	r3, [r7, #4]
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20001944 	.word	0x20001944

08007044 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800704e:	4b21      	ldr	r3, [pc, #132]	; (80070d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007054:	4b20      	ldr	r3, [pc, #128]	; (80070d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3304      	adds	r3, #4
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fb5c 	bl	8005718 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007066:	d10a      	bne.n	800707e <prvAddCurrentTaskToDelayedList+0x3a>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800706e:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3304      	adds	r3, #4
 8007074:	4619      	mov	r1, r3
 8007076:	4819      	ldr	r0, [pc, #100]	; (80070dc <prvAddCurrentTaskToDelayedList+0x98>)
 8007078:	f7fe faf3 	bl	8005662 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800707c:	e026      	b.n	80070cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4413      	add	r3, r2
 8007084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007086:	4b14      	ldr	r3, [pc, #80]	; (80070d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	429a      	cmp	r2, r3
 8007094:	d209      	bcs.n	80070aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007096:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b0f      	ldr	r3, [pc, #60]	; (80070d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3304      	adds	r3, #4
 80070a0:	4619      	mov	r1, r3
 80070a2:	4610      	mov	r0, r2
 80070a4:	f7fe fb00 	bl	80056a8 <vListInsert>
}
 80070a8:	e010      	b.n	80070cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070aa:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4619      	mov	r1, r3
 80070b6:	4610      	mov	r0, r2
 80070b8:	f7fe faf6 	bl	80056a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070bc:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d202      	bcs.n	80070cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070c6:	4a08      	ldr	r2, [pc, #32]	; (80070e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	6013      	str	r3, [r2, #0]
}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20001e1c 	.word	0x20001e1c
 80070d8:	20001944 	.word	0x20001944
 80070dc:	20001e04 	.word	0x20001e04
 80070e0:	20001dd4 	.word	0x20001dd4
 80070e4:	20001dd0 	.word	0x20001dd0
 80070e8:	20001e38 	.word	0x20001e38

080070ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070f6:	f000 facb 	bl	8007690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070fa:	4b1c      	ldr	r3, [pc, #112]	; (800716c <xTimerCreateTimerTask+0x80>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d021      	beq.n	8007146 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007106:	2300      	movs	r3, #0
 8007108:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800710a:	1d3a      	adds	r2, r7, #4
 800710c:	f107 0108 	add.w	r1, r7, #8
 8007110:	f107 030c 	add.w	r3, r7, #12
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe f839 	bl	800518c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	9202      	str	r2, [sp, #8]
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	2302      	movs	r3, #2
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	2300      	movs	r3, #0
 800712a:	460a      	mov	r2, r1
 800712c:	4910      	ldr	r1, [pc, #64]	; (8007170 <xTimerCreateTimerTask+0x84>)
 800712e:	4811      	ldr	r0, [pc, #68]	; (8007174 <xTimerCreateTimerTask+0x88>)
 8007130:	f7ff f800 	bl	8006134 <xTaskCreateStatic>
 8007134:	4603      	mov	r3, r0
 8007136:	4a10      	ldr	r2, [pc, #64]	; (8007178 <xTimerCreateTimerTask+0x8c>)
 8007138:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800713a:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <xTimerCreateTimerTask+0x8c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007142:	2301      	movs	r3, #1
 8007144:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	613b      	str	r3, [r7, #16]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007162:	697b      	ldr	r3, [r7, #20]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20001e74 	.word	0x20001e74
 8007170:	08008120 	.word	0x08008120
 8007174:	08007299 	.word	0x08007299
 8007178:	20001e78 	.word	0x20001e78

0800717c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08a      	sub	sp, #40	; 0x28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800718a:	2300      	movs	r3, #0
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	623b      	str	r3, [r7, #32]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071aa:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <xTimerGenericCommand+0x98>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d02a      	beq.n	8007208 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b05      	cmp	r3, #5
 80071c2:	dc18      	bgt.n	80071f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071c4:	f7ff fe9a 	bl	8006efc <xTaskGetSchedulerState>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d109      	bne.n	80071e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071ce:	4b11      	ldr	r3, [pc, #68]	; (8007214 <xTimerGenericCommand+0x98>)
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f107 0110 	add.w	r1, r7, #16
 80071d6:	2300      	movs	r3, #0
 80071d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071da:	f7fe fbc9 	bl	8005970 <xQueueGenericSend>
 80071de:	6278      	str	r0, [r7, #36]	; 0x24
 80071e0:	e012      	b.n	8007208 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071e2:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <xTimerGenericCommand+0x98>)
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f107 0110 	add.w	r1, r7, #16
 80071ea:	2300      	movs	r3, #0
 80071ec:	2200      	movs	r2, #0
 80071ee:	f7fe fbbf 	bl	8005970 <xQueueGenericSend>
 80071f2:	6278      	str	r0, [r7, #36]	; 0x24
 80071f4:	e008      	b.n	8007208 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071f6:	4b07      	ldr	r3, [pc, #28]	; (8007214 <xTimerGenericCommand+0x98>)
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	f107 0110 	add.w	r1, r7, #16
 80071fe:	2300      	movs	r3, #0
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	f7fe fcb3 	bl	8005b6c <xQueueGenericSendFromISR>
 8007206:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800720a:	4618      	mov	r0, r3
 800720c:	3728      	adds	r7, #40	; 0x28
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20001e74 	.word	0x20001e74

08007218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af02      	add	r7, sp, #8
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007222:	4b1c      	ldr	r3, [pc, #112]	; (8007294 <prvProcessExpiredTimer+0x7c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	3304      	adds	r3, #4
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fa71 	bl	8005718 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d122      	bne.n	8007284 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	18d1      	adds	r1, r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	6978      	ldr	r0, [r7, #20]
 800724c:	f000 f8c8 	bl	80073e0 <prvInsertTimerInActiveList>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d016      	beq.n	8007284 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007256:	2300      	movs	r3, #0
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	2300      	movs	r3, #0
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	2100      	movs	r1, #0
 8007260:	6978      	ldr	r0, [r7, #20]
 8007262:	f7ff ff8b 	bl	800717c <xTimerGenericCommand>
 8007266:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60fb      	str	r3, [r7, #12]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	6978      	ldr	r0, [r7, #20]
 800728a:	4798      	blx	r3
}
 800728c:	bf00      	nop
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20001e6c 	.word	0x20001e6c

08007298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072a0:	f107 0308 	add.w	r3, r7, #8
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 f857 	bl	8007358 <prvGetNextExpireTime>
 80072aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4619      	mov	r1, r3
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f803 	bl	80072bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072b6:	f000 f8d5 	bl	8007464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072ba:	e7f1      	b.n	80072a0 <prvTimerTask+0x8>

080072bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072c6:	f7ff f989 	bl	80065dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072ca:	f107 0308 	add.w	r3, r7, #8
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f866 	bl	80073a0 <prvSampleTimeNow>
 80072d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d130      	bne.n	800733e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <prvProcessTimerOrBlockTask+0x3c>
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d806      	bhi.n	80072f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072ea:	f7ff f985 	bl	80065f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff ff91 	bl	8007218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072f6:	e024      	b.n	8007342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d008      	beq.n	8007310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <prvProcessTimerOrBlockTask+0x90>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007310:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <prvProcessTimerOrBlockTask+0x94>)
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	4619      	mov	r1, r3
 800731e:	f7fe fed5 	bl	80060cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007322:	f7ff f969 	bl	80065f8 <xTaskResumeAll>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <prvProcessTimerOrBlockTask+0x98>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	f3bf 8f6f 	isb	sy
}
 800733c:	e001      	b.n	8007342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800733e:	f7ff f95b 	bl	80065f8 <xTaskResumeAll>
}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20001e70 	.word	0x20001e70
 8007350:	20001e74 	.word	0x20001e74
 8007354:	e000ed04 	.word	0xe000ed04

08007358 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007360:	4b0e      	ldr	r3, [pc, #56]	; (800739c <prvGetNextExpireTime+0x44>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	bf0c      	ite	eq
 800736a:	2301      	moveq	r3, #1
 800736c:	2300      	movne	r3, #0
 800736e:	b2db      	uxtb	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d105      	bne.n	800738a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800737e:	4b07      	ldr	r3, [pc, #28]	; (800739c <prvGetNextExpireTime+0x44>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	e001      	b.n	800738e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800738e:	68fb      	ldr	r3, [r7, #12]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	20001e6c 	.word	0x20001e6c

080073a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073a8:	f7ff f9c4 	bl	8006734 <xTaskGetTickCount>
 80073ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073ae:	4b0b      	ldr	r3, [pc, #44]	; (80073dc <prvSampleTimeNow+0x3c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d205      	bcs.n	80073c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073b8:	f000 f908 	bl	80075cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	e002      	b.n	80073ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073ca:	4a04      	ldr	r2, [pc, #16]	; (80073dc <prvSampleTimeNow+0x3c>)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20001e7c 	.word	0x20001e7c

080073e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073ee:	2300      	movs	r3, #0
 80073f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d812      	bhi.n	800742c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	1ad2      	subs	r2, r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	429a      	cmp	r2, r3
 8007412:	d302      	bcc.n	800741a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007414:	2301      	movs	r3, #1
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e01b      	b.n	8007452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800741a:	4b10      	ldr	r3, [pc, #64]	; (800745c <prvInsertTimerInActiveList+0x7c>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3304      	adds	r3, #4
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f7fe f93f 	bl	80056a8 <vListInsert>
 800742a:	e012      	b.n	8007452 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d206      	bcs.n	8007442 <prvInsertTimerInActiveList+0x62>
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d302      	bcc.n	8007442 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e007      	b.n	8007452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007442:	4b07      	ldr	r3, [pc, #28]	; (8007460 <prvInsertTimerInActiveList+0x80>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3304      	adds	r3, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f7fe f92b 	bl	80056a8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007452:	697b      	ldr	r3, [r7, #20]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20001e70 	.word	0x20001e70
 8007460:	20001e6c 	.word	0x20001e6c

08007464 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08e      	sub	sp, #56	; 0x38
 8007468:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800746a:	e09d      	b.n	80075a8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	da18      	bge.n	80074a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007472:	1d3b      	adds	r3, r7, #4
 8007474:	3304      	adds	r3, #4
 8007476:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	61fb      	str	r3, [r7, #28]
}
 8007490:	bf00      	nop
 8007492:	e7fe      	b.n	8007492 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800749a:	6850      	ldr	r0, [r2, #4]
 800749c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800749e:	6892      	ldr	r2, [r2, #8]
 80074a0:	4611      	mov	r1, r2
 80074a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	db7e      	blt.n	80075a8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d004      	beq.n	80074c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	3304      	adds	r3, #4
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe f92c 	bl	8005718 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074c0:	463b      	mov	r3, r7
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff ff6c 	bl	80073a0 <prvSampleTimeNow>
 80074c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b09      	cmp	r3, #9
 80074ce:	d86a      	bhi.n	80075a6 <prvProcessReceivedCommands+0x142>
 80074d0:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <prvProcessReceivedCommands+0x74>)
 80074d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d6:	bf00      	nop
 80074d8:	08007501 	.word	0x08007501
 80074dc:	08007501 	.word	0x08007501
 80074e0:	08007501 	.word	0x08007501
 80074e4:	080075a9 	.word	0x080075a9
 80074e8:	0800755d 	.word	0x0800755d
 80074ec:	08007595 	.word	0x08007595
 80074f0:	08007501 	.word	0x08007501
 80074f4:	08007501 	.word	0x08007501
 80074f8:	080075a9 	.word	0x080075a9
 80074fc:	0800755d 	.word	0x0800755d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	18d1      	adds	r1, r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800750c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750e:	f7ff ff67 	bl	80073e0 <prvInsertTimerInActiveList>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d047      	beq.n	80075a8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800751e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d13f      	bne.n	80075a8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	441a      	add	r2, r3
 8007530:	2300      	movs	r3, #0
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	2300      	movs	r3, #0
 8007536:	2100      	movs	r1, #0
 8007538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800753a:	f7ff fe1f 	bl	800717c <xTimerGenericCommand>
 800753e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d130      	bne.n	80075a8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	61bb      	str	r3, [r7, #24]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10a      	bne.n	8007580 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	617b      	str	r3, [r7, #20]
}
 800757c:	bf00      	nop
 800757e:	e7fe      	b.n	800757e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	699a      	ldr	r2, [r3, #24]
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	18d1      	adds	r1, r2, r3
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800758e:	f7ff ff27 	bl	80073e0 <prvInsertTimerInActiveList>
					break;
 8007592:	e009      	b.n	80075a8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d104      	bne.n	80075a8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800759e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075a0:	f000 fb88 	bl	8007cb4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075a4:	e000      	b.n	80075a8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80075a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075a8:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <prvProcessReceivedCommands+0x164>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	1d39      	adds	r1, r7, #4
 80075ae:	2200      	movs	r2, #0
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe fb73 	bl	8005c9c <xQueueReceive>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f47f af57 	bne.w	800746c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075be:	bf00      	nop
 80075c0:	bf00      	nop
 80075c2:	3730      	adds	r7, #48	; 0x30
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20001e74 	.word	0x20001e74

080075cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075d2:	e045      	b.n	8007660 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075d4:	4b2c      	ldr	r3, [pc, #176]	; (8007688 <prvSwitchTimerLists+0xbc>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075de:	4b2a      	ldr	r3, [pc, #168]	; (8007688 <prvSwitchTimerLists+0xbc>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3304      	adds	r3, #4
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe f893 	bl	8005718 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d12e      	bne.n	8007660 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4413      	add	r3, r2
 800760a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	429a      	cmp	r2, r3
 8007612:	d90e      	bls.n	8007632 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007620:	4b19      	ldr	r3, [pc, #100]	; (8007688 <prvSwitchTimerLists+0xbc>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3304      	adds	r3, #4
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f7fe f83c 	bl	80056a8 <vListInsert>
 8007630:	e016      	b.n	8007660 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007632:	2300      	movs	r3, #0
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	2300      	movs	r3, #0
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	2100      	movs	r1, #0
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f7ff fd9d 	bl	800717c <xTimerGenericCommand>
 8007642:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <prvSwitchTimerLists+0x94>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	603b      	str	r3, [r7, #0]
}
 800765c:	bf00      	nop
 800765e:	e7fe      	b.n	800765e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007660:	4b09      	ldr	r3, [pc, #36]	; (8007688 <prvSwitchTimerLists+0xbc>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1b4      	bne.n	80075d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800766a:	4b07      	ldr	r3, [pc, #28]	; (8007688 <prvSwitchTimerLists+0xbc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007670:	4b06      	ldr	r3, [pc, #24]	; (800768c <prvSwitchTimerLists+0xc0>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a04      	ldr	r2, [pc, #16]	; (8007688 <prvSwitchTimerLists+0xbc>)
 8007676:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007678:	4a04      	ldr	r2, [pc, #16]	; (800768c <prvSwitchTimerLists+0xc0>)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	6013      	str	r3, [r2, #0]
}
 800767e:	bf00      	nop
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20001e6c 	.word	0x20001e6c
 800768c:	20001e70 	.word	0x20001e70

08007690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007696:	f000 f949 	bl	800792c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800769a:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <prvCheckForValidListAndQueue+0x60>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d120      	bne.n	80076e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076a2:	4814      	ldr	r0, [pc, #80]	; (80076f4 <prvCheckForValidListAndQueue+0x64>)
 80076a4:	f7fd ffb2 	bl	800560c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076a8:	4813      	ldr	r0, [pc, #76]	; (80076f8 <prvCheckForValidListAndQueue+0x68>)
 80076aa:	f7fd ffaf 	bl	800560c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <prvCheckForValidListAndQueue+0x6c>)
 80076b0:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <prvCheckForValidListAndQueue+0x64>)
 80076b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076b4:	4b12      	ldr	r3, [pc, #72]	; (8007700 <prvCheckForValidListAndQueue+0x70>)
 80076b6:	4a10      	ldr	r2, [pc, #64]	; (80076f8 <prvCheckForValidListAndQueue+0x68>)
 80076b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076ba:	2300      	movs	r3, #0
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <prvCheckForValidListAndQueue+0x74>)
 80076c0:	4a11      	ldr	r2, [pc, #68]	; (8007708 <prvCheckForValidListAndQueue+0x78>)
 80076c2:	2110      	movs	r1, #16
 80076c4:	200a      	movs	r0, #10
 80076c6:	f7fe f8b9 	bl	800583c <xQueueGenericCreateStatic>
 80076ca:	4603      	mov	r3, r0
 80076cc:	4a08      	ldr	r2, [pc, #32]	; (80076f0 <prvCheckForValidListAndQueue+0x60>)
 80076ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076d0:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <prvCheckForValidListAndQueue+0x60>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <prvCheckForValidListAndQueue+0x60>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	490b      	ldr	r1, [pc, #44]	; (800770c <prvCheckForValidListAndQueue+0x7c>)
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fccc 	bl	800607c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076e4:	f000 f952 	bl	800798c <vPortExitCritical>
}
 80076e8:	bf00      	nop
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20001e74 	.word	0x20001e74
 80076f4:	20001e44 	.word	0x20001e44
 80076f8:	20001e58 	.word	0x20001e58
 80076fc:	20001e6c 	.word	0x20001e6c
 8007700:	20001e70 	.word	0x20001e70
 8007704:	20001f20 	.word	0x20001f20
 8007708:	20001e80 	.word	0x20001e80
 800770c:	08008128 	.word	0x08008128

08007710 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08a      	sub	sp, #40	; 0x28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800771e:	f06f 0301 	mvn.w	r3, #1
 8007722:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007730:	4b06      	ldr	r3, [pc, #24]	; (800774c <xTimerPendFunctionCallFromISR+0x3c>)
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	f107 0114 	add.w	r1, r7, #20
 8007738:	2300      	movs	r3, #0
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	f7fe fa16 	bl	8005b6c <xQueueGenericSendFromISR>
 8007740:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007744:	4618      	mov	r0, r3
 8007746:	3728      	adds	r7, #40	; 0x28
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20001e74 	.word	0x20001e74

08007750 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3b04      	subs	r3, #4
 8007760:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3b04      	subs	r3, #4
 800776e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f023 0201 	bic.w	r2, r3, #1
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3b04      	subs	r3, #4
 800777e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007780:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <pxPortInitialiseStack+0x54>)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3b14      	subs	r3, #20
 800778a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3b20      	subs	r3, #32
 8007796:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007798:	68fb      	ldr	r3, [r7, #12]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr
 80077a4:	080077a9 	.word	0x080077a9

080077a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077b2:	4b12      	ldr	r3, [pc, #72]	; (80077fc <prvTaskExitError+0x54>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ba:	d00a      	beq.n	80077d2 <prvTaskExitError+0x2a>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60fb      	str	r3, [r7, #12]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <prvTaskExitError+0x28>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60bb      	str	r3, [r7, #8]
}
 80077e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077e6:	bf00      	nop
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0fc      	beq.n	80077e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077ee:	bf00      	nop
 80077f0:	bf00      	nop
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bc80      	pop	{r7}
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	2000000c 	.word	0x2000000c

08007800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007800:	4b07      	ldr	r3, [pc, #28]	; (8007820 <pxCurrentTCBConst2>)
 8007802:	6819      	ldr	r1, [r3, #0]
 8007804:	6808      	ldr	r0, [r1, #0]
 8007806:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800780a:	f380 8809 	msr	PSP, r0
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f04f 0000 	mov.w	r0, #0
 8007816:	f380 8811 	msr	BASEPRI, r0
 800781a:	f04e 0e0d 	orr.w	lr, lr, #13
 800781e:	4770      	bx	lr

08007820 <pxCurrentTCBConst2>:
 8007820:	20001944 	.word	0x20001944
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop

08007828 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007828:	4806      	ldr	r0, [pc, #24]	; (8007844 <prvPortStartFirstTask+0x1c>)
 800782a:	6800      	ldr	r0, [r0, #0]
 800782c:	6800      	ldr	r0, [r0, #0]
 800782e:	f380 8808 	msr	MSP, r0
 8007832:	b662      	cpsie	i
 8007834:	b661      	cpsie	f
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	df00      	svc	0
 8007840:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007842:	bf00      	nop
 8007844:	e000ed08 	.word	0xe000ed08

08007848 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800784e:	4b32      	ldr	r3, [pc, #200]	; (8007918 <xPortStartScheduler+0xd0>)
 8007850:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	22ff      	movs	r2, #255	; 0xff
 800785e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007870:	b2da      	uxtb	r2, r3
 8007872:	4b2a      	ldr	r3, [pc, #168]	; (800791c <xPortStartScheduler+0xd4>)
 8007874:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007876:	4b2a      	ldr	r3, [pc, #168]	; (8007920 <xPortStartScheduler+0xd8>)
 8007878:	2207      	movs	r2, #7
 800787a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800787c:	e009      	b.n	8007892 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800787e:	4b28      	ldr	r3, [pc, #160]	; (8007920 <xPortStartScheduler+0xd8>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3b01      	subs	r3, #1
 8007884:	4a26      	ldr	r2, [pc, #152]	; (8007920 <xPortStartScheduler+0xd8>)
 8007886:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	b2db      	uxtb	r3, r3
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	b2db      	uxtb	r3, r3
 8007890:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789a:	2b80      	cmp	r3, #128	; 0x80
 800789c:	d0ef      	beq.n	800787e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800789e:	4b20      	ldr	r3, [pc, #128]	; (8007920 <xPortStartScheduler+0xd8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f1c3 0307 	rsb	r3, r3, #7
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d00a      	beq.n	80078c0 <xPortStartScheduler+0x78>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	60bb      	str	r3, [r7, #8]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078c0:	4b17      	ldr	r3, [pc, #92]	; (8007920 <xPortStartScheduler+0xd8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	4a16      	ldr	r2, [pc, #88]	; (8007920 <xPortStartScheduler+0xd8>)
 80078c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078ca:	4b15      	ldr	r3, [pc, #84]	; (8007920 <xPortStartScheduler+0xd8>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078d2:	4a13      	ldr	r2, [pc, #76]	; (8007920 <xPortStartScheduler+0xd8>)
 80078d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078de:	4b11      	ldr	r3, [pc, #68]	; (8007924 <xPortStartScheduler+0xdc>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a10      	ldr	r2, [pc, #64]	; (8007924 <xPortStartScheduler+0xdc>)
 80078e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078ea:	4b0e      	ldr	r3, [pc, #56]	; (8007924 <xPortStartScheduler+0xdc>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a0d      	ldr	r2, [pc, #52]	; (8007924 <xPortStartScheduler+0xdc>)
 80078f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078f6:	f000 f8b9 	bl	8007a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <xPortStartScheduler+0xe0>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007900:	f7ff ff92 	bl	8007828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007904:	f7fe ffe2 	bl	80068cc <vTaskSwitchContext>
	prvTaskExitError();
 8007908:	f7ff ff4e 	bl	80077a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	e000e400 	.word	0xe000e400
 800791c:	20001f70 	.word	0x20001f70
 8007920:	20001f74 	.word	0x20001f74
 8007924:	e000ed20 	.word	0xe000ed20
 8007928:	2000000c 	.word	0x2000000c

0800792c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	607b      	str	r3, [r7, #4]
}
 8007944:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007946:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <vPortEnterCritical+0x58>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3301      	adds	r3, #1
 800794c:	4a0d      	ldr	r2, [pc, #52]	; (8007984 <vPortEnterCritical+0x58>)
 800794e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <vPortEnterCritical+0x58>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d10f      	bne.n	8007978 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007958:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <vPortEnterCritical+0x5c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <vPortEnterCritical+0x4c>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	603b      	str	r3, [r7, #0]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <vPortEnterCritical+0x4a>
	}
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000000c 	.word	0x2000000c
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007992:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <vPortExitCritical+0x4c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <vPortExitCritical+0x24>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	607b      	str	r3, [r7, #4]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079b0:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <vPortExitCritical+0x4c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	4a08      	ldr	r2, [pc, #32]	; (80079d8 <vPortExitCritical+0x4c>)
 80079b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079ba:	4b07      	ldr	r3, [pc, #28]	; (80079d8 <vPortExitCritical+0x4c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d105      	bne.n	80079ce <vPortExitCritical+0x42>
 80079c2:	2300      	movs	r3, #0
 80079c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	f383 8811 	msr	BASEPRI, r3
}
 80079cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bc80      	pop	{r7}
 80079d6:	4770      	bx	lr
 80079d8:	2000000c 	.word	0x2000000c
 80079dc:	00000000 	.word	0x00000000

080079e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079e0:	f3ef 8009 	mrs	r0, PSP
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <pxCurrentTCBConst>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079f0:	6010      	str	r0, [r2, #0]
 80079f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80079f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079fa:	f380 8811 	msr	BASEPRI, r0
 80079fe:	f7fe ff65 	bl	80068cc <vTaskSwitchContext>
 8007a02:	f04f 0000 	mov.w	r0, #0
 8007a06:	f380 8811 	msr	BASEPRI, r0
 8007a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	6808      	ldr	r0, [r1, #0]
 8007a12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a16:	f380 8809 	msr	PSP, r0
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	4770      	bx	lr

08007a20 <pxCurrentTCBConst>:
 8007a20:	20001944 	.word	0x20001944
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop

08007a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	607b      	str	r3, [r7, #4]
}
 8007a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a42:	f7fe fe85 	bl	8006750 <xTaskIncrementTick>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <SysTick_Handler+0x40>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	2300      	movs	r3, #0
 8007a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f383 8811 	msr	BASEPRI, r3
}
 8007a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	e000ed04 	.word	0xe000ed04

08007a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a70:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <vPortSetupTimerInterrupt+0x30>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a76:	4b0a      	ldr	r3, [pc, #40]	; (8007aa0 <vPortSetupTimerInterrupt+0x34>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <vPortSetupTimerInterrupt+0x38>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a09      	ldr	r2, [pc, #36]	; (8007aa8 <vPortSetupTimerInterrupt+0x3c>)
 8007a82:	fba2 2303 	umull	r2, r3, r2, r3
 8007a86:	099b      	lsrs	r3, r3, #6
 8007a88:	4a08      	ldr	r2, [pc, #32]	; (8007aac <vPortSetupTimerInterrupt+0x40>)
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a8e:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <vPortSetupTimerInterrupt+0x30>)
 8007a90:	2207      	movs	r2, #7
 8007a92:	601a      	str	r2, [r3, #0]
}
 8007a94:	bf00      	nop
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bc80      	pop	{r7}
 8007a9a:	4770      	bx	lr
 8007a9c:	e000e010 	.word	0xe000e010
 8007aa0:	e000e018 	.word	0xe000e018
 8007aa4:	20000004 	.word	0x20000004
 8007aa8:	10624dd3 	.word	0x10624dd3
 8007aac:	e000e014 	.word	0xe000e014

08007ab0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ab6:	f3ef 8305 	mrs	r3, IPSR
 8007aba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b0f      	cmp	r3, #15
 8007ac0:	d914      	bls.n	8007aec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ac2:	4a16      	ldr	r2, [pc, #88]	; (8007b1c <vPortValidateInterruptPriority+0x6c>)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007acc:	4b14      	ldr	r3, [pc, #80]	; (8007b20 <vPortValidateInterruptPriority+0x70>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	7afa      	ldrb	r2, [r7, #11]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d20a      	bcs.n	8007aec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	607b      	str	r3, [r7, #4]
}
 8007ae8:	bf00      	nop
 8007aea:	e7fe      	b.n	8007aea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007aec:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <vPortValidateInterruptPriority+0x74>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007af4:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <vPortValidateInterruptPriority+0x78>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d90a      	bls.n	8007b12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	603b      	str	r3, [r7, #0]
}
 8007b0e:	bf00      	nop
 8007b10:	e7fe      	b.n	8007b10 <vPortValidateInterruptPriority+0x60>
	}
 8007b12:	bf00      	nop
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bc80      	pop	{r7}
 8007b1a:	4770      	bx	lr
 8007b1c:	e000e3f0 	.word	0xe000e3f0
 8007b20:	20001f70 	.word	0x20001f70
 8007b24:	e000ed0c 	.word	0xe000ed0c
 8007b28:	20001f74 	.word	0x20001f74

08007b2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b34:	2300      	movs	r3, #0
 8007b36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b38:	f7fe fd50 	bl	80065dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b3c:	4b58      	ldr	r3, [pc, #352]	; (8007ca0 <pvPortMalloc+0x174>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b44:	f000 f910 	bl	8007d68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b48:	4b56      	ldr	r3, [pc, #344]	; (8007ca4 <pvPortMalloc+0x178>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f040 808e 	bne.w	8007c72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01d      	beq.n	8007b98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d014      	beq.n	8007b98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f023 0307 	bic.w	r3, r3, #7
 8007b74:	3308      	adds	r3, #8
 8007b76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <pvPortMalloc+0x6c>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	617b      	str	r3, [r7, #20]
}
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d069      	beq.n	8007c72 <pvPortMalloc+0x146>
 8007b9e:	4b42      	ldr	r3, [pc, #264]	; (8007ca8 <pvPortMalloc+0x17c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d864      	bhi.n	8007c72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ba8:	4b40      	ldr	r3, [pc, #256]	; (8007cac <pvPortMalloc+0x180>)
 8007baa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bac:	4b3f      	ldr	r3, [pc, #252]	; (8007cac <pvPortMalloc+0x180>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bb2:	e004      	b.n	8007bbe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d903      	bls.n	8007bd0 <pvPortMalloc+0xa4>
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1f1      	bne.n	8007bb4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bd0:	4b33      	ldr	r3, [pc, #204]	; (8007ca0 <pvPortMalloc+0x174>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d04b      	beq.n	8007c72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2208      	movs	r2, #8
 8007be0:	4413      	add	r3, r2
 8007be2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	1ad2      	subs	r2, r2, r3
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d91f      	bls.n	8007c3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <pvPortMalloc+0xf8>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	613b      	str	r3, [r7, #16]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	1ad2      	subs	r2, r2, r3
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c36:	69b8      	ldr	r0, [r7, #24]
 8007c38:	f000 f8f8 	bl	8007e2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c3c:	4b1a      	ldr	r3, [pc, #104]	; (8007ca8 <pvPortMalloc+0x17c>)
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	4a18      	ldr	r2, [pc, #96]	; (8007ca8 <pvPortMalloc+0x17c>)
 8007c48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c4a:	4b17      	ldr	r3, [pc, #92]	; (8007ca8 <pvPortMalloc+0x17c>)
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	4b18      	ldr	r3, [pc, #96]	; (8007cb0 <pvPortMalloc+0x184>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d203      	bcs.n	8007c5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c56:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <pvPortMalloc+0x17c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a15      	ldr	r2, [pc, #84]	; (8007cb0 <pvPortMalloc+0x184>)
 8007c5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <pvPortMalloc+0x178>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c72:	f7fe fcc1 	bl	80065f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <pvPortMalloc+0x16a>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	60fb      	str	r3, [r7, #12]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <pvPortMalloc+0x168>
	return pvReturn;
 8007c96:	69fb      	ldr	r3, [r7, #28]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3728      	adds	r7, #40	; 0x28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20002b80 	.word	0x20002b80
 8007ca4:	20002b8c 	.word	0x20002b8c
 8007ca8:	20002b84 	.word	0x20002b84
 8007cac:	20002b78 	.word	0x20002b78
 8007cb0:	20002b88 	.word	0x20002b88

08007cb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d048      	beq.n	8007d58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cc6:	2308      	movs	r3, #8
 8007cc8:	425b      	negs	r3, r3
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4413      	add	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	4b21      	ldr	r3, [pc, #132]	; (8007d60 <vPortFree+0xac>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <vPortFree+0x44>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	60fb      	str	r3, [r7, #12]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00a      	beq.n	8007d16 <vPortFree+0x62>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	60bb      	str	r3, [r7, #8]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	4b11      	ldr	r3, [pc, #68]	; (8007d60 <vPortFree+0xac>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d019      	beq.n	8007d58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d115      	bne.n	8007d58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <vPortFree+0xac>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	43db      	mvns	r3, r3
 8007d36:	401a      	ands	r2, r3
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d3c:	f7fe fc4e 	bl	80065dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <vPortFree+0xb0>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4413      	add	r3, r2
 8007d4a:	4a06      	ldr	r2, [pc, #24]	; (8007d64 <vPortFree+0xb0>)
 8007d4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d4e:	6938      	ldr	r0, [r7, #16]
 8007d50:	f000 f86c 	bl	8007e2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d54:	f7fe fc50 	bl	80065f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d58:	bf00      	nop
 8007d5a:	3718      	adds	r7, #24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	20002b8c 	.word	0x20002b8c
 8007d64:	20002b84 	.word	0x20002b84

08007d68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007d72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d74:	4b27      	ldr	r3, [pc, #156]	; (8007e14 <prvHeapInit+0xac>)
 8007d76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00c      	beq.n	8007d9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3307      	adds	r3, #7
 8007d86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 0307 	bic.w	r3, r3, #7
 8007d8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	4a1f      	ldr	r2, [pc, #124]	; (8007e14 <prvHeapInit+0xac>)
 8007d98:	4413      	add	r3, r2
 8007d9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007da0:	4a1d      	ldr	r2, [pc, #116]	; (8007e18 <prvHeapInit+0xb0>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007da6:	4b1c      	ldr	r3, [pc, #112]	; (8007e18 <prvHeapInit+0xb0>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	4413      	add	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007db4:	2208      	movs	r2, #8
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0307 	bic.w	r3, r3, #7
 8007dc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4a15      	ldr	r2, [pc, #84]	; (8007e1c <prvHeapInit+0xb4>)
 8007dc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007dca:	4b14      	ldr	r3, [pc, #80]	; (8007e1c <prvHeapInit+0xb4>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dd2:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <prvHeapInit+0xb4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007de8:	4b0c      	ldr	r3, [pc, #48]	; (8007e1c <prvHeapInit+0xb4>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	4a0a      	ldr	r2, [pc, #40]	; (8007e20 <prvHeapInit+0xb8>)
 8007df6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <prvHeapInit+0xbc>)
 8007dfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e00:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <prvHeapInit+0xc0>)
 8007e02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e06:	601a      	str	r2, [r3, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20001f78 	.word	0x20001f78
 8007e18:	20002b78 	.word	0x20002b78
 8007e1c:	20002b80 	.word	0x20002b80
 8007e20:	20002b88 	.word	0x20002b88
 8007e24:	20002b84 	.word	0x20002b84
 8007e28:	20002b8c 	.word	0x20002b8c

08007e2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e34:	4b27      	ldr	r3, [pc, #156]	; (8007ed4 <prvInsertBlockIntoFreeList+0xa8>)
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	e002      	b.n	8007e40 <prvInsertBlockIntoFreeList+0x14>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d8f7      	bhi.n	8007e3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	4413      	add	r3, r2
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d108      	bne.n	8007e6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	441a      	add	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	441a      	add	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d118      	bne.n	8007eb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	4b14      	ldr	r3, [pc, #80]	; (8007ed8 <prvInsertBlockIntoFreeList+0xac>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d00d      	beq.n	8007eaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	441a      	add	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	e008      	b.n	8007ebc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <prvInsertBlockIntoFreeList+0xac>)
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	e003      	b.n	8007ebc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d002      	beq.n	8007eca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr
 8007ed4:	20002b78 	.word	0x20002b78
 8007ed8:	20002b80 	.word	0x20002b80

08007edc <memset>:
 8007edc:	4603      	mov	r3, r0
 8007ede:	4402      	add	r2, r0
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d100      	bne.n	8007ee6 <memset+0xa>
 8007ee4:	4770      	bx	lr
 8007ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eea:	e7f9      	b.n	8007ee0 <memset+0x4>

08007eec <_reclaim_reent>:
 8007eec:	4b29      	ldr	r3, [pc, #164]	; (8007f94 <_reclaim_reent+0xa8>)
 8007eee:	b570      	push	{r4, r5, r6, lr}
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	4283      	cmp	r3, r0
 8007ef6:	d04b      	beq.n	8007f90 <_reclaim_reent+0xa4>
 8007ef8:	69c3      	ldr	r3, [r0, #28]
 8007efa:	b143      	cbz	r3, 8007f0e <_reclaim_reent+0x22>
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d144      	bne.n	8007f8c <_reclaim_reent+0xa0>
 8007f02:	69e3      	ldr	r3, [r4, #28]
 8007f04:	6819      	ldr	r1, [r3, #0]
 8007f06:	b111      	cbz	r1, 8007f0e <_reclaim_reent+0x22>
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 f879 	bl	8008000 <_free_r>
 8007f0e:	6961      	ldr	r1, [r4, #20]
 8007f10:	b111      	cbz	r1, 8007f18 <_reclaim_reent+0x2c>
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 f874 	bl	8008000 <_free_r>
 8007f18:	69e1      	ldr	r1, [r4, #28]
 8007f1a:	b111      	cbz	r1, 8007f22 <_reclaim_reent+0x36>
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 f86f 	bl	8008000 <_free_r>
 8007f22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007f24:	b111      	cbz	r1, 8007f2c <_reclaim_reent+0x40>
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 f86a 	bl	8008000 <_free_r>
 8007f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f2e:	b111      	cbz	r1, 8007f36 <_reclaim_reent+0x4a>
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 f865 	bl	8008000 <_free_r>
 8007f36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007f38:	b111      	cbz	r1, 8007f40 <_reclaim_reent+0x54>
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 f860 	bl	8008000 <_free_r>
 8007f40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f42:	b111      	cbz	r1, 8007f4a <_reclaim_reent+0x5e>
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 f85b 	bl	8008000 <_free_r>
 8007f4a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007f4c:	b111      	cbz	r1, 8007f54 <_reclaim_reent+0x68>
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f000 f856 	bl	8008000 <_free_r>
 8007f54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007f56:	b111      	cbz	r1, 8007f5e <_reclaim_reent+0x72>
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 f851 	bl	8008000 <_free_r>
 8007f5e:	6a23      	ldr	r3, [r4, #32]
 8007f60:	b1b3      	cbz	r3, 8007f90 <_reclaim_reent+0xa4>
 8007f62:	4620      	mov	r0, r4
 8007f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f68:	4718      	bx	r3
 8007f6a:	5949      	ldr	r1, [r1, r5]
 8007f6c:	b941      	cbnz	r1, 8007f80 <_reclaim_reent+0x94>
 8007f6e:	3504      	adds	r5, #4
 8007f70:	69e3      	ldr	r3, [r4, #28]
 8007f72:	2d80      	cmp	r5, #128	; 0x80
 8007f74:	68d9      	ldr	r1, [r3, #12]
 8007f76:	d1f8      	bne.n	8007f6a <_reclaim_reent+0x7e>
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 f841 	bl	8008000 <_free_r>
 8007f7e:	e7c0      	b.n	8007f02 <_reclaim_reent+0x16>
 8007f80:	680e      	ldr	r6, [r1, #0]
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 f83c 	bl	8008000 <_free_r>
 8007f88:	4631      	mov	r1, r6
 8007f8a:	e7ef      	b.n	8007f6c <_reclaim_reent+0x80>
 8007f8c:	2500      	movs	r5, #0
 8007f8e:	e7ef      	b.n	8007f70 <_reclaim_reent+0x84>
 8007f90:	bd70      	pop	{r4, r5, r6, pc}
 8007f92:	bf00      	nop
 8007f94:	2000005c 	.word	0x2000005c

08007f98 <__libc_init_array>:
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	2600      	movs	r6, #0
 8007f9c:	4d0c      	ldr	r5, [pc, #48]	; (8007fd0 <__libc_init_array+0x38>)
 8007f9e:	4c0d      	ldr	r4, [pc, #52]	; (8007fd4 <__libc_init_array+0x3c>)
 8007fa0:	1b64      	subs	r4, r4, r5
 8007fa2:	10a4      	asrs	r4, r4, #2
 8007fa4:	42a6      	cmp	r6, r4
 8007fa6:	d109      	bne.n	8007fbc <__libc_init_array+0x24>
 8007fa8:	f000 f87e 	bl	80080a8 <_init>
 8007fac:	2600      	movs	r6, #0
 8007fae:	4d0a      	ldr	r5, [pc, #40]	; (8007fd8 <__libc_init_array+0x40>)
 8007fb0:	4c0a      	ldr	r4, [pc, #40]	; (8007fdc <__libc_init_array+0x44>)
 8007fb2:	1b64      	subs	r4, r4, r5
 8007fb4:	10a4      	asrs	r4, r4, #2
 8007fb6:	42a6      	cmp	r6, r4
 8007fb8:	d105      	bne.n	8007fc6 <__libc_init_array+0x2e>
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc0:	4798      	blx	r3
 8007fc2:	3601      	adds	r6, #1
 8007fc4:	e7ee      	b.n	8007fa4 <__libc_init_array+0xc>
 8007fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fca:	4798      	blx	r3
 8007fcc:	3601      	adds	r6, #1
 8007fce:	e7f2      	b.n	8007fb6 <__libc_init_array+0x1e>
 8007fd0:	0800828c 	.word	0x0800828c
 8007fd4:	0800828c 	.word	0x0800828c
 8007fd8:	0800828c 	.word	0x0800828c
 8007fdc:	08008290 	.word	0x08008290

08007fe0 <__retarget_lock_acquire_recursive>:
 8007fe0:	4770      	bx	lr

08007fe2 <__retarget_lock_release_recursive>:
 8007fe2:	4770      	bx	lr

08007fe4 <memcpy>:
 8007fe4:	440a      	add	r2, r1
 8007fe6:	4291      	cmp	r1, r2
 8007fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fec:	d100      	bne.n	8007ff0 <memcpy+0xc>
 8007fee:	4770      	bx	lr
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ff6:	4291      	cmp	r1, r2
 8007ff8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ffc:	d1f9      	bne.n	8007ff2 <memcpy+0xe>
 8007ffe:	bd10      	pop	{r4, pc}

08008000 <_free_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4605      	mov	r5, r0
 8008004:	2900      	cmp	r1, #0
 8008006:	d040      	beq.n	800808a <_free_r+0x8a>
 8008008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800800c:	1f0c      	subs	r4, r1, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfb8      	it	lt
 8008012:	18e4      	addlt	r4, r4, r3
 8008014:	f000 f83c 	bl	8008090 <__malloc_lock>
 8008018:	4a1c      	ldr	r2, [pc, #112]	; (800808c <_free_r+0x8c>)
 800801a:	6813      	ldr	r3, [r2, #0]
 800801c:	b933      	cbnz	r3, 800802c <_free_r+0x2c>
 800801e:	6063      	str	r3, [r4, #4]
 8008020:	6014      	str	r4, [r2, #0]
 8008022:	4628      	mov	r0, r5
 8008024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008028:	f000 b838 	b.w	800809c <__malloc_unlock>
 800802c:	42a3      	cmp	r3, r4
 800802e:	d908      	bls.n	8008042 <_free_r+0x42>
 8008030:	6820      	ldr	r0, [r4, #0]
 8008032:	1821      	adds	r1, r4, r0
 8008034:	428b      	cmp	r3, r1
 8008036:	bf01      	itttt	eq
 8008038:	6819      	ldreq	r1, [r3, #0]
 800803a:	685b      	ldreq	r3, [r3, #4]
 800803c:	1809      	addeq	r1, r1, r0
 800803e:	6021      	streq	r1, [r4, #0]
 8008040:	e7ed      	b.n	800801e <_free_r+0x1e>
 8008042:	461a      	mov	r2, r3
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	b10b      	cbz	r3, 800804c <_free_r+0x4c>
 8008048:	42a3      	cmp	r3, r4
 800804a:	d9fa      	bls.n	8008042 <_free_r+0x42>
 800804c:	6811      	ldr	r1, [r2, #0]
 800804e:	1850      	adds	r0, r2, r1
 8008050:	42a0      	cmp	r0, r4
 8008052:	d10b      	bne.n	800806c <_free_r+0x6c>
 8008054:	6820      	ldr	r0, [r4, #0]
 8008056:	4401      	add	r1, r0
 8008058:	1850      	adds	r0, r2, r1
 800805a:	4283      	cmp	r3, r0
 800805c:	6011      	str	r1, [r2, #0]
 800805e:	d1e0      	bne.n	8008022 <_free_r+0x22>
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	4408      	add	r0, r1
 8008066:	6010      	str	r0, [r2, #0]
 8008068:	6053      	str	r3, [r2, #4]
 800806a:	e7da      	b.n	8008022 <_free_r+0x22>
 800806c:	d902      	bls.n	8008074 <_free_r+0x74>
 800806e:	230c      	movs	r3, #12
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	e7d6      	b.n	8008022 <_free_r+0x22>
 8008074:	6820      	ldr	r0, [r4, #0]
 8008076:	1821      	adds	r1, r4, r0
 8008078:	428b      	cmp	r3, r1
 800807a:	bf01      	itttt	eq
 800807c:	6819      	ldreq	r1, [r3, #0]
 800807e:	685b      	ldreq	r3, [r3, #4]
 8008080:	1809      	addeq	r1, r1, r0
 8008082:	6021      	streq	r1, [r4, #0]
 8008084:	6063      	str	r3, [r4, #4]
 8008086:	6054      	str	r4, [r2, #4]
 8008088:	e7cb      	b.n	8008022 <_free_r+0x22>
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	20002ccc 	.word	0x20002ccc

08008090 <__malloc_lock>:
 8008090:	4801      	ldr	r0, [pc, #4]	; (8008098 <__malloc_lock+0x8>)
 8008092:	f7ff bfa5 	b.w	8007fe0 <__retarget_lock_acquire_recursive>
 8008096:	bf00      	nop
 8008098:	20002cc8 	.word	0x20002cc8

0800809c <__malloc_unlock>:
 800809c:	4801      	ldr	r0, [pc, #4]	; (80080a4 <__malloc_unlock+0x8>)
 800809e:	f7ff bfa0 	b.w	8007fe2 <__retarget_lock_release_recursive>
 80080a2:	bf00      	nop
 80080a4:	20002cc8 	.word	0x20002cc8

080080a8 <_init>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	bf00      	nop
 80080ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ae:	bc08      	pop	{r3}
 80080b0:	469e      	mov	lr, r3
 80080b2:	4770      	bx	lr

080080b4 <_fini>:
 80080b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b6:	bf00      	nop
 80080b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ba:	bc08      	pop	{r3}
 80080bc:	469e      	mov	lr, r3
 80080be:	4770      	bx	lr
